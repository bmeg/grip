syntax = "proto3";

package aql;

import "google/api/annotations.proto";
import "google/protobuf/struct.proto";

message GraphQuery {
  string graph = 1;
  repeated GraphStatement query = 2;
}

message QuerySet {
  repeated GraphStatement query = 1;
}

message MatchQuerySet {
  repeated QuerySet queries = 1;
}

message GraphStatement {
  oneof statement {
    google.protobuf.ListValue v = 1;
    google.protobuf.ListValue e = 2;

    google.protobuf.ListValue in = 10;
    google.protobuf.ListValue out = 11;
    google.protobuf.ListValue in_edge = 12;
    google.protobuf.ListValue out_edge = 13;
    google.protobuf.ListValue both = 14;
    google.protobuf.ListValue both_edge = 15;

    string as = 20;
    SelectStatement select = 21;
    google.protobuf.Value render = 23;

    int64 limit = 25;
    string count = 26;

    google.protobuf.ListValue distinct = 31;

    MatchQuerySet match = 40;

    //Function Methods
    string import = 50;
    string map = 51;
    FoldStatement fold = 52;
    string filter = 54;

    WhereExpression where = 57;
    google.protobuf.ListValue fields = 58;
    Aggregations aggregate = 59;
  }
}

message AggregationsRequest {
  string graph = 1;
  repeated Aggregate aggregations = 2; 
}

message Aggregations {
  repeated Aggregate aggregations = 1; 
}

message Aggregate {
  string name = 1;
  oneof aggregation {
    TermAggregation term = 2;
    PercentileAggregation percentile = 3;
    HistogramAggregation histogram = 4;
  }
}

message TermAggregation {
  string label = 1;
  string field = 2;
  uint64 size = 3;
}

message PercentileAggregation {
  string label = 1;
  string field = 2;
  repeated double percents = 3;
}

message HistogramAggregation {
  string label = 1;
  string field = 2;
  uint64 interval = 3;
}

message NamedAggregationResult {
	string name = 1;
	repeated AggregationResult buckets = 2;
}

message AggregationResult {
  google.protobuf.Value key = 1;
  double value = 2;
}

message WhereExpressionList {
	repeated WhereExpression expressions = 1;
}

message WhereExpression {
  oneof expression {
    WhereExpressionList and = 1;
    WhereExpressionList or = 2;
    WhereExpression not = 3;
    WhereCondition condition = 4;
  }
}

message WhereCondition {
  string key = 1;
  google.protobuf.Value value = 2;
  Condition condition = 3;
}

enum Condition {
  UNKNOWN_CONDITION = 0;
  EQ  = 1;
  NEQ = 2;
  GT  = 3;
  GTE = 4;
  LT  = 5;
  LTE = 6;
  IN = 7;
	CONTAINS = 8;
}

message SelectStatement {
  repeated string labels = 1;
}

message FoldStatement {
  string source = 1;
  google.protobuf.Value init = 2;
}

message Vertex {
  string gid = 1;
  string label = 2;
  google.protobuf.Struct data = 3;
}

message Edge {
  string gid = 1;
  string label = 2;
  string from = 3;
  string to = 4;
  google.protobuf.Struct data = 5;
}

message QueryResult {
  oneof result {
    Vertex vertex = 1;
    Edge edge = 2;
    google.protobuf.Value data = 4;
  }
}

message ResultRow {
  QueryResult value = 1;
  repeated QueryResult row = 2;
}

message EditResult {
  oneof result {
    string error = 1;
    string id = 2;
  }
}

message GraphElement {
  string graph = 1;
  Vertex vertex = 2;
  Edge edge = 3;
}

message Graph {
  string graph = 1;
  repeated Edge edges = 2;
  repeated Vertex vertices = 3;
}


message GraphID {
  string graph = 1;
}

message ElementID {
  string graph = 1;
  string id = 2;
}

enum ElementType {
  UNKNOWN_TYPE = 0;
  VERTEX = 1;
  EDGE = 2;
}

message IndexID {
  string graph = 1;
  string label = 2;
  string field = 3;
  ElementType type = 4;
}

message Timestamp {
  string timestamp = 1;
}

message Empty {

}

service Query {
  rpc Traversal(GraphQuery) returns (stream ResultRow) {
    option (google.api.http) = {
      post: "/v1/graph/{graph}/query"
      body: "*"
    };
  }

  rpc Aggregate(AggregationsRequest) returns (stream NamedAggregationResult) {
    option (google.api.http) = {
      post: "/v1/graph/{graph}/aggregate"
      body: "*"
    };
  }

  rpc GetVertex(ElementID) returns (Vertex) {
    option (google.api.http) = {
      get: "/v1/graph/{graph}/vertex/{id}"
    };
  }

  rpc GetEdge(ElementID) returns (Edge) {
    option (google.api.http) = {
      get: "/v1/graph/{graph}/edge/{id}"
    };
  }

  rpc GetGraphs(Empty) returns (stream ElementID) {
    option (google.api.http) = {
      get: "/v1/graph"
    };
  }

  rpc GetIndexList(GraphID) returns (stream IndexID) {
    option (google.api.http) = {
      get: "/v1/graph/{graph}/index"
    };
  }

  rpc GetTimestamp(ElementID) returns (Timestamp) {
    option (google.api.http) = {
      get: "/v1/graph/{graph}/timestamp"
    };
  }

}

service Edit {
  rpc AddVertex(GraphElement) returns (EditResult) {
    option (google.api.http) = {
      post: "/v1/graph/{graph}/vertex"
      body: "vertex"
    };
  }

  rpc AddEdge(GraphElement) returns (EditResult) {
    option (google.api.http) = {
      post: "/v1/graph/{graph}/edge"
      body: "edge"
    };
  }

  rpc StreamElements(stream GraphElement) returns (EditResult) {
    option (google.api.http) = {
      post: "/v1/graph"
    };
  }

  rpc AddGraph(ElementID) returns (EditResult) {
    option (google.api.http) = {
      post: "/v1/graph/{graph}"
    };
  }

  rpc AddSubGraph(Graph) returns (EditResult) {
    option (google.api.http) = {
      post: "/v1/graph/{graph}/subgraph"
      body: "*"
    };
  }

  rpc DeleteGraph(ElementID) returns (EditResult) {
    option (google.api.http) = {
      delete: "/v1/graph/{graph}"
    };
  }

  rpc DeleteVertex(ElementID) returns (EditResult) {
    option (google.api.http) = {
      delete: "/v1/graph/{graph}/vertex/{id}"
    };
  }

  rpc DeleteEdge(ElementID) returns (EditResult) {
    option (google.api.http) = {
      delete: "/v1/graph/{graph}/edge/{id}"
    };
  }

  rpc AddIndex(IndexID) returns (EditResult) {
    option (google.api.http) = {
      post: "/v1/graph/{graph}/index/{label}"
      body: "*"
    };
  }

  rpc DeleteIndex(IndexID) returns (EditResult) {
    option (google.api.http) = {
      delete: "/v1/graph/{graph}/index/{label}/{field}"
    };
  }

}
