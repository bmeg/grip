syntax = "proto3";

package aql;

import "google/api/annotations.proto";
import "google/protobuf/struct.proto";

message GraphQuery {
    string graph = 1;
    repeated GraphStatement query = 2;
}

message GraphQuerySet {
  repeated GraphQuery queries = 1;
}

message GraphStatement {
    oneof statement {
        google.protobuf.ListValue V = 1;
        google.protobuf.ListValue E = 2;

        HasStatement has = 5;
        google.protobuf.ListValue hasLabel = 6;
        google.protobuf.ListValue hasId = 7;

        google.protobuf.ListValue in = 10;
        google.protobuf.ListValue out = 11;
        google.protobuf.ListValue inEdge = 12;
        google.protobuf.ListValue outEdge = 13;
        google.protobuf.ListValue both = 14;
        google.protobuf.ListValue bothEdge = 15;

        google.protobuf.ListValue outBundle = 16;

        string as = 20;
        SelectStatement select = 21;
        SelectStatement values = 22;

        int64 limit = 25;
        string count = 26;

        string groupCount = 30;

        GraphQuerySet match = 40;

        //Function Methods
        string import = 50;
        string map = 51;
        string fold = 52;
        string filter = 53;
        string filterValues = 54;

        string vertexFromValues = 55;
    }
}

message HasStatement {
    string key = 1;
    repeated string within = 2;
}

message SelectStatement {
    repeated string labels = 1;
}

message Vertex {
  string gid = 1;
  string label = 2;
  google.protobuf.Struct data = 3;
}

message Edge {
  string gid = 1;
  string label = 2;
  string from = 3;
  string to = 4;
  google.protobuf.Struct data = 5;
}

message Bundle {
  string gid = 1;
  string label = 2;
  string from = 3;
  map<string, google.protobuf.Struct>    bundle = 4;
}


message QueryResult {
    oneof result {
      google.protobuf.Struct struct = 1;
      Vertex vertex = 2;
      Edge edge = 3;
      Bundle bundle = 4;
      int32 int_value = 5;
      double float_value = 6;
      string str_value = 7;
    }
}

message ResultRow {
  QueryResult value = 1;
  repeated QueryResult row = 2;
}

message EditResult {
  oneof result {
    string error = 1;
    string id = 2;
  }
}


message GraphElement {
  string graph = 1;
  Vertex vertex = 2;
  Edge edge = 3;
  Bundle bundle = 4;
}

message Graph {
  string graph = 1;
  repeated Edge edges = 2;
  repeated Vertex vertices = 3;
}

message ElementID {
  string graph = 1;
  string id = 2;
}

message Empty {

}

service Query {
  rpc Traversal(GraphQuery) returns (stream ResultRow) {
    option (google.api.http) = {
      post: "/v1/graph/{graph}/query"
      body: "*"
    };
  }

  rpc GetVertex(ElementID) returns (Vertex) {
    option (google.api.http) = {
      get: "/v1/graph/{graph}/vertex/{id}"
    };
  }

  rpc GetEdge(ElementID) returns (Edge) {
    option (google.api.http) = {
      get: "/v1/graph/{graph}/edge/{id}"
    };
  }

  rpc GetBundle(ElementID) returns (Bundle) {
    option (google.api.http) = {
      get: "/v1/graph/{graph}/bundle/{id}"
    };
  }

  rpc GetGraphs(Empty) returns (stream ElementID) {
    option (google.api.http) = {
      get: "/v1/graph"
    };
  }

}

service Edit {
  rpc AddVertex(GraphElement) returns (EditResult) {
    option (google.api.http) = {
      post: "/v1/graph/{graph}/vertex"
      body: "vertex"
    };
  }

  rpc AddEdge(GraphElement) returns (EditResult) {
    option (google.api.http) = {
      post: "/v1/graph/{graph}/edge"
      body: "edge"
    };
  }

  rpc AddBundle(GraphElement) returns (EditResult) {
    option (google.api.http) = {
      post: "/v1/graph/{graph}/bundle"
      body: "bundle"
    };
  }

  rpc StreamElements(stream GraphElement) returns (EditResult) {
    option (google.api.http) = {
      post: "/v1/graph"
    };
  }

  rpc AddGraph(ElementID) returns (EditResult) {
    option (google.api.http) = {
      post: "/v1/graph/{graph}"
    };
  }

  rpc AddSubGraph(Graph) returns (EditResult) {
    option (google.api.http) = {
      post: "/v1/graph/{graph}/subgraph"
    };
  }

  rpc DeleteGraph(ElementID) returns (EditResult) {
    option (google.api.http) = {
      delete: "/v1/graph/{graph}"
    };
  }

  rpc DeleteVertex(ElementID) returns (EditResult) {
    option (google.api.http) = {
      delete: "/v1/graph/{graph}/vertex/{id}"
    };
  }

  rpc DeleteEdge(ElementID) returns (EditResult) {
    option (google.api.http) = {
      delete: "/v1/graph/{graph}/edge/{id}"
    };
  }

}
