// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: gripper.proto

package gripper

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	GRIPSource_GetCollections_FullMethodName    = "/gripper.GRIPSource/GetCollections"
	GRIPSource_GetCollectionInfo_FullMethodName = "/gripper.GRIPSource/GetCollectionInfo"
	GRIPSource_GetIDs_FullMethodName            = "/gripper.GRIPSource/GetIDs"
	GRIPSource_GetRows_FullMethodName           = "/gripper.GRIPSource/GetRows"
	GRIPSource_GetRowsByID_FullMethodName       = "/gripper.GRIPSource/GetRowsByID"
	GRIPSource_GetRowsByField_FullMethodName    = "/gripper.GRIPSource/GetRowsByField"
)

// GRIPSourceClient is the client API for GRIPSource service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GRIPSourceClient interface {
	GetCollections(ctx context.Context, in *Empty, opts ...grpc.CallOption) (GRIPSource_GetCollectionsClient, error)
	GetCollectionInfo(ctx context.Context, in *Collection, opts ...grpc.CallOption) (*CollectionInfo, error)
	GetIDs(ctx context.Context, in *Collection, opts ...grpc.CallOption) (GRIPSource_GetIDsClient, error)
	GetRows(ctx context.Context, in *Collection, opts ...grpc.CallOption) (GRIPSource_GetRowsClient, error)
	GetRowsByID(ctx context.Context, opts ...grpc.CallOption) (GRIPSource_GetRowsByIDClient, error)
	GetRowsByField(ctx context.Context, in *FieldRequest, opts ...grpc.CallOption) (GRIPSource_GetRowsByFieldClient, error)
}

type gRIPSourceClient struct {
	cc grpc.ClientConnInterface
}

func NewGRIPSourceClient(cc grpc.ClientConnInterface) GRIPSourceClient {
	return &gRIPSourceClient{cc}
}

func (c *gRIPSourceClient) GetCollections(ctx context.Context, in *Empty, opts ...grpc.CallOption) (GRIPSource_GetCollectionsClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GRIPSource_ServiceDesc.Streams[0], GRIPSource_GetCollections_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &gRIPSourceGetCollectionsClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GRIPSource_GetCollectionsClient interface {
	Recv() (*Collection, error)
	grpc.ClientStream
}

type gRIPSourceGetCollectionsClient struct {
	grpc.ClientStream
}

func (x *gRIPSourceGetCollectionsClient) Recv() (*Collection, error) {
	m := new(Collection)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gRIPSourceClient) GetCollectionInfo(ctx context.Context, in *Collection, opts ...grpc.CallOption) (*CollectionInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CollectionInfo)
	err := c.cc.Invoke(ctx, GRIPSource_GetCollectionInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRIPSourceClient) GetIDs(ctx context.Context, in *Collection, opts ...grpc.CallOption) (GRIPSource_GetIDsClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GRIPSource_ServiceDesc.Streams[1], GRIPSource_GetIDs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &gRIPSourceGetIDsClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GRIPSource_GetIDsClient interface {
	Recv() (*RowID, error)
	grpc.ClientStream
}

type gRIPSourceGetIDsClient struct {
	grpc.ClientStream
}

func (x *gRIPSourceGetIDsClient) Recv() (*RowID, error) {
	m := new(RowID)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gRIPSourceClient) GetRows(ctx context.Context, in *Collection, opts ...grpc.CallOption) (GRIPSource_GetRowsClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GRIPSource_ServiceDesc.Streams[2], GRIPSource_GetRows_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &gRIPSourceGetRowsClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GRIPSource_GetRowsClient interface {
	Recv() (*Row, error)
	grpc.ClientStream
}

type gRIPSourceGetRowsClient struct {
	grpc.ClientStream
}

func (x *gRIPSourceGetRowsClient) Recv() (*Row, error) {
	m := new(Row)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gRIPSourceClient) GetRowsByID(ctx context.Context, opts ...grpc.CallOption) (GRIPSource_GetRowsByIDClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GRIPSource_ServiceDesc.Streams[3], GRIPSource_GetRowsByID_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &gRIPSourceGetRowsByIDClient{ClientStream: stream}
	return x, nil
}

type GRIPSource_GetRowsByIDClient interface {
	Send(*RowRequest) error
	Recv() (*Row, error)
	grpc.ClientStream
}

type gRIPSourceGetRowsByIDClient struct {
	grpc.ClientStream
}

func (x *gRIPSourceGetRowsByIDClient) Send(m *RowRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gRIPSourceGetRowsByIDClient) Recv() (*Row, error) {
	m := new(Row)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gRIPSourceClient) GetRowsByField(ctx context.Context, in *FieldRequest, opts ...grpc.CallOption) (GRIPSource_GetRowsByFieldClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GRIPSource_ServiceDesc.Streams[4], GRIPSource_GetRowsByField_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &gRIPSourceGetRowsByFieldClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GRIPSource_GetRowsByFieldClient interface {
	Recv() (*Row, error)
	grpc.ClientStream
}

type gRIPSourceGetRowsByFieldClient struct {
	grpc.ClientStream
}

func (x *gRIPSourceGetRowsByFieldClient) Recv() (*Row, error) {
	m := new(Row)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GRIPSourceServer is the server API for GRIPSource service.
// All implementations must embed UnimplementedGRIPSourceServer
// for forward compatibility
type GRIPSourceServer interface {
	GetCollections(*Empty, GRIPSource_GetCollectionsServer) error
	GetCollectionInfo(context.Context, *Collection) (*CollectionInfo, error)
	GetIDs(*Collection, GRIPSource_GetIDsServer) error
	GetRows(*Collection, GRIPSource_GetRowsServer) error
	GetRowsByID(GRIPSource_GetRowsByIDServer) error
	GetRowsByField(*FieldRequest, GRIPSource_GetRowsByFieldServer) error
	mustEmbedUnimplementedGRIPSourceServer()
}

// UnimplementedGRIPSourceServer must be embedded to have forward compatible implementations.
type UnimplementedGRIPSourceServer struct {
}

func (UnimplementedGRIPSourceServer) GetCollections(*Empty, GRIPSource_GetCollectionsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetCollections not implemented")
}
func (UnimplementedGRIPSourceServer) GetCollectionInfo(context.Context, *Collection) (*CollectionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollectionInfo not implemented")
}
func (UnimplementedGRIPSourceServer) GetIDs(*Collection, GRIPSource_GetIDsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetIDs not implemented")
}
func (UnimplementedGRIPSourceServer) GetRows(*Collection, GRIPSource_GetRowsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetRows not implemented")
}
func (UnimplementedGRIPSourceServer) GetRowsByID(GRIPSource_GetRowsByIDServer) error {
	return status.Errorf(codes.Unimplemented, "method GetRowsByID not implemented")
}
func (UnimplementedGRIPSourceServer) GetRowsByField(*FieldRequest, GRIPSource_GetRowsByFieldServer) error {
	return status.Errorf(codes.Unimplemented, "method GetRowsByField not implemented")
}
func (UnimplementedGRIPSourceServer) mustEmbedUnimplementedGRIPSourceServer() {}

// UnsafeGRIPSourceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GRIPSourceServer will
// result in compilation errors.
type UnsafeGRIPSourceServer interface {
	mustEmbedUnimplementedGRIPSourceServer()
}

func RegisterGRIPSourceServer(s grpc.ServiceRegistrar, srv GRIPSourceServer) {
	s.RegisterService(&GRIPSource_ServiceDesc, srv)
}

func _GRIPSource_GetCollections_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GRIPSourceServer).GetCollections(m, &gRIPSourceGetCollectionsServer{ServerStream: stream})
}

type GRIPSource_GetCollectionsServer interface {
	Send(*Collection) error
	grpc.ServerStream
}

type gRIPSourceGetCollectionsServer struct {
	grpc.ServerStream
}

func (x *gRIPSourceGetCollectionsServer) Send(m *Collection) error {
	return x.ServerStream.SendMsg(m)
}

func _GRIPSource_GetCollectionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Collection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRIPSourceServer).GetCollectionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GRIPSource_GetCollectionInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRIPSourceServer).GetCollectionInfo(ctx, req.(*Collection))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRIPSource_GetIDs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Collection)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GRIPSourceServer).GetIDs(m, &gRIPSourceGetIDsServer{ServerStream: stream})
}

type GRIPSource_GetIDsServer interface {
	Send(*RowID) error
	grpc.ServerStream
}

type gRIPSourceGetIDsServer struct {
	grpc.ServerStream
}

func (x *gRIPSourceGetIDsServer) Send(m *RowID) error {
	return x.ServerStream.SendMsg(m)
}

func _GRIPSource_GetRows_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Collection)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GRIPSourceServer).GetRows(m, &gRIPSourceGetRowsServer{ServerStream: stream})
}

type GRIPSource_GetRowsServer interface {
	Send(*Row) error
	grpc.ServerStream
}

type gRIPSourceGetRowsServer struct {
	grpc.ServerStream
}

func (x *gRIPSourceGetRowsServer) Send(m *Row) error {
	return x.ServerStream.SendMsg(m)
}

func _GRIPSource_GetRowsByID_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GRIPSourceServer).GetRowsByID(&gRIPSourceGetRowsByIDServer{ServerStream: stream})
}

type GRIPSource_GetRowsByIDServer interface {
	Send(*Row) error
	Recv() (*RowRequest, error)
	grpc.ServerStream
}

type gRIPSourceGetRowsByIDServer struct {
	grpc.ServerStream
}

func (x *gRIPSourceGetRowsByIDServer) Send(m *Row) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gRIPSourceGetRowsByIDServer) Recv() (*RowRequest, error) {
	m := new(RowRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GRIPSource_GetRowsByField_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FieldRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GRIPSourceServer).GetRowsByField(m, &gRIPSourceGetRowsByFieldServer{ServerStream: stream})
}

type GRIPSource_GetRowsByFieldServer interface {
	Send(*Row) error
	grpc.ServerStream
}

type gRIPSourceGetRowsByFieldServer struct {
	grpc.ServerStream
}

func (x *gRIPSourceGetRowsByFieldServer) Send(m *Row) error {
	return x.ServerStream.SendMsg(m)
}

// GRIPSource_ServiceDesc is the grpc.ServiceDesc for GRIPSource service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GRIPSource_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gripper.GRIPSource",
	HandlerType: (*GRIPSourceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCollectionInfo",
			Handler:    _GRIPSource_GetCollectionInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetCollections",
			Handler:       _GRIPSource_GetCollections_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetIDs",
			Handler:       _GRIPSource_GetIDs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetRows",
			Handler:       _GRIPSource_GetRows_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetRowsByID",
			Handler:       _GRIPSource_GetRowsByID_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetRowsByField",
			Handler:       _GRIPSource_GetRowsByField_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "gripper.proto",
}
