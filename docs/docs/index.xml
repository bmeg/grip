<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docs on GRIP</title>
    <link>https://bmeg.github.io/grip/docs/</link>
    <description>Recent content in Docs on GRIP</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://bmeg.github.io/grip/docs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>https://bmeg.github.io/grip/docs/tutorials/pathway-commons/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bmeg.github.io/grip/docs/tutorials/pathway-commons/</guid>
      <description>Get Pathway Commons release
curl -O http://www.pathwaycommons.org/archives/PC2/v10/PathwayCommons10.All.BIOPAX.owl.gz Convert to Property Graph
grip rdf --dump --gzip pc PathwayCommons10.All.BIOPAX.owl.gz -m &amp;quot;http://pathwaycommons.org/pc2/#=pc:&amp;quot; -m &amp;quot;http://www.biopax.org/release/biopax-level3.owl#=biopax:&amp;quot; </description>
    </item>
    
    <item>
      <title>Amazon Purchase Network</title>
      <link>https://bmeg.github.io/grip/docs/tutorials/amazon/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bmeg.github.io/grip/docs/tutorials/amazon/</guid>
      <description>Explore Amazon Product Co-Purchasing Network Metadata Download the data
curl -O http://snap.stanford.edu/data/bigdata/amazon/amazon-meta.txt.gz Convert the data into vertices and edges
python $GOPATH/src/github.com/bmeg/grip/example/amazon_convert.py amazon-meta.txt.gz amazon.data Create a graph called &amp;lsquo;amazon&amp;rsquo;
grip create amazon Load the vertices/edges into the graph
grip load amazon --edge amazon.data.edge --vertex amazon.data.vertex Query the graph
command line client
grip query amazon &#39;O.query().V().out()&#39; python client
pip install &amp;quot;git+https://github.com/bmeg/grip.git#egg=gripql&amp;amp;subdirectory=gripql/python/&amp;quot; import gripql conn = gripql.Connection(&amp;#34;http://localhost:8201&amp;#34;) g = conn.graph(&amp;#34;amazon&amp;#34;) # Count the Vertices print g.</description>
    </item>
    
    <item>
      <title>Basic Auth</title>
      <link>https://bmeg.github.io/grip/docs/security/basic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bmeg.github.io/grip/docs/security/basic/</guid>
      <description>Basic Auth By default, an GRIP server allows open access to its API endpoints, but it can be configured to require basic password authentication. To enable this, include users and passwords in your config file:
Server: BasicAuth: - User: testuser Password: abc123 Make sure to properly protect the configuration file so that it&#39;s not readable by everyone:
$ chmod 600 grip.config.yml To use the password, set the GRIP_USER and GRIP_PASSWORD environment variables:</description>
    </item>
    
    <item>
      <title>Database Configuration</title>
      <link>https://bmeg.github.io/grip/docs/databases/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bmeg.github.io/grip/docs/databases/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Developers</title>
      <link>https://bmeg.github.io/grip/docs/developers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bmeg.github.io/grip/docs/developers/</guid>
      <description></description>
    </item>
    
    <item>
      <title>drop</title>
      <link>https://bmeg.github.io/grip/docs/commands/drop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bmeg.github.io/grip/docs/commands/drop/</guid>
      <description>grip drop &amp;lt;graph&amp;gt; Deletes a graph.</description>
    </item>
    
    <item>
      <title>Elasticsearch</title>
      <link>https://bmeg.github.io/grip/docs/databases/elastic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bmeg.github.io/grip/docs/databases/elastic/</guid>
      <description>Elasticsearch GRIP supports storing vertices and edges in Elasticsearch.
Config:
Default: elastic Drivers: elastic: Elasticsearch: URL: &amp;#34;http://localhost:9200&amp;#34; DBName: &amp;#34;gripdb&amp;#34; Username: &amp;#34;&amp;#34; Password: &amp;#34;&amp;#34; </description>
    </item>
    
    <item>
      <title>Embedded KV Store</title>
      <link>https://bmeg.github.io/grip/docs/databases/kvstore/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bmeg.github.io/grip/docs/databases/kvstore/</guid>
      <description>Embedded Key Value Stores GRIP supports storing vertices and edges in a variety of key-value stores including:
 Badger BoltDB LevelDB  Config:
Default: kv Driver: kv: Badger: grip.db </description>
    </item>
    
    <item>
      <title>er</title>
      <link>https://bmeg.github.io/grip/docs/commands/er/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bmeg.github.io/grip/docs/commands/er/</guid>
      <description>grip er The External Resource system allows GRIP to plug into existing data systems and integrate them into queriable graphs. The grip er sub command acts as a client to the external resource plugin proxies, issues command and displays the results. This is often useful for debugging external resources before making them part of an actual graph.
List collections provided by external resource
grip er list Get info about a collection</description>
    </item>
    
    <item>
      <title>External Resource Proxies</title>
      <link>https://bmeg.github.io/grip/docs/gripper/proxy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bmeg.github.io/grip/docs/gripper/proxy/</guid>
      <description>GRIPPER GRIPPER proxy With the external resources normalized to a single data model, the graph model describes how to connect the set of collections into a graph model. Each GRIPPER is required to provide a GRPC interface that allows access to collections stored in the resource.
The required functions include:
rpc GetCollections(Empty) returns (stream Collection); GetCollections returns a list of all of the Collections accessible via this server.
rpc GetCollectionInfo(Collection) returns (CollectionInfo); GetCollectionInfo provides information, such as the list of indexed fields, in a collection.</description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>https://bmeg.github.io/grip/docs/queries/getting_started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bmeg.github.io/grip/docs/queries/getting_started/</guid>
      <description>Getting Started GRIP has an API for making graph queries using structured data. Queries are defined using a series of step operations.
Install the Python Client Available on PyPI.
pip install gripql Or install the latest development version:
pip install &amp;quot;git+https://github.com/bmeg/grip.git#subdirectory=gripql/python&amp;quot; Using the Python Client Let&#39;s go through the features currently supported in the python client.
First, import the client and create a connection to an GRIP server:
import gripql G = gripql.</description>
    </item>
    
    <item>
      <title>Graph Model</title>
      <link>https://bmeg.github.io/grip/docs/gripper/graphmodel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bmeg.github.io/grip/docs/gripper/graphmodel/</guid>
      <description>GRIPPER Graph Model The graph model describes how GRIP will access multiple gripper servers. The graph is described using three sections, sources, vertices and edges.
The sources section describes all of the GRIPPER resources that GRIP will use to build the graph. The vertices section describes how different collections found in these sources will be turned into Vertex found in the graph. Finally, the edges section describes the different kinds of rules that can be used build the edges in the graph.</description>
    </item>
    
    <item>
      <title>Graph Schemas</title>
      <link>https://bmeg.github.io/grip/docs/graphql/graph_schemas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bmeg.github.io/grip/docs/graphql/graph_schemas/</guid>
      <description>Graph Schemas Most GRIP based graphs are not required to have a strict schema. However, GraphQL requires a graph schema as part of it&#39;s API. To utilize the GraphQL endpoint, there must be a Graph Schema provided to be used by the GRIP engine to determine how to render a GraphQL endpoint. Graph schemas are themselves an instance of a graph. As such, they can be traversed like any other graph.</description>
    </item>
    
    <item>
      <title>GraphQL</title>
      <link>https://bmeg.github.io/grip/docs/graphql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bmeg.github.io/grip/docs/graphql/</guid>
      <description></description>
    </item>
    
    <item>
      <title>GraphQL</title>
      <link>https://bmeg.github.io/grip/docs/graphql/graphql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bmeg.github.io/grip/docs/graphql/graphql/</guid>
      <description>GraphQL GraphQL support is considered Alpha. The code is not stable and the API will likely change. GraphQL access is only supported when using the MongoDB driver
GRIP supports GraphQL access of the property graphs. Currently this is read-only access to the graph.
Load built-in example graph Loading the example data and the example schema:
grip load example-graph See the example graph
grip dump example-graph --vertex --edge Sample components of the graph to produce a schema and store to a file</description>
    </item>
    
    <item>
      <title>GRIP Commands</title>
      <link>https://bmeg.github.io/grip/docs/commands/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bmeg.github.io/grip/docs/commands/</guid>
      <description></description>
    </item>
    
    <item>
      <title>GRIP Plugable External Resources</title>
      <link>https://bmeg.github.io/grip/docs/gripper/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bmeg.github.io/grip/docs/gripper/</guid>
      <description></description>
    </item>
    
    <item>
      <title>GRIPPER</title>
      <link>https://bmeg.github.io/grip/docs/databases/gripper/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bmeg.github.io/grip/docs/databases/gripper/</guid>
      <description>GRIPPER GRIP Plugable External Resources are data systems that GRIP can combine together to create graphs.
Example:
Drivers: swapi-driver: Gripper: ConfigFile: ./swapi.yaml Graph: swapi ConfigFile - Path to GRIPPER graph map
Graph - Name of the graph for the mapped external resources.</description>
    </item>
    
    <item>
      <title>Intro</title>
      <link>https://bmeg.github.io/grip/docs/gripper/gripper/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bmeg.github.io/grip/docs/gripper/gripper/</guid>
      <description>GRIPPER GRIP Plugin External Resources GRIP Plugin External Resources (GRIPPERs) are GRIP drivers that take external resources and allow GRIP to access them are part of a unified graph. To integrate new resources into the graph, you first deploy griper proxies that plug into the external resources. They are unique and configured to access specific resources. These provide a view into external resources as a series of document collections. For example, an SQL gripper would plug into an SQL server and provide the tables as a set of collections with each every row a document.</description>
    </item>
    
    <item>
      <title>Jobs API</title>
      <link>https://bmeg.github.io/grip/docs/queries/jobs_api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bmeg.github.io/grip/docs/queries/jobs_api/</guid>
      <description>Jobs API Not all queries return instantaneously, additionally some queries elements are used repeatedly. The query Jobs API provides a mechanism to submit graph traversals that will be evaluated asynchronously and can be retrieved at a later time.
Submitting a job job = G.query().V().hasLabel(&amp;quot;Planet&amp;quot;).out().submit() Getting job status jinfo = G.getJob(job[&amp;quot;id&amp;quot;]) Example job info:
{ &amp;#34;id&amp;#34;: &amp;#34;job-326392951&amp;#34;, &amp;#34;graph&amp;#34;: &amp;#34;test_graph_qd7rs7&amp;#34;, &amp;#34;state&amp;#34;: &amp;#34;COMPLETE&amp;#34;, &amp;#34;count&amp;#34;: &amp;#34;12&amp;#34;, &amp;#34;query&amp;#34;: [{&amp;#34;v&amp;#34;: []}, {&amp;#34;hasLabel&amp;#34;: [&amp;#34;Planet&amp;#34;]}, {&amp;#34;as&amp;#34;: &amp;#34;a&amp;#34;}, {&amp;#34;out&amp;#34;: []}], &amp;#34;timestamp&amp;#34;: &amp;#34;2021-03-30T23:12:01-07:00&amp;#34; } Reading job results for row in G.</description>
    </item>
    
    <item>
      <title>list</title>
      <link>https://bmeg.github.io/grip/docs/commands/list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bmeg.github.io/grip/docs/commands/list/</guid>
      <description>grip list graphs grip list graphs </description>
    </item>
    
    <item>
      <title>MongoDB</title>
      <link>https://bmeg.github.io/grip/docs/databases/mongo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bmeg.github.io/grip/docs/databases/mongo/</guid>
      <description>MongoDB GRIP supports storing vertices and edges in MongoDB.
Config:
Default: mongo Drivers: mongo: MongoDB: URL: &amp;#34;mongodb://localhost:27000&amp;#34; DBName: &amp;#34;gripdb&amp;#34; Username: &amp;#34;&amp;#34; Password: &amp;#34;&amp;#34; UseCorePipeline: False BatchSize: 0 UseCorePipeline - Default is to use Mongo pipeline API to do graph traversals. By enabling UseCorePipeline, GRIP will do the traversal logic itself, only using Mongo for graph storage.
BatchSize - For core engine operations, GRIP dispatches element lookups in batches to minimize query overhead.</description>
    </item>
    
    <item>
      <title>mongoload</title>
      <link>https://bmeg.github.io/grip/docs/commands/mongoload/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bmeg.github.io/grip/docs/commands/mongoload/</guid>
      <description>grip mongoload </description>
    </item>
    
    <item>
      <title>Operations</title>
      <link>https://bmeg.github.io/grip/docs/queries/operations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bmeg.github.io/grip/docs/queries/operations/</guid>
      <description>Start a Traversal .V([ids]) Start query from Vertex
G.query().V() Returns all vertices in graph
G.query().V([&amp;#34;vertex1]&amp;#34;) Returns:
{&amp;#34;gid&amp;#34; : &amp;#34;vertex1&amp;#34;, &amp;#34;label&amp;#34;:&amp;#34;TestVertex&amp;#34;, &amp;#34;data&amp;#34;:{}} .E([ids]) Start query from Edge
G.query().E() Returns all edges in graph
G.query().E([&amp;#34;edge1&amp;#34;]) Returns:
{&amp;#34;gid&amp;#34; : &amp;#34;edge1&amp;#34;, &amp;#34;label&amp;#34;:&amp;#34;TestEdge&amp;#34;, From: &amp;#34;vertex1&amp;#34;, To: &amp;#34;vertex2&amp;#34;, data&amp;#34;:{}} Traverse the graph .in_(), inV() Following incoming edges. Optional argument is the edge label (or list of labels) that should be followed. If no argument is provided, all incoming edges.</description>
    </item>
    
    <item>
      <title>PostgreSQL</title>
      <link>https://bmeg.github.io/grip/docs/databases/psql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bmeg.github.io/grip/docs/databases/psql/</guid>
      <description>PostgreSQL GRIP supports storing vertices and edges in PostgreSQL.
Config:
Default: psql Drivers: psql: PSQL: Host: localhost Port: 15432 User: &amp;#34;&amp;#34; Password: &amp;#34;&amp;#34; DBName: &amp;#34;grip&amp;#34; SSLMode: disable </description>
    </item>
    
    <item>
      <title>query</title>
      <link>https://bmeg.github.io/grip/docs/commands/query/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bmeg.github.io/grip/docs/commands/query/</guid>
      <description>grip query &amp;lt;graph&amp;gt; &amp;lt;query&amp;gt; Run a query on a graph.</description>
    </item>
    
    <item>
      <title>Query a Graph</title>
      <link>https://bmeg.github.io/grip/docs/queries/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bmeg.github.io/grip/docs/queries/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Referencing Fields</title>
      <link>https://bmeg.github.io/grip/docs/queries/jsonpath/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bmeg.github.io/grip/docs/queries/jsonpath/</guid>
      <description>Referencing Vertex/Edge Properties Several operations (where, fields, render, etc.) reference properties of the vertices/edges during the traversal. GRIP uses a variation on JSONPath syntax as described in http://goessner.net/articles/ to reference fields during traversals.
The following query:
O.query().V([&amp;quot;ENSG00000012048&amp;quot;]).as_(&amp;quot;gene&amp;quot;).out(&amp;quot;variant&amp;quot;) Starts at vertex ENSG00000012048 and marks as gene:
{ &amp;quot;gid&amp;quot;: &amp;quot;ENSG00000012048&amp;quot;, &amp;quot;label&amp;quot;: &amp;quot;gene&amp;quot;, &amp;quot;data&amp;quot;: { &amp;quot;symbol&amp;quot;: { &amp;quot;ensembl&amp;quot;: &amp;quot;ENSG00000012048&amp;quot;, &amp;quot;hgnc&amp;quot;: 1100, &amp;quot;entrez&amp;quot;: 672, &amp;quot;hugo&amp;quot;: &amp;quot;BRCA1&amp;quot; } &amp;quot;transcipts&amp;quot;: [&amp;quot;ENST00000471181.7&amp;quot;, &amp;quot;ENST00000357654.8&amp;quot;, &amp;quot;ENST00000493795.5&amp;quot;] } } as &amp;ldquo;gene&amp;rdquo; and traverses the graph to:</description>
    </item>
    
    <item>
      <title>Security</title>
      <link>https://bmeg.github.io/grip/docs/security/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bmeg.github.io/grip/docs/security/</guid>
      <description></description>
    </item>
    
    <item>
      <title>server</title>
      <link>https://bmeg.github.io/grip/docs/commands/server/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bmeg.github.io/grip/docs/commands/server/</guid>
      <description>grip server The server command starts up a graph server and waits for incoming requests.
Default Configuration If invoked with no arguments or config files, GRIP will start up in embedded mode, using a Badger based graph driver.
Networking By default the GRIP server operates on 2 ports, 8201 is the HTTP based interface. Port 8202 is a GRPC based interface. Python, R and Javascript clients are designed to connect to the HTTP interface on 8201.</description>
    </item>
    
    <item>
      <title>SQL</title>
      <link>https://bmeg.github.io/grip/docs/databases/sql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bmeg.github.io/grip/docs/databases/sql/</guid>
      <description>Connect to an existing SQL database Note: This driver is being superseded by the GRIPPER engine
GRIP supports modeling an existing SQL database as a graph. GRIP has been tested against PostgreSQL, but should work with MySQL (4.1+) and MariaDB.
Since GRIP uses Go&#39;s database/sql package, we could (in thoery) support any SQL databases listed on: https://github.com/golang/go/wiki/SQLDrivers. Open an issue if you would like to request support for your favorite SQL database.</description>
    </item>
    
    <item>
      <title>TCGA RNA Expression</title>
      <link>https://bmeg.github.io/grip/docs/tutorials/tcga-rna/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bmeg.github.io/grip/docs/tutorials/tcga-rna/</guid>
      <description>Explore TCGA RNA Expression Data Create the graph
grip create tcga-rna Get the data
curl -O http://download.cbioportal.org/gbm_tcga_pub2013.tar.gz tar xvzf gbm_tcga_pub2013.tar.gz Load clinical data
./example/load_matrix.py tcga-rna gbm_tcga_pub2013/data_clinical.txt --row-label &#39;Donor&#39; Load RNASeq data
./example/load_matrix.py tcga-rna gbm_tcga_pub2013/data_RNA_Seq_v2_expression_median.txt -t --index-col 1 --row-label RNASeq --row-prefix &amp;quot;RNA:&amp;quot; --exclude RNA:Hugo_Symbol Connect RNASeq data to Clinical data
./example/load_matrix.py tcga-rna gbm_tcga_pub2013/data_RNA_Seq_v2_expression_median.txt -t --index-col 1 --no-vertex --edge &#39;RNA:{_gid}&#39; rna Connect Clinical data to subtypes
./example/load_matrix.py tcga-rna gbm_tcga_pub2013/data_clinical.txt --no-vertex -e &amp;quot;{EXPRESSION_SUBTYPE}&amp;quot; subtype --dst-vertex &amp;quot;{EXPRESSION_SUBTYPE}&amp;quot; Subtype Load Hugo Symbol to EntrezID translation table from RNA matrix annotations</description>
    </item>
    
    <item>
      <title>Tutorials</title>
      <link>https://bmeg.github.io/grip/docs/tutorials/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bmeg.github.io/grip/docs/tutorials/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>