<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docs on Arachne</title>
    <link>https://bmeg.github.io/arachne/docs/</link>
    <description>Recent content in Docs on Arachne</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://bmeg.github.io/arachne/docs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Amazon Purchase Network</title>
      <link>https://bmeg.github.io/arachne/docs/tutorials/amazon/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bmeg.github.io/arachne/docs/tutorials/amazon/</guid>
      <description>Explore Amazon Product Co-Purchasing Network Metadata Download the data
curl -O http://snap.stanford.edu/data/bigdata/amazon/amazon-meta.txt.gz  Convert the data into vertices and edges
python $GOPATH/src/github.com/bmeg/arachne/example/amazon_convert.py amazon-meta.txt.gz amazon.data  Create a graph called &amp;lsquo;amazon&amp;rsquo;
arachne create amazon  Load the vertices/edges into the graph
arachne load amazon --edge amazon.data.edge --vertex amazon.data.vertex  Query the graph
command line client
arachne query amazon &#39;O.query().V().out()&#39;  python client
pip install &amp;quot;git+https://github.com/bmeg/arachne.git#egg=aql&amp;amp;subdirectory=aql/python/&amp;quot;  import aql conn = aql.</description>
    </item>
    
    <item>
      <title>Basic Auth</title>
      <link>https://bmeg.github.io/arachne/docs/security/basic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bmeg.github.io/arachne/docs/security/basic/</guid>
      <description>Basic Auth By default, an Arachne server allows open access to its API endpoints, but it can be configured to require basic password authentication. To enable this, include users and passwords in your config file:
Server: BasicAuth: - User: testuser Password: abc123  Make sure to properly protect the configuration file so that it&amp;rsquo;s not readable by everyone:
$ chmod 600 arachne.config.yml  To use the password, set the ARACHNE_USER and ARACHNE_PASSWORD environment variables:</description>
    </item>
    
    <item>
      <title>Developers</title>
      <link>https://bmeg.github.io/arachne/docs/developers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bmeg.github.io/arachne/docs/developers/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Elasticsearch</title>
      <link>https://bmeg.github.io/arachne/docs/databases/elastic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bmeg.github.io/arachne/docs/databases/elastic/</guid>
      <description> Elasticsearch Arachne supports storing vertices and edges in Elasticsearch.
Config:
Database: elasticsearch Elasticsearch: URL: &amp;quot;http://localhost:9200&amp;quot; DBName: &amp;quot;arachnedb&amp;quot; Username: &amp;quot;&amp;quot; Password: &amp;quot;&amp;quot;  </description>
    </item>
    
    <item>
      <title>Embedded KV Store</title>
      <link>https://bmeg.github.io/arachne/docs/databases/kvstore/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bmeg.github.io/arachne/docs/databases/kvstore/</guid>
      <description> Embedded Key Value Stores Arachne supports storing vertices and edges in a variety of key-value stores including:
 Badger BoltDB LevelDB RocksDB  Config:
# pick one of: badger, bolt, level, rocks Database: badger KVStorePath: arachne.db  </description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>https://bmeg.github.io/arachne/docs/queries/getting_started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bmeg.github.io/arachne/docs/queries/getting_started/</guid>
      <description>Getting Started Arachne has an API for making graph queries using structured data. Queries are defined using a series of step operations).
Install the Python Client pip install &amp;quot;git+https://github.com/bmeg/arachne.git#subdirectory=aql/python&amp;quot;  Let&amp;rsquo;s go through the features currently supported in the python client.
First, import the client and create a connection to an Arachne server:
import aql conn = aql.Connection(&#39;http://bmeg.io&#39;) O = conn.graph(&amp;quot;bmeg&amp;quot;)  Now that we have a connection to a graph instance, we can use this to make all of our queries.</description>
    </item>
    
    <item>
      <title>GraphQL</title>
      <link>https://bmeg.github.io/arachne/docs/queries/graphql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bmeg.github.io/arachne/docs/queries/graphql/</guid>
      <description>GraphQL Arachne supports GraphQL access of the property graphs. Currently this is read-only access to the graph. GraphQL graphs have a defined schema with typed fields and connections. This schema must be defined before the graphql endpoint can access the graph.
All of the different label types in the graph are represented with a vertex of label &amp;lsquo;Object&amp;rsquo;. The vertex gid in the schema graph represents the label type in the actual graph.</description>
    </item>
    
    <item>
      <title>MongoDB</title>
      <link>https://bmeg.github.io/arachne/docs/databases/mongo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bmeg.github.io/arachne/docs/databases/mongo/</guid>
      <description> MongoDB Arachne supports storing vertices and edges in MongoDB.
Config:
Database: mongodb MongoDb: URL: &amp;quot;localhost:9200&amp;quot; DBName: &amp;quot;arachnedb&amp;quot; Username: &amp;quot;&amp;quot; Password: &amp;quot;&amp;quot;  </description>
    </item>
    
    <item>
      <title>Operations</title>
      <link>https://bmeg.github.io/arachne/docs/queries/operations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bmeg.github.io/arachne/docs/queries/operations/</guid>
      <description>Start a Traversal .V([ids]) Start query from Vertex
O.query().V()  Returns all vertices in graph
O.query().V([&amp;quot;vertex1]&amp;quot;)  Returns:
{&amp;quot;gid&amp;quot; : &amp;quot;vertex1&amp;quot;, &amp;quot;label&amp;quot;:&amp;quot;TestVertex&amp;quot;, &amp;quot;data&amp;quot;:{}}  .E([ids]) Start query from Edge
O.query().E()  Returns all edges in graph
O.query().E([&amp;quot;edge1&amp;quot;])  Returns:
{&amp;quot;gid&amp;quot; : &amp;quot;edge1&amp;quot;, &amp;quot;label&amp;quot;:&amp;quot;TestEdge&amp;quot;, From: &amp;quot;vertex1&amp;quot;, To: &amp;quot;vertex2&amp;quot;, data&amp;quot;:{}}  Traverse the graph .in_() Following incoming edges. Optional argument is the edge label (or list of labels) that should be followed.</description>
    </item>
    
    <item>
      <title>Query a Graph</title>
      <link>https://bmeg.github.io/arachne/docs/queries/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bmeg.github.io/arachne/docs/queries/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Referencing Fields</title>
      <link>https://bmeg.github.io/arachne/docs/queries/jsonpath/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bmeg.github.io/arachne/docs/queries/jsonpath/</guid>
      <description>Several operations (where, fields, render, etc.) reference properties of the vertices/edges during the traversal. Arachne uses a variation on JSONPath syntax as described in http://goessner.net/articles/ to reference fields during traversals.
The following query:
O.query().V([&amp;quot;ENSG00000012048&amp;quot;]).mark(&amp;quot;gene&amp;quot;).out(&amp;quot;variant&amp;quot;)  Starts at vertex ENSG00000012048 and marks as gene:
{ &amp;quot;gid&amp;quot;: &amp;quot;ENSG00000012048&amp;quot;, &amp;quot;label&amp;quot;: &amp;quot;gene&amp;quot;, &amp;quot;data&amp;quot;: { &amp;quot;symbol&amp;quot;: { &amp;quot;ensembl&amp;quot;: &amp;quot;ENSG00000012048&amp;quot;, &amp;quot;hgnc&amp;quot;: 1100, &amp;quot;entrez&amp;quot;: 672, &amp;quot;hugo&amp;quot;: &amp;quot;BRCA1&amp;quot; } &amp;quot;transcipts&amp;quot;: [&amp;quot;ENST00000471181.7&amp;quot;, &amp;quot;ENST00000357654.8&amp;quot;, &amp;quot;ENST00000493795.5&amp;quot;] } }  as &amp;ldquo;gene&amp;rdquo; and traverses the graph to:</description>
    </item>
    
    <item>
      <title>SQL</title>
      <link>https://bmeg.github.io/arachne/docs/databases/sql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bmeg.github.io/arachne/docs/databases/sql/</guid>
      <description>SQL Arachne supports modeling an existing SQL database as a graph. Arachne has been tested against PostgreSQL, but should work with MySQL (4.1+) and MariaDB.
Since Arachne uses Go&amp;rsquo;s database/sql package, we could (in thoery) support any SQL databases listed on: https://github.com/golang/go/wiki/SQLDrivers. Open an issue if you would like to request support for your favorite SQL database.
Configuration Notes  DataSourceName is a driver-specific data source name, usually consisting of at least a database name and connection information.</description>
    </item>
    
    <item>
      <title>Security</title>
      <link>https://bmeg.github.io/arachne/docs/security/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bmeg.github.io/arachne/docs/security/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Setup your Database</title>
      <link>https://bmeg.github.io/arachne/docs/databases/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bmeg.github.io/arachne/docs/databases/</guid>
      <description></description>
    </item>
    
    <item>
      <title>TCGA RNA Expression</title>
      <link>https://bmeg.github.io/arachne/docs/tutorials/tcga-rna/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bmeg.github.io/arachne/docs/tutorials/tcga-rna/</guid>
      <description>Explore TCGA RNA Expression Data Create the graph
arachne create tcga-rna  Load pathway information
curl -O http://www.pathwaycommons.org/archives/PC2/v9/PathwayCommons9.All.hgnc.sif.gz gunzip PathwayCommons9.All.hgnc.sif.gz python $GOPATH/src/github.com/bmeg/arachne/example/load_sif.py --db tcga-rna PathwayCommons9.All.hgnc.sif  Load expression data
curl -O https://tcga.xenahubs.net/download/TCGA.BRCA.sampleMap/HiSeqV2.gz gunzip HiSeqV2.gz python $GOPATH/src/github.com/bmeg/arachne/example/load_matrix.py --db tcga-rna HiSeqV2  Load clinical information
curl -O https://tcga.xenahubs.net/download/TCGA.BRCA.sampleMap/BRCA_clinicalMatrix.gz gunzip BRCA_clinicalMatrix.gz python $GOPATH/src/github.com/bmeg/arachne/example/load_property_matrix.py --db tcga-rna BRCA_clinicalMatrix  Query the graph
pip install &amp;quot;git+https://github.com/bmeg/arachne.git#egg=aql&amp;amp;subdirectory=aql/python/&amp;quot;  import aql conn = aql.Connection(&amp;quot;http://localhost:8201&amp;quot;) O = conn.graph(&amp;quot;tcga-rna&amp;quot;) # Print out expression data of all Stage IIA samples for row in O.</description>
    </item>
    
    <item>
      <title>Tutorials</title>
      <link>https://bmeg.github.io/arachne/docs/tutorials/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bmeg.github.io/arachne/docs/tutorials/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>