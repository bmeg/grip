<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GRIP</title>
    <link>https://docs.bmeg.io/grip/</link>
    <description>Recent content on GRIP</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://docs.bmeg.io/grip/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Amazon Purchase Network</title>
      <link>https://docs.bmeg.io/grip/docs/tutorials/amazon/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.bmeg.io/grip/docs/tutorials/amazon/</guid>
      <description>Explore Amazon Product Co-Purchasing Network Metadata Download the data
curl -O http://snap.stanford.edu/data/bigdata/amazon/amazon-meta.txt.gz  Convert the data into vertices and edges
python $GOPATH/src/github.com/bmeg/grip/example/amazon_convert.py amazon-meta.txt.gz amazon.data  Create a graph called &amp;lsquo;amazon&amp;rsquo;
grip create amazon  Load the vertices/edges into the graph
grip load amazon --edge amazon.data.edge --vertex amazon.data.vertex  Query the graph
command line client
grip query amazon &#39;O.query().V().out()&#39;  python client
pip install &amp;quot;git+https://github.com/bmeg/grip.git#egg=gripql&amp;amp;subdirectory=gripql/python/&amp;quot;  import gripql conn = gripql.</description>
    </item>
    
    <item>
      <title>Basic Auth</title>
      <link>https://docs.bmeg.io/grip/docs/security/basic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.bmeg.io/grip/docs/security/basic/</guid>
      <description>Basic Auth By default, an GRIP server allows open access to its API endpoints, but it can be configured to require basic password authentication. To enable this, include users and passwords in your config file:
Server: BasicAuth: - User: testuser Password: abc123  Make sure to properly protect the configuration file so that it&amp;rsquo;s not readable by everyone:
$ chmod 600 grip.config.yml  To use the password, set the GRIP_USER and GRIP_PASSWORD environment variables:</description>
    </item>
    
    <item>
      <title>Developers</title>
      <link>https://docs.bmeg.io/grip/docs/developers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.bmeg.io/grip/docs/developers/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Download</title>
      <link>https://docs.bmeg.io/grip/download/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.bmeg.io/grip/download/</guid>
      <description> Download 0.3.1  Linux MacOS Windows is not supported sorry!  Release History See the Releases page for release history.
Build From Source $ mkdir -p $GOPATH/src/github.com/bmeg $ cd $GOPATH/src/github.com/bmeg $ git clone https://github.com/bmeg/grip.git $ cd grip $ make  </description>
    </item>
    
    <item>
      <title>Elasticsearch</title>
      <link>https://docs.bmeg.io/grip/docs/databases/elastic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.bmeg.io/grip/docs/databases/elastic/</guid>
      <description> Elasticsearch GRIP supports storing vertices and edges in Elasticsearch.
Config:
Database: elasticsearch Elasticsearch: URL: &amp;quot;http://localhost:9200&amp;quot; DBName: &amp;quot;gripdb&amp;quot; Username: &amp;quot;&amp;quot; Password: &amp;quot;&amp;quot;  </description>
    </item>
    
    <item>
      <title>Embedded KV Store</title>
      <link>https://docs.bmeg.io/grip/docs/databases/kvstore/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.bmeg.io/grip/docs/databases/kvstore/</guid>
      <description> Embedded Key Value Stores GRIP supports storing vertices and edges in a variety of key-value stores including:
 Badger BoltDB LevelDB RocksDB  Config:
# pick one of: badger, bolt, level, rocks Database: badger KVStorePath: grip.db  </description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>https://docs.bmeg.io/grip/docs/queries/getting_started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.bmeg.io/grip/docs/queries/getting_started/</guid>
      <description>Getting Started GRIP has an API for making graph queries using structured data. Queries are defined using a series of step operations).
Install the Python Client pip install &amp;quot;git+https://github.com/bmeg/grip.git#subdirectory=gripql/python&amp;quot;  Let&amp;rsquo;s go through the features currently supported in the python client.
First, import the client and create a connection to an GRIP server:
import gripql conn = gripql.Connection(&#39;http://bmeg.io&#39;) O = conn.graph(&amp;quot;bmeg&amp;quot;)  Now that we have a connection to a graph instance, we can use this to make all of our queries.</description>
    </item>
    
    <item>
      <title>GraphQL</title>
      <link>https://docs.bmeg.io/grip/docs/queries/graphql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.bmeg.io/grip/docs/queries/graphql/</guid>
      <description>GraphQL GRIP supports GraphQL access of the property graphs. Currently this is read-only access to the graph.
GraphQL access is only supported when using the MongoDB driver
Load built-in example graph Loading the example data and the example schema:
grip load example-graph  See the example graph
grip dump example-graph --vertex --edge  See the example graph schema
grip schema example-graph  Example queries Get Types:
curl -X POST -H &amp;quot;Content-Type:application/graphql&amp;quot; -d &#39;{__schema{types{name}}}&#39; http://localhost:8201/graphql/example  Get Info about Human object</description>
    </item>
    
    <item>
      <title>MongoDB</title>
      <link>https://docs.bmeg.io/grip/docs/databases/mongo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.bmeg.io/grip/docs/databases/mongo/</guid>
      <description> MongoDB GRIP supports storing vertices and edges in MongoDB.
Config:
Database: mongodb MongoDB: URL: &amp;quot;localhost:27017&amp;quot; DBName: &amp;quot;gripdb&amp;quot; Username: &amp;quot;&amp;quot; Password: &amp;quot;&amp;quot;  </description>
    </item>
    
    <item>
      <title>Operations</title>
      <link>https://docs.bmeg.io/grip/docs/queries/operations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.bmeg.io/grip/docs/queries/operations/</guid>
      <description>Start a Traversal .V([ids]) Start query from Vertex
O.query().V()  Returns all vertices in graph
O.query().V([&amp;quot;vertex1]&amp;quot;)  Returns:
{&amp;quot;gid&amp;quot; : &amp;quot;vertex1&amp;quot;, &amp;quot;label&amp;quot;:&amp;quot;TestVertex&amp;quot;, &amp;quot;data&amp;quot;:{}}  .E([ids]) Start query from Edge
O.query().E()  Returns all edges in graph
O.query().E([&amp;quot;edge1&amp;quot;])  Returns:
{&amp;quot;gid&amp;quot; : &amp;quot;edge1&amp;quot;, &amp;quot;label&amp;quot;:&amp;quot;TestEdge&amp;quot;, From: &amp;quot;vertex1&amp;quot;, To: &amp;quot;vertex2&amp;quot;, data&amp;quot;:{}}  Traverse the graph .in_() Following incoming edges. Optional argument is the edge label (or list of labels) that should be followed.</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>https://docs.bmeg.io/grip/docs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.bmeg.io/grip/docs/</guid>
      <description>Overview GRIP stands for GRaph Integration Platform. It provides a graph interface on top of a variety of existing database technologies including: MongoDB, Elasticsearch, PostgreSQL, MySQL, MariaDB, Badger, and LevelDB.
Properties of an GRIP graph:
 Both vertices and edges in a graph can have any number of properties associated with them. There are many types of vertices and edges in a graph. Thus two vertices may have myriad types of edges connecting them reflecting myriad types of relationships.</description>
    </item>
    
    <item>
      <title>Query a Graph</title>
      <link>https://docs.bmeg.io/grip/docs/queries/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.bmeg.io/grip/docs/queries/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Referencing Fields</title>
      <link>https://docs.bmeg.io/grip/docs/queries/jsonpath/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.bmeg.io/grip/docs/queries/jsonpath/</guid>
      <description>Several operations (where, fields, render, etc.) reference properties of the vertices/edges during the traversal. GRIP uses a variation on JSONPath syntax as described in http://goessner.net/articles/ to reference fields during traversals.
The following query:
O.query().V([&amp;quot;ENSG00000012048&amp;quot;]).mark(&amp;quot;gene&amp;quot;).out(&amp;quot;variant&amp;quot;)  Starts at vertex ENSG00000012048 and marks as gene:
{ &amp;quot;gid&amp;quot;: &amp;quot;ENSG00000012048&amp;quot;, &amp;quot;label&amp;quot;: &amp;quot;gene&amp;quot;, &amp;quot;data&amp;quot;: { &amp;quot;symbol&amp;quot;: { &amp;quot;ensembl&amp;quot;: &amp;quot;ENSG00000012048&amp;quot;, &amp;quot;hgnc&amp;quot;: 1100, &amp;quot;entrez&amp;quot;: 672, &amp;quot;hugo&amp;quot;: &amp;quot;BRCA1&amp;quot; } &amp;quot;transcipts&amp;quot;: [&amp;quot;ENST00000471181.7&amp;quot;, &amp;quot;ENST00000357654.8&amp;quot;, &amp;quot;ENST00000493795.5&amp;quot;] } }  as &amp;ldquo;gene&amp;rdquo; and traverses the graph to:</description>
    </item>
    
    <item>
      <title>SQL</title>
      <link>https://docs.bmeg.io/grip/docs/databases/sql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.bmeg.io/grip/docs/databases/sql/</guid>
      <description>SQL GRIP supports modeling an existing SQL database as a graph. GRIP has been tested against PostgreSQL, but should work with MySQL (4.1+) and MariaDB.
Since GRIP uses Go&amp;rsquo;s database/sql package, we could (in thoery) support any SQL databases listed on: https://github.com/golang/go/wiki/SQLDrivers. Open an issue if you would like to request support for your favorite SQL database.
Configuration Notes  DataSourceName is a driver-specific data source name, usually consisting of at least a database name and connection information.</description>
    </item>
    
    <item>
      <title>Security</title>
      <link>https://docs.bmeg.io/grip/docs/security/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.bmeg.io/grip/docs/security/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Setup your Database</title>
      <link>https://docs.bmeg.io/grip/docs/databases/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.bmeg.io/grip/docs/databases/</guid>
      <description></description>
    </item>
    
    <item>
      <title>TCGA RNA Expression</title>
      <link>https://docs.bmeg.io/grip/docs/tutorials/tcga-rna/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.bmeg.io/grip/docs/tutorials/tcga-rna/</guid>
      <description>Explore TCGA RNA Expression Data Create the graph
grip create tcga-rna  Get the data
curl -O http://download.cbioportal.org/gbm_tcga_pub2013.tar.gz tar xvzf gbm_tcga_pub2013.tar.gz  Load clinical data
./example/load_matrix.py tcga-rna gbm_tcga_pub2013/data_clinical.txt --row-label &#39;Donor&#39;  Load RNASeq data
./example/load_matrix.py tcga-rna gbm_tcga_pub2013/data_RNA_Seq_v2_expression_median.txt -t --index-col 1 --row-label RNASeq --row-prefix &amp;quot;RNA:&amp;quot; --exclude RNA:Hugo_Symbol  Connect RNASeq data to Clinical data
./example/load_matrix.py tcga-rna gbm_tcga_pub2013/data_RNA_Seq_v2_expression_median.txt -t --index-col 1 --no-vertex --edge &#39;RNA:{_gid}&#39; rna  Connect Clinical data to subtypes</description>
    </item>
    
    <item>
      <title>Tutorials</title>
      <link>https://docs.bmeg.io/grip/docs/tutorials/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.bmeg.io/grip/docs/tutorials/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>