// Code generated by "enumer -type=DataType ./gdbi/interface.go"; DO NOT EDIT

package gdbi

import (
	"fmt"
)

const _DataTypeName = "NoDataVertexDataEdgeDataCountDataGroupCountDataValueDataRowData"

var _DataTypeIndex = [...]uint8{0, 6, 16, 24, 33, 47, 56, 63}

func (i DataType) String() string {
	if i >= DataType(len(_DataTypeIndex)-1) {
		return fmt.Sprintf("DataType(%d)", i)
	}
	return _DataTypeName[_DataTypeIndex[i]:_DataTypeIndex[i+1]]
}

var _DataTypeValues = []DataType{0, 1, 2, 3, 4, 5, 6}

var _DataTypeNameToValueMap = map[string]DataType{
	_DataTypeName[0:6]:   0,
	_DataTypeName[6:16]:  1,
	_DataTypeName[16:24]: 2,
	_DataTypeName[24:33]: 3,
	_DataTypeName[33:47]: 4,
	_DataTypeName[47:56]: 5,
	_DataTypeName[56:63]: 6,
}

// DataTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func DataTypeString(s string) (DataType, error) {
	if val, ok := _DataTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to DataType values", s)
}

// DataTypeValues returns all values of the enum
func DataTypeValues() []DataType {
	return _DataTypeValues
}

// IsADataType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i DataType) IsADataType() bool {
	for _, v := range _DataTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
