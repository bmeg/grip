
// Code generated by protoc-gen-grpc-rest-direct. DO NOT EDIT.
package gripql

import (
	"io"
	"golang.org/x/net/context"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)


// QueryDirectClient is a shim to connect Query client directly server
type QueryDirectClient struct {
	server QueryServer
}
 // NewQueryDirectClient creates new QueryDirectClient
func NewQueryDirectClient(server QueryServer) *QueryDirectClient {
	return &QueryDirectClient{server}
}

//Traversal streaming output shim
type directQueryTraversal struct {
  ctx context.Context
  c   chan *QueryResult
  e   error
}

func (dsm *directQueryTraversal) Recv() (*QueryResult, error) {
	value, ok := <-dsm.c
	if !ok {
    if dsm.e != nil {
      return nil, dsm.e
    }
		return nil, io.EOF
	}
	return value, dsm.e
}
func (dsm *directQueryTraversal) Send(a *QueryResult) error {
	dsm.c <- a
	return nil
}
func (dsm *directQueryTraversal) close() {
	close(dsm.c)
}
func (dsm *directQueryTraversal) Context() context.Context {
	return dsm.ctx
}
func (dsm *directQueryTraversal) CloseSend() error             { return nil }
func (dsm *directQueryTraversal) SetTrailer(metadata.MD)       {}
func (dsm *directQueryTraversal) SetHeader(metadata.MD) error  { return nil }
func (dsm *directQueryTraversal) SendHeader(metadata.MD) error { return nil }
func (dsm *directQueryTraversal) SendMsg(m interface{}) error  { return nil }
func (dsm *directQueryTraversal) RecvMsg(m interface{}) error  { return nil }
func (dsm *directQueryTraversal) Header() (metadata.MD, error) { return nil, nil }
func (dsm *directQueryTraversal) Trailer() metadata.MD         { return nil }
func (dir *QueryDirectClient) Traversal(ctx context.Context, in *GraphQuery, opts ...grpc.CallOption) (Query_TraversalClient, error) {
	w := &directQueryTraversal{ctx, make(chan *QueryResult, 100), nil}
	go func() {
    defer w.close()
		w.e = dir.server.Traversal(in, w)
	}()
	return w, nil
}


//GetVertex shim
func (shim *QueryDirectClient) GetVertex(ctx context.Context, in *ElementID, opts ...grpc.CallOption) (*Vertex, error) {
	return shim.server.GetVertex(ctx, in)
}

//GetEdge shim
func (shim *QueryDirectClient) GetEdge(ctx context.Context, in *ElementID, opts ...grpc.CallOption) (*Edge, error) {
	return shim.server.GetEdge(ctx, in)
}

//GetTimestamp shim
func (shim *QueryDirectClient) GetTimestamp(ctx context.Context, in *GraphID, opts ...grpc.CallOption) (*Timestamp, error) {
	return shim.server.GetTimestamp(ctx, in)
}

//GetSchema shim
func (shim *QueryDirectClient) GetSchema(ctx context.Context, in *GraphID, opts ...grpc.CallOption) (*Graph, error) {
	return shim.server.GetSchema(ctx, in)
}

//ListGraphs shim
func (shim *QueryDirectClient) ListGraphs(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListGraphsResponse, error) {
	return shim.server.ListGraphs(ctx, in)
}

//ListIndices shim
func (shim *QueryDirectClient) ListIndices(ctx context.Context, in *GraphID, opts ...grpc.CallOption) (*ListIndicesResponse, error) {
	return shim.server.ListIndices(ctx, in)
}

//ListLabels shim
func (shim *QueryDirectClient) ListLabels(ctx context.Context, in *GraphID, opts ...grpc.CallOption) (*ListLabelsResponse, error) {
	return shim.server.ListLabels(ctx, in)
}

//ListTables streaming output shim
type directQueryListTables struct {
  ctx context.Context
  c   chan *TableInfo
  e   error
}

func (dsm *directQueryListTables) Recv() (*TableInfo, error) {
	value, ok := <-dsm.c
	if !ok {
    if dsm.e != nil {
      return nil, dsm.e
    }
		return nil, io.EOF
	}
	return value, dsm.e
}
func (dsm *directQueryListTables) Send(a *TableInfo) error {
	dsm.c <- a
	return nil
}
func (dsm *directQueryListTables) close() {
	close(dsm.c)
}
func (dsm *directQueryListTables) Context() context.Context {
	return dsm.ctx
}
func (dsm *directQueryListTables) CloseSend() error             { return nil }
func (dsm *directQueryListTables) SetTrailer(metadata.MD)       {}
func (dsm *directQueryListTables) SetHeader(metadata.MD) error  { return nil }
func (dsm *directQueryListTables) SendHeader(metadata.MD) error { return nil }
func (dsm *directQueryListTables) SendMsg(m interface{}) error  { return nil }
func (dsm *directQueryListTables) RecvMsg(m interface{}) error  { return nil }
func (dsm *directQueryListTables) Header() (metadata.MD, error) { return nil, nil }
func (dsm *directQueryListTables) Trailer() metadata.MD         { return nil }
func (dir *QueryDirectClient) ListTables(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Query_ListTablesClient, error) {
	w := &directQueryListTables{ctx, make(chan *TableInfo, 100), nil}
	go func() {
    defer w.close()
		w.e = dir.server.ListTables(in, w)
	}()
	return w, nil
}


// JobDirectClient is a shim to connect Job client directly server
type JobDirectClient struct {
	server JobServer
}
 // NewJobDirectClient creates new JobDirectClient
func NewJobDirectClient(server JobServer) *JobDirectClient {
	return &JobDirectClient{server}
}

//Job shim
func (shim *JobDirectClient) Job(ctx context.Context, in *GraphQuery, opts ...grpc.CallOption) (*QueryJob, error) {
	return shim.server.Job(ctx, in)
}

//ListJobs streaming output shim
type directJobListJobs struct {
  ctx context.Context
  c   chan *QueryJob
  e   error
}

func (dsm *directJobListJobs) Recv() (*QueryJob, error) {
	value, ok := <-dsm.c
	if !ok {
    if dsm.e != nil {
      return nil, dsm.e
    }
		return nil, io.EOF
	}
	return value, dsm.e
}
func (dsm *directJobListJobs) Send(a *QueryJob) error {
	dsm.c <- a
	return nil
}
func (dsm *directJobListJobs) close() {
	close(dsm.c)
}
func (dsm *directJobListJobs) Context() context.Context {
	return dsm.ctx
}
func (dsm *directJobListJobs) CloseSend() error             { return nil }
func (dsm *directJobListJobs) SetTrailer(metadata.MD)       {}
func (dsm *directJobListJobs) SetHeader(metadata.MD) error  { return nil }
func (dsm *directJobListJobs) SendHeader(metadata.MD) error { return nil }
func (dsm *directJobListJobs) SendMsg(m interface{}) error  { return nil }
func (dsm *directJobListJobs) RecvMsg(m interface{}) error  { return nil }
func (dsm *directJobListJobs) Header() (metadata.MD, error) { return nil, nil }
func (dsm *directJobListJobs) Trailer() metadata.MD         { return nil }
func (dir *JobDirectClient) ListJobs(ctx context.Context, in *Graph, opts ...grpc.CallOption) (Job_ListJobsClient, error) {
	w := &directJobListJobs{ctx, make(chan *QueryJob, 100), nil}
	go func() {
    defer w.close()
		w.e = dir.server.ListJobs(in, w)
	}()
	return w, nil
}


//SearchJobs streaming output shim
type directJobSearchJobs struct {
  ctx context.Context
  c   chan *JobStatus
  e   error
}

func (dsm *directJobSearchJobs) Recv() (*JobStatus, error) {
	value, ok := <-dsm.c
	if !ok {
    if dsm.e != nil {
      return nil, dsm.e
    }
		return nil, io.EOF
	}
	return value, dsm.e
}
func (dsm *directJobSearchJobs) Send(a *JobStatus) error {
	dsm.c <- a
	return nil
}
func (dsm *directJobSearchJobs) close() {
	close(dsm.c)
}
func (dsm *directJobSearchJobs) Context() context.Context {
	return dsm.ctx
}
func (dsm *directJobSearchJobs) CloseSend() error             { return nil }
func (dsm *directJobSearchJobs) SetTrailer(metadata.MD)       {}
func (dsm *directJobSearchJobs) SetHeader(metadata.MD) error  { return nil }
func (dsm *directJobSearchJobs) SendHeader(metadata.MD) error { return nil }
func (dsm *directJobSearchJobs) SendMsg(m interface{}) error  { return nil }
func (dsm *directJobSearchJobs) RecvMsg(m interface{}) error  { return nil }
func (dsm *directJobSearchJobs) Header() (metadata.MD, error) { return nil, nil }
func (dsm *directJobSearchJobs) Trailer() metadata.MD         { return nil }
func (dir *JobDirectClient) SearchJobs(ctx context.Context, in *GraphQuery, opts ...grpc.CallOption) (Job_SearchJobsClient, error) {
	w := &directJobSearchJobs{ctx, make(chan *JobStatus, 100), nil}
	go func() {
    defer w.close()
		w.e = dir.server.SearchJobs(in, w)
	}()
	return w, nil
}


//DeleteJob shim
func (shim *JobDirectClient) DeleteJob(ctx context.Context, in *QueryJob, opts ...grpc.CallOption) (*JobStatus, error) {
	return shim.server.DeleteJob(ctx, in)
}

//GetJob shim
func (shim *JobDirectClient) GetJob(ctx context.Context, in *QueryJob, opts ...grpc.CallOption) (*JobStatus, error) {
	return shim.server.GetJob(ctx, in)
}

//ViewJob streaming output shim
type directJobViewJob struct {
  ctx context.Context
  c   chan *QueryResult
  e   error
}

func (dsm *directJobViewJob) Recv() (*QueryResult, error) {
	value, ok := <-dsm.c
	if !ok {
    if dsm.e != nil {
      return nil, dsm.e
    }
		return nil, io.EOF
	}
	return value, dsm.e
}
func (dsm *directJobViewJob) Send(a *QueryResult) error {
	dsm.c <- a
	return nil
}
func (dsm *directJobViewJob) close() {
	close(dsm.c)
}
func (dsm *directJobViewJob) Context() context.Context {
	return dsm.ctx
}
func (dsm *directJobViewJob) CloseSend() error             { return nil }
func (dsm *directJobViewJob) SetTrailer(metadata.MD)       {}
func (dsm *directJobViewJob) SetHeader(metadata.MD) error  { return nil }
func (dsm *directJobViewJob) SendHeader(metadata.MD) error { return nil }
func (dsm *directJobViewJob) SendMsg(m interface{}) error  { return nil }
func (dsm *directJobViewJob) RecvMsg(m interface{}) error  { return nil }
func (dsm *directJobViewJob) Header() (metadata.MD, error) { return nil, nil }
func (dsm *directJobViewJob) Trailer() metadata.MD         { return nil }
func (dir *JobDirectClient) ViewJob(ctx context.Context, in *QueryJob, opts ...grpc.CallOption) (Job_ViewJobClient, error) {
	w := &directJobViewJob{ctx, make(chan *QueryResult, 100), nil}
	go func() {
    defer w.close()
		w.e = dir.server.ViewJob(in, w)
	}()
	return w, nil
}


//ResumeJob streaming output shim
type directJobResumeJob struct {
  ctx context.Context
  c   chan *QueryResult
  e   error
}

func (dsm *directJobResumeJob) Recv() (*QueryResult, error) {
	value, ok := <-dsm.c
	if !ok {
    if dsm.e != nil {
      return nil, dsm.e
    }
		return nil, io.EOF
	}
	return value, dsm.e
}
func (dsm *directJobResumeJob) Send(a *QueryResult) error {
	dsm.c <- a
	return nil
}
func (dsm *directJobResumeJob) close() {
	close(dsm.c)
}
func (dsm *directJobResumeJob) Context() context.Context {
	return dsm.ctx
}
func (dsm *directJobResumeJob) CloseSend() error             { return nil }
func (dsm *directJobResumeJob) SetTrailer(metadata.MD)       {}
func (dsm *directJobResumeJob) SetHeader(metadata.MD) error  { return nil }
func (dsm *directJobResumeJob) SendHeader(metadata.MD) error { return nil }
func (dsm *directJobResumeJob) SendMsg(m interface{}) error  { return nil }
func (dsm *directJobResumeJob) RecvMsg(m interface{}) error  { return nil }
func (dsm *directJobResumeJob) Header() (metadata.MD, error) { return nil, nil }
func (dsm *directJobResumeJob) Trailer() metadata.MD         { return nil }
func (dir *JobDirectClient) ResumeJob(ctx context.Context, in *ExtendQuery, opts ...grpc.CallOption) (Job_ResumeJobClient, error) {
	w := &directJobResumeJob{ctx, make(chan *QueryResult, 100), nil}
	go func() {
    defer w.close()
		w.e = dir.server.ResumeJob(in, w)
	}()
	return w, nil
}


// EditDirectClient is a shim to connect Edit client directly server
type EditDirectClient struct {
	server EditServer
}
 // NewEditDirectClient creates new EditDirectClient
func NewEditDirectClient(server EditServer) *EditDirectClient {
	return &EditDirectClient{server}
}

//AddVertex shim
func (shim *EditDirectClient) AddVertex(ctx context.Context, in *GraphElement, opts ...grpc.CallOption) (*EditResult, error) {
	return shim.server.AddVertex(ctx, in)
}

//AddEdge shim
func (shim *EditDirectClient) AddEdge(ctx context.Context, in *GraphElement, opts ...grpc.CallOption) (*EditResult, error) {
	return shim.server.AddEdge(ctx, in)
}

//BulkAdd streaming input shim
type directEditBulkAdd struct {
  ctx context.Context
  c   chan *GraphElement
  out chan *BulkEditResult
}

func (dsm *directEditBulkAdd) Recv() (*GraphElement, error) {
	value, ok := <-dsm.c
	if !ok {
		return nil, io.EOF
	}
	return value, nil
}

func (dsm *directEditBulkAdd) Send(a *GraphElement) error {
	dsm.c <- a
	return nil
}

func (dsm *directEditBulkAdd) Context() context.Context {
	return dsm.ctx
}

func (dsm *directEditBulkAdd) SendAndClose(o *BulkEditResult) error {
  dsm.out <- o
  close(dsm.out)
  return nil
}

func (dsm *directEditBulkAdd) CloseAndRecv() (*BulkEditResult, error) {
  close(dsm.c)
  out := <- dsm.out
  return out, nil
}

func (dsm *directEditBulkAdd) CloseSend() error             { return nil }
func (dsm *directEditBulkAdd) SetTrailer(metadata.MD)       {}
func (dsm *directEditBulkAdd) SetHeader(metadata.MD) error  { return nil }
func (dsm *directEditBulkAdd) SendHeader(metadata.MD) error { return nil }
func (dsm *directEditBulkAdd) SendMsg(m interface{}) error  { return nil }
func (dsm *directEditBulkAdd) RecvMsg(m interface{}) error  { return nil }
func (dsm *directEditBulkAdd) Header() (metadata.MD, error) { return nil, nil }
func (dsm *directEditBulkAdd) Trailer() metadata.MD         { return nil }

func (dir *EditDirectClient) BulkAdd(ctx context.Context, opts ...grpc.CallOption) (Edit_BulkAddClient, error) {
	w := &directEditBulkAdd{ctx, make(chan *GraphElement, 100), make(chan *BulkEditResult, 3)}
	go func() {
		dir.server.BulkAdd(w)
	}()
	return w, nil
}


//AddGraph shim
func (shim *EditDirectClient) AddGraph(ctx context.Context, in *GraphID, opts ...grpc.CallOption) (*EditResult, error) {
	return shim.server.AddGraph(ctx, in)
}

//DeleteGraph shim
func (shim *EditDirectClient) DeleteGraph(ctx context.Context, in *GraphID, opts ...grpc.CallOption) (*EditResult, error) {
	return shim.server.DeleteGraph(ctx, in)
}

//DeleteVertex shim
func (shim *EditDirectClient) DeleteVertex(ctx context.Context, in *ElementID, opts ...grpc.CallOption) (*EditResult, error) {
	return shim.server.DeleteVertex(ctx, in)
}

//DeleteEdge shim
func (shim *EditDirectClient) DeleteEdge(ctx context.Context, in *ElementID, opts ...grpc.CallOption) (*EditResult, error) {
	return shim.server.DeleteEdge(ctx, in)
}

//AddIndex shim
func (shim *EditDirectClient) AddIndex(ctx context.Context, in *IndexID, opts ...grpc.CallOption) (*EditResult, error) {
	return shim.server.AddIndex(ctx, in)
}

//DeleteIndex shim
func (shim *EditDirectClient) DeleteIndex(ctx context.Context, in *IndexID, opts ...grpc.CallOption) (*EditResult, error) {
	return shim.server.DeleteIndex(ctx, in)
}

//AddSchema shim
func (shim *EditDirectClient) AddSchema(ctx context.Context, in *Graph, opts ...grpc.CallOption) (*EditResult, error) {
	return shim.server.AddSchema(ctx, in)
}
