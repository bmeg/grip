syntax = "proto3";

package aql;

import "google/api/annotations.proto";
import "google/protobuf/struct.proto";

message Graph {
	string graph = 1;
	repeated Vertex vertices = 2;
	repeated Edge edges = 3;
}

message GraphQuery {
  string graph = 1;
  repeated GraphStatement query = 2;
}

message QuerySet {
  repeated GraphStatement query = 1;
}

message MatchQuerySet {
  repeated QuerySet queries = 1;
}

message GraphStatement {
  oneof statement {
    google.protobuf.ListValue v = 1;
    google.protobuf.ListValue e = 2;

    google.protobuf.ListValue in = 10;
    google.protobuf.ListValue out = 11;
    google.protobuf.ListValue in_edge = 12;
    google.protobuf.ListValue out_edge = 13;
    google.protobuf.ListValue both = 14;
    google.protobuf.ListValue both_edge = 15;

    string mark = 20;
    SelectStatement select = 21;
    uint32 limit = 24;
    uint32 offset = 25;
    google.protobuf.ListValue fields = 26;
    google.protobuf.ListValue distinct = 27;
    MatchQuerySet match = 28;
    WhereExpression where = 29;
    string count = 30;
    Aggregations aggregate = 31;
    google.protobuf.Value render = 32;
  }
}

message AggregationsRequest {
  string graph = 1;
  repeated Aggregate aggregations = 2; 
}

message Aggregations {
  repeated Aggregate aggregations = 1; 
}

message Aggregate {
  string name = 1;
  oneof aggregation {
    TermAggregation term = 2;
    PercentileAggregation percentile = 3;
    HistogramAggregation histogram = 4;
  }
}

message TermAggregation {
  string label = 1;
  string field = 2;
  uint32 size = 3;
}

message PercentileAggregation {
  string label = 1;
  string field = 2;
  repeated double percents = 3;
}

message HistogramAggregation {
  string label = 1;
  string field = 2;
  uint32 interval = 3;
}

message NamedAggregationResult {
	map<string, AggregationResult> aggregations = 3;
}

message AggregationResult {
  repeated AggregationResultBucket buckets = 2;
}

message AggregationResultBucket {
  google.protobuf.Value key = 1;
  double value = 2;
}

message WhereExpressionList {
  repeated WhereExpression expressions = 1;
}

message WhereExpression {
  oneof expression {
    WhereExpressionList and = 1;
    WhereExpressionList or = 2;
    WhereExpression not = 3;
    WhereCondition condition = 4;
  }
}

message WhereCondition {
  string key = 1;
  google.protobuf.Value value = 2;
  Condition condition = 3;
}

enum Condition {
  UNKNOWN_CONDITION = 0;
  EQ  = 1;
  NEQ = 2;
  GT  = 3;
  GTE = 4;
  LT  = 5;
  LTE = 6;
  IN = 7;
  CONTAINS = 8;
}

message SelectStatement {
  repeated string marks = 1;
}

message Selection {
	oneof result {
		Vertex vertex = 1;
		Edge edge = 2;
	}
}

message Selections {
	map<string, Selection> selections = 1;
}

message Vertex {
  string gid = 1;
  string label = 2;
  google.protobuf.Struct data = 3;
}

message Edge {
  string gid = 1;
  string label = 2;
  string from = 3;
  string to = 4;
  google.protobuf.Struct data = 5;
}

message QueryResult {
	oneof result {
		Vertex vertex = 1;
		Edge edge = 2;
		NamedAggregationResult aggregations = 3;
		Selections selections = 4;
		google.protobuf.Value render = 5;
		uint32 count = 6;
	}
}

message EditResult {
  string id = 1;
}

message GraphElement {
  string graph = 1;
  Vertex vertex = 2;
  Edge edge = 3;
}

message GraphID {
  string graph = 1;
}

message ElementID {
  string graph = 1;
  string id = 2;
}

message IndexID {
  string graph = 1;
  string label = 2;
  string field = 3;
}

message Timestamp {
  string timestamp = 1;
}

enum FieldType {
  UNKNOWN = 0;
  STRING  = 1;
  NUMERIC = 2;
  BOOL  = 3;
}

// Each data field in the vertices/edges will be mapped to a FieldType. 
// The `Gid` field is not used in the schema.
// The `Label` field identifies the vertex/edge type.
//
// Example:
//
// {
//   "vertices": [
//     {
//       "label": "Human",
//       "data": {
// 	      "name": "STRING",
// 	      "height": "NUMERIC",
// 	      "mass": "NUMERIC",
// 	      "age": "NUMERIC",
// 	      "homePlanet": "STRING"
//       }
//     },
//     {
//       "label": "Droid",
//       "data": {
// 	      "name": "STRING",
// 	      "primaryFunction": "STRING"
//       }
//     },
//   ],
//   "edges": [
//     {
//       "label": "Owner",
//       "from": "Human",
//       "to": "Droid",
//       "data" : {
// 	      "years": "NUMERIC"
//       }
//     }
//   ]
// }
message GraphSchema {
  repeated Vertex vertices = 1;
  repeated Edge edges = 2;
}

message Empty {}

service Query {
  rpc Traversal(GraphQuery) returns (stream QueryResult) {
    option (google.api.http) = {
      post: "/v1/graph/{graph}/query"
      body: "*"
    };
  }

  rpc Aggregate(AggregationsRequest) returns (NamedAggregationResult) {
    option (google.api.http) = {
      post: "/v1/graph/{graph}/aggregate"
      body: "*"
    };
  }

  rpc GetVertex(ElementID) returns (Vertex) {
    option (google.api.http) = {
      get: "/v1/graph/{graph}/vertex/{id}"
    };
  }

  rpc GetEdge(ElementID) returns (Edge) {
    option (google.api.http) = {
      get: "/v1/graph/{graph}/edge/{id}"
    };
  }

  rpc GetTimestamp(GraphID) returns (Timestamp) {
    option (google.api.http) = {
      get: "/v1/graph/{graph}/timestamp"
    };
  }

  rpc ListGraphs(Empty) returns (stream GraphID) {
    option (google.api.http) = {
      get: "/v1/graph"
    };
  }

  rpc ListIndices(GraphID) returns (stream IndexID) {
    option (google.api.http) = {
      get: "/v1/graph/{graph}/index"
    };
  }

  rpc GetSchema(GraphID) returns (GraphSchema) {
    option (google.api.http) = {
      get: "/v1/graph/{graph}/schema"
    };
  }

}

service Edit {
  rpc AddVertex(GraphElement) returns (EditResult) {
    option (google.api.http) = {
      post: "/v1/graph/{graph}/vertex"
      body: "vertex"
    };
  }

  rpc AddEdge(GraphElement) returns (EditResult) {
    option (google.api.http) = {
      post: "/v1/graph/{graph}/edge"
      body: "edge"
    };
  }

  rpc BulkAdd(stream GraphElement) returns (EditResult) {
    option (google.api.http) = {
      post: "/v1/graph"
    };
  }

  rpc AddGraph(GraphID) returns (EditResult) {
    option (google.api.http) = {
      post: "/v1/graph/{graph}"
    };
  }

  rpc DeleteGraph(GraphID) returns (EditResult) {
    option (google.api.http) = {
      delete: "/v1/graph/{graph}"
    };
  }

  rpc DeleteVertex(ElementID) returns (EditResult) {
    option (google.api.http) = {
      delete: "/v1/graph/{graph}/vertex/{id}"
    };
  }

  rpc DeleteEdge(ElementID) returns (EditResult) {
    option (google.api.http) = {
      delete: "/v1/graph/{graph}/edge/{id}"
    };
  }

  rpc AddIndex(IndexID) returns (EditResult) {
    option (google.api.http) = {
      post: "/v1/graph/{graph}/index/{label}"
      body: "*"
    };
  }

  rpc DeleteIndex(IndexID) returns (EditResult) {
    option (google.api.http) = {
      delete: "/v1/graph/{graph}/index/{label}/{field}"
    };
  }

}
