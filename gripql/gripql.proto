syntax = "proto3";

package gripql;

option go_package = "github.com/bmeg/grip/gripql";

import "google/api/annotations.proto";
import "google/protobuf/struct.proto";

message Graph {
	string graph = 1;
	repeated Vertex vertices = 2;
	repeated Edge edges = 3;
}

message GraphQuery {
  string graph = 1;
  repeated GraphStatement query = 2;
}

message QuerySet {
  repeated GraphStatement query = 1;
}

message GraphStatement {
  oneof statement {
    // Tinkerpop methods
    google.protobuf.ListValue v = 1;
    google.protobuf.ListValue e = 2;

    google.protobuf.ListValue in = 10;
    google.protobuf.ListValue out = 11;
    google.protobuf.ListValue both = 14;
    google.protobuf.ListValue in_e = 12;
    google.protobuf.ListValue out_e = 13;
    google.protobuf.ListValue both_e = 15;

    string as = 20;
    SelectStatement select = 21;
    uint32 limit = 24;
    uint32 skip = 25;
    Range range = 26;
    HasExpression has = 30;
    google.protobuf.ListValue has_label = 31;
    google.protobuf.ListValue has_key = 32;
    google.protobuf.ListValue has_id = 33;

    google.protobuf.ListValue distinct = 40;

		google.protobuf.ListValue fields = 50;
		string unwind = 51;

		string count = 60;
    Aggregations aggregate = 61;
    google.protobuf.Value render = 62;
		google.protobuf.ListValue path = 63;
  }
}

message Range {
  int32 start = 1;
  int32 stop = 2;
}

message AggregationsRequest {
  string graph = 1;
  repeated Aggregate aggregations = 2;
}

message Aggregations {
  repeated Aggregate aggregations = 1;
}

message Aggregate {
  string name = 1;
  oneof aggregation {
    TermAggregation term = 2;
    PercentileAggregation percentile = 3;
    HistogramAggregation histogram = 4;
		FieldAggregation field = 5;
		TypeAggregation type = 6;
  }
}

message TermAggregation {
  string field = 2;
  uint32 size = 3;
}

message PercentileAggregation {
  string field = 2;
  repeated double percents = 3;
}

message HistogramAggregation {
  string field = 2;
  uint32 interval = 3;
}

message FieldAggregation {
	string field = 2;
}

message TypeAggregation {
	string field = 2;
}

message NamedAggregationResult {
	string name = 1;
	google.protobuf.Value key = 2;
  double value = 3;
}

message HasExpressionList {
  repeated HasExpression expressions = 1;
}

message HasExpression {
  oneof expression {
    HasExpressionList and = 1;
    HasExpressionList or = 2;
    HasExpression not = 3;
    HasCondition condition = 4;
  }
}

message HasCondition {
  string key = 1;
  google.protobuf.Value value = 2;
  Condition condition = 3;
}

enum Condition {
  UNKNOWN_CONDITION = 0;
  EQ  = 1;
  NEQ = 2;
  GT  = 3;
  GTE = 4;
  LT  = 5;
  LTE = 6;
  INSIDE = 7;
  OUTSIDE = 8;
  BETWEEN = 9;
  WITHIN = 10;
  WITHOUT = 11;
  CONTAINS = 12;
}

message SelectStatement {
  repeated string marks = 1;
}

message Selection {
	oneof result {
		Vertex vertex = 1;
		Edge edge = 2;
	}
}

message Selections {
	map<string, Selection> selections = 1;
}

message Vertex {
  string gid = 1;
  string label = 2;
  google.protobuf.Struct data = 3;
}

message Edge {
  string gid = 1;
  string label = 2;
  string from = 3;
  string to = 4;
  google.protobuf.Struct data = 5;
}

message QueryResult {
	oneof result {
		Vertex vertex = 1;
		Edge edge = 2;
		NamedAggregationResult aggregations = 3;
		Selections selections = 4;
		google.protobuf.Value render = 5;
		uint32 count = 6;
		google.protobuf.ListValue path = 7;
	}
}

message QueryJob {
	string id = 1;
	string graph = 2;
}

message ExtendQuery {
	string src_id = 1;
	string graph = 2;
	repeated GraphStatement query = 3;
}

enum JobState {
	QUEUED = 0;
	RUNNING = 1;
	COMPLETE = 2;
	ERROR = 3;
	DELETED = 4;
}

message JobStatus {
	string id = 1;
	string graph = 2;
	JobState state = 3;
	uint64   count = 4;
	repeated GraphStatement query = 5;
	string timestamp = 6;
}

message EditResult {
  string id = 1;
}

message BulkEditResult {
  int32 insert_count = 1;
  int32 error_count = 2;
}

message GraphElement {
  string graph = 1;
  Vertex vertex = 2;
  Edge edge = 3;
}

message GraphID {
  string graph = 1;
}

message ElementID {
  string graph = 1;
  string id = 2;
}

message IndexID {
  string graph = 1;
  string label = 2;
  string field = 3;
}

message Timestamp {
  string timestamp = 1;
}

enum FieldType {
  UNKNOWN = 0;
  STRING  = 1;
  NUMERIC = 2;
  BOOL  = 3;
	MAP   = 4;
	ARRAY = 5;
}

message Empty {}

message ListGraphsResponse {
  repeated string graphs = 1;
}

message ListIndicesResponse {
  repeated IndexID indices = 1;
}

message ListLabelsResponse {
  repeated string vertex_labels = 1;
  repeated string edge_labels = 2;
}

message TableInfo {
	string source = 1;
	string name = 2;
	repeated string fields = 3;
}

service Query {
  rpc Traversal(GraphQuery) returns (stream QueryResult) {
    option (google.api.http) = {
      post: "/v1/graph/{graph}/query"
      body: "*"
    };
  }

  rpc GetVertex(ElementID) returns (Vertex) {
    option (google.api.http) = {
      get: "/v1/graph/{graph}/vertex/{id}"
    };
  }

  rpc GetEdge(ElementID) returns (Edge) {
    option (google.api.http) = {
      get: "/v1/graph/{graph}/edge/{id}"
    };
  }

  rpc GetTimestamp(GraphID) returns (Timestamp) {
    option (google.api.http) = {
      get: "/v1/graph/{graph}/timestamp"
    };
  }

  rpc GetSchema(GraphID) returns (Graph) {
    option (google.api.http) = {
      get: "/v1/graph/{graph}/schema"
    };
  }

	rpc GetMapping(GraphID) returns (Graph) {
    option (google.api.http) = {
      get: "/v1/graph/{graph}/mapping"
    };
  }

  rpc ListGraphs(Empty) returns (ListGraphsResponse) {
    option (google.api.http) = {
      get: "/v1/graph"
    };
  }

  rpc ListIndices(GraphID) returns (ListIndicesResponse) {
    option (google.api.http) = {
      get: "/v1/graph/{graph}/index"
    };
  }

  rpc ListLabels(GraphID) returns (ListLabelsResponse) {
    option (google.api.http) = {
      get: "/v1/graph/{graph}/label"
    };
  }

	rpc ListTables(Empty) returns (stream TableInfo) {
		option (google.api.http) = {
			get: "/v1/table"
		};
	}
}

service Job {
	rpc Job(GraphQuery) returns (QueryJob) {
		option (google.api.http) = {
			post: "/v1/graph/{graph}/job"
			body: "*"
		};
	}

	rpc ListJobs(Graph) returns (stream QueryJob) {
		option (google.api.http) = {
			get: "/v1/graph/{graph}/job"
		};
	}

	rpc SearchJobs(GraphQuery) returns (stream JobStatus) {
		option (google.api.http) = {
			post: "/v1/graph/{graph}/job-search"
			body: "*"
		};
	}

	rpc DeleteJob(QueryJob) returns (JobStatus) {
		option (google.api.http) = {
			delete: "/v1/graph/{graph}/job/{id}"
		};
	}

	rpc GetJob(QueryJob) returns (JobStatus) {
		option (google.api.http) = {
			get: "/v1/graph/{graph}/job/{id}"
		};
	}

	rpc ViewJob(QueryJob) returns (stream QueryResult) {
		option (google.api.http) = {
			post: "/v1/graph/{graph}/job/{id}"
			body: "*"
		};
	}

	rpc ResumeJob(ExtendQuery) returns (stream QueryResult) {
		option (google.api.http) = {
			post: "/v1/graph/{graph}/job-resume"
			body: "*"
		};
	}

}

service Edit {
  rpc AddVertex(GraphElement) returns (EditResult) {
    option (google.api.http) = {
      post: "/v1/graph/{graph}/vertex"
      body: "vertex"
    };
  }

  rpc AddEdge(GraphElement) returns (EditResult) {
    option (google.api.http) = {
      post: "/v1/graph/{graph}/edge"
      body: "edge"
    };
  }

  rpc BulkAdd(stream GraphElement) returns (BulkEditResult) {
    option (google.api.http) = {
      post: "/v1/graph"
    };
  }

  rpc AddGraph(GraphID) returns (EditResult) {
    option (google.api.http) = {
      post: "/v1/graph/{graph}"
    };
  }

  rpc DeleteGraph(GraphID) returns (EditResult) {
    option (google.api.http) = {
      delete: "/v1/graph/{graph}"
    };
  }

  rpc DeleteVertex(ElementID) returns (EditResult) {
    option (google.api.http) = {
      delete: "/v1/graph/{graph}/vertex/{id}"
    };
  }

  rpc DeleteEdge(ElementID) returns (EditResult) {
    option (google.api.http) = {
      delete: "/v1/graph/{graph}/edge/{id}"
    };
  }

  rpc AddIndex(IndexID) returns (EditResult) {
    option (google.api.http) = {
      post: "/v1/graph/{graph}/index/{label}"
      body: "*"
    };
  }

  rpc DeleteIndex(IndexID) returns (EditResult) {
    option (google.api.http) = {
      delete: "/v1/graph/{graph}/index/{label}/{field}"
    };
  }

  rpc AddSchema(Graph) returns (EditResult) {
    option (google.api.http) = {
      post: "/v1/graph/{graph}/schema"
      body: "*"
    };
  }

	rpc AddMapping(Graph) returns (EditResult) {
    option (google.api.http) = {
      post: "/v1/graph/{graph}/mapping"
      body: "*"
    };
  }

}


message PluginConfig {
	string name = 1;
  string driver = 2;
	map<string, string> config = 3;
}

message PluginStatus {
	string name = 1;
	string error = 2;
}

message ListDriversResponse {
  repeated string drivers = 1;
}

message ListPluginsResponse {
	repeated string plugins = 1;
}

service Configure {
  rpc StartPlugin(PluginConfig) returns (PluginStatus) {
    option (google.api.http) = {
      post: "/v1/plugin/{name}"
      body: "*"
    };
  }

	rpc ListPlugins(Empty) returns (ListPluginsResponse) {
		option (google.api.http) = {
			get: "/v1/plugin"
		};
	}

	rpc ListDrivers(Empty) returns (ListDriversResponse) {
		option (google.api.http) = {
			get: "/v1/driver"
		};
	}

}
