// Code generated by protoc-gen-grpc-gateway-client. DO NOT EDIT.
// source: gripql.proto

package gripql

import (
	context "context"
	fmt "fmt"
	gateway "github.com/akuity/grpc-gateway-client/pkg/grpc/gateway"
)

// QueryGatewayClient is the interface for Query service client.
type QueryGatewayClient interface {
	Traversal(context.Context, *GraphQuery) (<-chan *QueryResult, <-chan error, error)
	GetVertex(context.Context, *ElementID) (*Vertex, error)
	GetEdge(context.Context, *ElementID) (*Edge, error)
	GetTimestamp(context.Context, *GraphID) (*Timestamp, error)
	GetSchema(context.Context, *GraphID) (*Graph, error)
	GetMapping(context.Context, *GraphID) (*Graph, error)
	ListGraphs(context.Context, *Empty) (*ListGraphsResponse, error)
	ListIndices(context.Context, *GraphID) (*ListIndicesResponse, error)
	ListLabels(context.Context, *GraphID) (*ListLabelsResponse, error)
	ListTables(context.Context, *Empty) (<-chan *TableInfo, <-chan error, error)
}

func NewQueryGatewayClient(c gateway.Client) QueryGatewayClient {
	return &queryGatewayClient{
		gwc: c,
	}
}

type queryGatewayClient struct {
	gwc gateway.Client
}

func (c *queryGatewayClient) Traversal(ctx context.Context, req *GraphQuery) (<-chan *QueryResult, <-chan error, error) {
	gwReq := c.gwc.NewRequest("POST", "/v1/graph/{graph}/query")
	gwReq.SetPathParam("graph", fmt.Sprintf("%v", req.Graph))
	gwReq.SetBody(req)
	return gateway.DoStreamingRequest[QueryResult](ctx, c.gwc, gwReq)
}

func (c *queryGatewayClient) GetVertex(ctx context.Context, req *ElementID) (*Vertex, error) {
	gwReq := c.gwc.NewRequest("GET", "/v1/graph/{graph}/vertex/{id}")
	gwReq.SetPathParam("graph", fmt.Sprintf("%v", req.Graph))
	gwReq.SetPathParam("id", fmt.Sprintf("%v", req.Id))
	return gateway.DoRequest[Vertex](ctx, gwReq)
}

func (c *queryGatewayClient) GetEdge(ctx context.Context, req *ElementID) (*Edge, error) {
	gwReq := c.gwc.NewRequest("GET", "/v1/graph/{graph}/edge/{id}")
	gwReq.SetPathParam("graph", fmt.Sprintf("%v", req.Graph))
	gwReq.SetPathParam("id", fmt.Sprintf("%v", req.Id))
	return gateway.DoRequest[Edge](ctx, gwReq)
}

func (c *queryGatewayClient) GetTimestamp(ctx context.Context, req *GraphID) (*Timestamp, error) {
	gwReq := c.gwc.NewRequest("GET", "/v1/graph/{graph}/timestamp")
	gwReq.SetPathParam("graph", fmt.Sprintf("%v", req.Graph))
	return gateway.DoRequest[Timestamp](ctx, gwReq)
}

func (c *queryGatewayClient) GetSchema(ctx context.Context, req *GraphID) (*Graph, error) {
	gwReq := c.gwc.NewRequest("GET", "/v1/graph/{graph}/schema")
	gwReq.SetPathParam("graph", fmt.Sprintf("%v", req.Graph))
	return gateway.DoRequest[Graph](ctx, gwReq)
}

func (c *queryGatewayClient) GetMapping(ctx context.Context, req *GraphID) (*Graph, error) {
	gwReq := c.gwc.NewRequest("GET", "/v1/graph/{graph}/mapping")
	gwReq.SetPathParam("graph", fmt.Sprintf("%v", req.Graph))
	return gateway.DoRequest[Graph](ctx, gwReq)
}

func (c *queryGatewayClient) ListGraphs(ctx context.Context, req *Empty) (*ListGraphsResponse, error) {
	gwReq := c.gwc.NewRequest("GET", "/v1/graph")
	return gateway.DoRequest[ListGraphsResponse](ctx, gwReq)
}

func (c *queryGatewayClient) ListIndices(ctx context.Context, req *GraphID) (*ListIndicesResponse, error) {
	gwReq := c.gwc.NewRequest("GET", "/v1/graph/{graph}/index")
	gwReq.SetPathParam("graph", fmt.Sprintf("%v", req.Graph))
	return gateway.DoRequest[ListIndicesResponse](ctx, gwReq)
}

func (c *queryGatewayClient) ListLabels(ctx context.Context, req *GraphID) (*ListLabelsResponse, error) {
	gwReq := c.gwc.NewRequest("GET", "/v1/graph/{graph}/label")
	gwReq.SetPathParam("graph", fmt.Sprintf("%v", req.Graph))
	return gateway.DoRequest[ListLabelsResponse](ctx, gwReq)
}

func (c *queryGatewayClient) ListTables(ctx context.Context, req *Empty) (<-chan *TableInfo, <-chan error, error) {
	gwReq := c.gwc.NewRequest("GET", "/v1/table")
	return gateway.DoStreamingRequest[TableInfo](ctx, c.gwc, gwReq)
}

// JobGatewayClient is the interface for Job service client.
type JobGatewayClient interface {
	Submit(context.Context, *GraphQuery) (*QueryJob, error)
	ListJobs(context.Context, *GraphID) (<-chan *QueryJob, <-chan error, error)
	SearchJobs(context.Context, *GraphQuery) (<-chan *JobStatus, <-chan error, error)
	DeleteJob(context.Context, *QueryJob) (*JobStatus, error)
	GetJob(context.Context, *QueryJob) (*JobStatus, error)
	ViewJob(context.Context, *QueryJob) (<-chan *QueryResult, <-chan error, error)
	ResumeJob(context.Context, *ExtendQuery) (<-chan *QueryResult, <-chan error, error)
}

func NewJobGatewayClient(c gateway.Client) JobGatewayClient {
	return &jobGatewayClient{
		gwc: c,
	}
}

type jobGatewayClient struct {
	gwc gateway.Client
}

func (c *jobGatewayClient) Submit(ctx context.Context, req *GraphQuery) (*QueryJob, error) {
	gwReq := c.gwc.NewRequest("POST", "/v1/graph/{graph}/job")
	gwReq.SetPathParam("graph", fmt.Sprintf("%v", req.Graph))
	gwReq.SetBody(req)
	return gateway.DoRequest[QueryJob](ctx, gwReq)
}

func (c *jobGatewayClient) ListJobs(ctx context.Context, req *GraphID) (<-chan *QueryJob, <-chan error, error) {
	gwReq := c.gwc.NewRequest("GET", "/v1/graph/{graph}/job")
	gwReq.SetPathParam("graph", fmt.Sprintf("%v", req.Graph))
	return gateway.DoStreamingRequest[QueryJob](ctx, c.gwc, gwReq)
}

func (c *jobGatewayClient) SearchJobs(ctx context.Context, req *GraphQuery) (<-chan *JobStatus, <-chan error, error) {
	gwReq := c.gwc.NewRequest("POST", "/v1/graph/{graph}/job-search")
	gwReq.SetPathParam("graph", fmt.Sprintf("%v", req.Graph))
	gwReq.SetBody(req)
	return gateway.DoStreamingRequest[JobStatus](ctx, c.gwc, gwReq)
}

func (c *jobGatewayClient) DeleteJob(ctx context.Context, req *QueryJob) (*JobStatus, error) {
	gwReq := c.gwc.NewRequest("DELETE", "/v1/graph/{graph}/job/{id}")
	gwReq.SetPathParam("id", fmt.Sprintf("%v", req.Id))
	gwReq.SetPathParam("graph", fmt.Sprintf("%v", req.Graph))
	gwReq.SetBody(req)
	return gateway.DoRequest[JobStatus](ctx, gwReq)
}

func (c *jobGatewayClient) GetJob(ctx context.Context, req *QueryJob) (*JobStatus, error) {
	gwReq := c.gwc.NewRequest("GET", "/v1/graph/{graph}/job/{id}")
	gwReq.SetPathParam("id", fmt.Sprintf("%v", req.Id))
	gwReq.SetPathParam("graph", fmt.Sprintf("%v", req.Graph))
	return gateway.DoRequest[JobStatus](ctx, gwReq)
}

func (c *jobGatewayClient) ViewJob(ctx context.Context, req *QueryJob) (<-chan *QueryResult, <-chan error, error) {
	gwReq := c.gwc.NewRequest("POST", "/v1/graph/{graph}/job/{id}")
	gwReq.SetPathParam("id", fmt.Sprintf("%v", req.Id))
	gwReq.SetPathParam("graph", fmt.Sprintf("%v", req.Graph))
	gwReq.SetBody(req)
	return gateway.DoStreamingRequest[QueryResult](ctx, c.gwc, gwReq)
}

func (c *jobGatewayClient) ResumeJob(ctx context.Context, req *ExtendQuery) (<-chan *QueryResult, <-chan error, error) {
	gwReq := c.gwc.NewRequest("POST", "/v1/graph/{graph}/job-resume")
	gwReq.SetPathParam("graph", fmt.Sprintf("%v", req.Graph))
	gwReq.SetBody(req)
	return gateway.DoStreamingRequest[QueryResult](ctx, c.gwc, gwReq)
}

// EditGatewayClient is the interface for Edit service client.
type EditGatewayClient interface {
	AddVertex(context.Context, *GraphElement) (*EditResult, error)
	AddEdge(context.Context, *GraphElement) (*EditResult, error)
	AddGraph(context.Context, *GraphID) (*EditResult, error)
	DeleteGraph(context.Context, *GraphID) (*EditResult, error)
	DeleteVertex(context.Context, *ElementID) (*EditResult, error)
	DeleteEdge(context.Context, *ElementID) (*EditResult, error)
	AddIndex(context.Context, *IndexID) (*EditResult, error)
	DeleteIndex(context.Context, *IndexID) (*EditResult, error)
	AddSchema(context.Context, *Graph) (*EditResult, error)
	SampleSchema(context.Context, *GraphID) (*Graph, error)
	AddMapping(context.Context, *Graph) (*EditResult, error)
}

func NewEditGatewayClient(c gateway.Client) EditGatewayClient {
	return &editGatewayClient{
		gwc: c,
	}
}

type editGatewayClient struct {
	gwc gateway.Client
}

func (c *editGatewayClient) AddVertex(ctx context.Context, req *GraphElement) (*EditResult, error) {
	gwReq := c.gwc.NewRequest("POST", "/v1/graph/{graph}/vertex")
	gwReq.SetPathParam("graph", fmt.Sprintf("%v", req.Graph))
	gwReq.SetBody(req.Vertex)
	return gateway.DoRequest[EditResult](ctx, gwReq)
}

func (c *editGatewayClient) AddEdge(ctx context.Context, req *GraphElement) (*EditResult, error) {
	gwReq := c.gwc.NewRequest("POST", "/v1/graph/{graph}/edge")
	gwReq.SetPathParam("graph", fmt.Sprintf("%v", req.Graph))
	gwReq.SetBody(req.Edge)
	return gateway.DoRequest[EditResult](ctx, gwReq)
}

func (c *editGatewayClient) AddGraph(ctx context.Context, req *GraphID) (*EditResult, error) {
	gwReq := c.gwc.NewRequest("POST", "/v1/graph/{graph}")
	gwReq.SetPathParam("graph", fmt.Sprintf("%v", req.Graph))
	gwReq.SetBody(req)
	return gateway.DoRequest[EditResult](ctx, gwReq)
}

func (c *editGatewayClient) DeleteGraph(ctx context.Context, req *GraphID) (*EditResult, error) {
	gwReq := c.gwc.NewRequest("DELETE", "/v1/graph/{graph}")
	gwReq.SetPathParam("graph", fmt.Sprintf("%v", req.Graph))
	gwReq.SetBody(req)
	return gateway.DoRequest[EditResult](ctx, gwReq)
}

func (c *editGatewayClient) DeleteVertex(ctx context.Context, req *ElementID) (*EditResult, error) {
	gwReq := c.gwc.NewRequest("DELETE", "/v1/graph/{graph}/vertex/{id}")
	gwReq.SetPathParam("graph", fmt.Sprintf("%v", req.Graph))
	gwReq.SetPathParam("id", fmt.Sprintf("%v", req.Id))
	gwReq.SetBody(req)
	return gateway.DoRequest[EditResult](ctx, gwReq)
}

func (c *editGatewayClient) DeleteEdge(ctx context.Context, req *ElementID) (*EditResult, error) {
	gwReq := c.gwc.NewRequest("DELETE", "/v1/graph/{graph}/edge/{id}")
	gwReq.SetPathParam("graph", fmt.Sprintf("%v", req.Graph))
	gwReq.SetPathParam("id", fmt.Sprintf("%v", req.Id))
	gwReq.SetBody(req)
	return gateway.DoRequest[EditResult](ctx, gwReq)
}

func (c *editGatewayClient) AddIndex(ctx context.Context, req *IndexID) (*EditResult, error) {
	gwReq := c.gwc.NewRequest("POST", "/v1/graph/{graph}/index/{label}")
	gwReq.SetPathParam("graph", fmt.Sprintf("%v", req.Graph))
	gwReq.SetPathParam("label", fmt.Sprintf("%v", req.Label))
	gwReq.SetBody(req)
	return gateway.DoRequest[EditResult](ctx, gwReq)
}

func (c *editGatewayClient) DeleteIndex(ctx context.Context, req *IndexID) (*EditResult, error) {
	gwReq := c.gwc.NewRequest("DELETE", "/v1/graph/{graph}/index/{label}/{field}")
	gwReq.SetPathParam("graph", fmt.Sprintf("%v", req.Graph))
	gwReq.SetPathParam("label", fmt.Sprintf("%v", req.Label))
	gwReq.SetPathParam("field", fmt.Sprintf("%v", req.Field))
	gwReq.SetBody(req)
	return gateway.DoRequest[EditResult](ctx, gwReq)
}

func (c *editGatewayClient) AddSchema(ctx context.Context, req *Graph) (*EditResult, error) {
	gwReq := c.gwc.NewRequest("POST", "/v1/graph/{graph}/schema")
	gwReq.SetPathParam("graph", fmt.Sprintf("%v", req.Graph))
	gwReq.SetBody(req)
	return gateway.DoRequest[EditResult](ctx, gwReq)
}

func (c *editGatewayClient) SampleSchema(ctx context.Context, req *GraphID) (*Graph, error) {
	gwReq := c.gwc.NewRequest("GET", "/v1/graph/{graph}/schema-sample")
	gwReq.SetPathParam("graph", fmt.Sprintf("%v", req.Graph))
	return gateway.DoRequest[Graph](ctx, gwReq)
}

func (c *editGatewayClient) AddMapping(ctx context.Context, req *Graph) (*EditResult, error) {
	gwReq := c.gwc.NewRequest("POST", "/v1/graph/{graph}/mapping")
	gwReq.SetPathParam("graph", fmt.Sprintf("%v", req.Graph))
	gwReq.SetBody(req)
	return gateway.DoRequest[EditResult](ctx, gwReq)
}

// ConfigureGatewayClient is the interface for Configure service client.
type ConfigureGatewayClient interface {
	StartPlugin(context.Context, *PluginConfig) (*PluginStatus, error)
	ListPlugins(context.Context, *Empty) (*ListPluginsResponse, error)
	ListDrivers(context.Context, *Empty) (*ListDriversResponse, error)
}

func NewConfigureGatewayClient(c gateway.Client) ConfigureGatewayClient {
	return &configureGatewayClient{
		gwc: c,
	}
}

type configureGatewayClient struct {
	gwc gateway.Client
}

func (c *configureGatewayClient) StartPlugin(ctx context.Context, req *PluginConfig) (*PluginStatus, error) {
	gwReq := c.gwc.NewRequest("POST", "/v1/plugin/{name}")
	gwReq.SetPathParam("name", fmt.Sprintf("%v", req.Name))
	gwReq.SetBody(req)
	return gateway.DoRequest[PluginStatus](ctx, gwReq)
}

func (c *configureGatewayClient) ListPlugins(ctx context.Context, req *Empty) (*ListPluginsResponse, error) {
	gwReq := c.gwc.NewRequest("GET", "/v1/plugin")
	return gateway.DoRequest[ListPluginsResponse](ctx, gwReq)
}

func (c *configureGatewayClient) ListDrivers(ctx context.Context, req *Empty) (*ListDriversResponse, error) {
	gwReq := c.gwc.NewRequest("GET", "/v1/driver")
	return gateway.DoRequest[ListDriversResponse](ctx, gwReq)
}
