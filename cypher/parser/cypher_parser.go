// Code generated from Cypher.g4 by ANTLR 4.7.1. DO NOT EDIT.

package parser // Cypher

import (
	"fmt"
	"reflect"
	"strconv"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import errors
var _ = fmt.Printf
var _ = reflect.Copy
var _ = strconv.Itoa

var parserATN = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 3, 129, 1550,
	4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7, 9, 7,
	4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12, 4, 13,
	9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4, 18, 9,
	18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22, 4, 23, 9, 23,
	4, 24, 9, 24, 4, 25, 9, 25, 4, 26, 9, 26, 4, 27, 9, 27, 4, 28, 9, 28, 4,
	29, 9, 29, 4, 30, 9, 30, 4, 31, 9, 31, 4, 32, 9, 32, 4, 33, 9, 33, 4, 34,
	9, 34, 4, 35, 9, 35, 4, 36, 9, 36, 4, 37, 9, 37, 4, 38, 9, 38, 4, 39, 9,
	39, 4, 40, 9, 40, 4, 41, 9, 41, 4, 42, 9, 42, 4, 43, 9, 43, 4, 44, 9, 44,
	4, 45, 9, 45, 4, 46, 9, 46, 4, 47, 9, 47, 4, 48, 9, 48, 4, 49, 9, 49, 4,
	50, 9, 50, 4, 51, 9, 51, 4, 52, 9, 52, 4, 53, 9, 53, 4, 54, 9, 54, 4, 55,
	9, 55, 4, 56, 9, 56, 4, 57, 9, 57, 4, 58, 9, 58, 4, 59, 9, 59, 4, 60, 9,
	60, 4, 61, 9, 61, 4, 62, 9, 62, 4, 63, 9, 63, 4, 64, 9, 64, 4, 65, 9, 65,
	4, 66, 9, 66, 4, 67, 9, 67, 4, 68, 9, 68, 4, 69, 9, 69, 4, 70, 9, 70, 4,
	71, 9, 71, 4, 72, 9, 72, 4, 73, 9, 73, 4, 74, 9, 74, 4, 75, 9, 75, 4, 76,
	9, 76, 4, 77, 9, 77, 4, 78, 9, 78, 4, 79, 9, 79, 4, 80, 9, 80, 4, 81, 9,
	81, 4, 82, 9, 82, 4, 83, 9, 83, 4, 84, 9, 84, 4, 85, 9, 85, 4, 86, 9, 86,
	4, 87, 9, 87, 4, 88, 9, 88, 4, 89, 9, 89, 4, 90, 9, 90, 4, 91, 9, 91, 4,
	92, 9, 92, 4, 93, 9, 93, 4, 94, 9, 94, 4, 95, 9, 95, 4, 96, 9, 96, 4, 97,
	9, 97, 4, 98, 9, 98, 4, 99, 9, 99, 4, 100, 9, 100, 3, 2, 5, 2, 202, 10,
	2, 3, 2, 3, 2, 5, 2, 206, 10, 2, 3, 2, 5, 2, 209, 10, 2, 3, 2, 5, 2, 212,
	10, 2, 3, 2, 3, 2, 3, 3, 3, 3, 3, 4, 3, 4, 5, 4, 220, 10, 4, 3, 5, 3, 5,
	5, 5, 224, 10, 5, 3, 5, 7, 5, 227, 10, 5, 12, 5, 14, 5, 230, 11, 5, 3,
	6, 3, 6, 3, 6, 3, 6, 5, 6, 236, 10, 6, 3, 6, 3, 6, 3, 6, 5, 6, 241, 10,
	6, 3, 6, 5, 6, 244, 10, 6, 3, 7, 3, 7, 5, 7, 248, 10, 7, 3, 8, 3, 8, 5,
	8, 252, 10, 8, 7, 8, 254, 10, 8, 12, 8, 14, 8, 257, 11, 8, 3, 8, 3, 8,
	3, 8, 5, 8, 262, 10, 8, 7, 8, 264, 10, 8, 12, 8, 14, 8, 267, 11, 8, 3,
	8, 3, 8, 5, 8, 271, 10, 8, 3, 8, 7, 8, 274, 10, 8, 12, 8, 14, 8, 277, 11,
	8, 3, 8, 5, 8, 280, 10, 8, 3, 8, 5, 8, 283, 10, 8, 5, 8, 285, 10, 8, 3,
	9, 3, 9, 5, 9, 289, 10, 9, 7, 9, 291, 10, 9, 12, 9, 14, 9, 294, 11, 9,
	3, 9, 3, 9, 5, 9, 298, 10, 9, 7, 9, 300, 10, 9, 12, 9, 14, 9, 303, 11,
	9, 3, 9, 3, 9, 5, 9, 307, 10, 9, 6, 9, 309, 10, 9, 13, 9, 14, 9, 310, 3,
	9, 3, 9, 3, 10, 3, 10, 3, 10, 3, 10, 3, 10, 5, 10, 320, 10, 10, 3, 11,
	3, 11, 3, 11, 5, 11, 325, 10, 11, 3, 12, 3, 12, 5, 12, 329, 10, 12, 3,
	12, 3, 12, 5, 12, 333, 10, 12, 3, 12, 3, 12, 5, 12, 337, 10, 12, 3, 12,
	5, 12, 340, 10, 12, 3, 13, 3, 13, 5, 13, 344, 10, 13, 3, 13, 3, 13, 3,
	13, 3, 13, 3, 13, 3, 13, 3, 14, 3, 14, 5, 14, 354, 10, 14, 3, 14, 3, 14,
	3, 14, 7, 14, 359, 10, 14, 12, 14, 14, 14, 362, 11, 14, 3, 15, 3, 15, 3,
	15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 5, 15, 374, 10, 15,
	3, 16, 3, 16, 5, 16, 378, 10, 16, 3, 16, 3, 16, 3, 17, 3, 17, 5, 17, 384,
	10, 17, 3, 17, 3, 17, 3, 17, 7, 17, 389, 10, 17, 12, 17, 14, 17, 392, 11,
	17, 3, 18, 3, 18, 5, 18, 396, 10, 18, 3, 18, 3, 18, 5, 18, 400, 10, 18,
	3, 18, 3, 18, 3, 18, 3, 18, 5, 18, 406, 10, 18, 3, 18, 3, 18, 5, 18, 410,
	10, 18, 3, 18, 3, 18, 3, 18, 3, 18, 5, 18, 416, 10, 18, 3, 18, 3, 18, 5,
	18, 420, 10, 18, 3, 18, 3, 18, 3, 18, 3, 18, 5, 18, 426, 10, 18, 3, 18,
	3, 18, 5, 18, 430, 10, 18, 3, 19, 3, 19, 5, 19, 434, 10, 19, 3, 19, 3,
	19, 5, 19, 438, 10, 19, 3, 19, 3, 19, 5, 19, 442, 10, 19, 3, 19, 3, 19,
	5, 19, 446, 10, 19, 3, 19, 7, 19, 449, 10, 19, 12, 19, 14, 19, 452, 11,
	19, 3, 20, 3, 20, 3, 20, 3, 20, 5, 20, 458, 10, 20, 3, 20, 3, 20, 5, 20,
	462, 10, 20, 3, 20, 7, 20, 465, 10, 20, 12, 20, 14, 20, 468, 11, 20, 3,
	21, 3, 21, 3, 21, 3, 21, 5, 21, 474, 10, 21, 3, 22, 3, 22, 3, 22, 3, 22,
	5, 22, 480, 10, 22, 3, 22, 3, 22, 3, 22, 5, 22, 485, 10, 22, 3, 23, 3,
	23, 3, 23, 3, 23, 5, 23, 491, 10, 23, 3, 23, 3, 23, 3, 23, 3, 23, 5, 23,
	497, 10, 23, 3, 24, 3, 24, 3, 24, 5, 24, 502, 10, 24, 3, 24, 3, 24, 5,
	24, 506, 10, 24, 3, 24, 7, 24, 509, 10, 24, 12, 24, 14, 24, 512, 11, 24,
	5, 24, 514, 10, 24, 3, 24, 5, 24, 517, 10, 24, 3, 24, 5, 24, 520, 10, 24,
	3, 25, 3, 25, 3, 25, 3, 25, 3, 25, 5, 25, 527, 10, 25, 3, 25, 3, 25, 3,
	26, 3, 26, 5, 26, 533, 10, 26, 3, 26, 5, 26, 536, 10, 26, 3, 26, 3, 26,
	3, 26, 5, 26, 541, 10, 26, 3, 26, 5, 26, 544, 10, 26, 3, 27, 3, 27, 5,
	27, 548, 10, 27, 3, 27, 5, 27, 551, 10, 27, 3, 27, 3, 27, 3, 27, 3, 28,
	3, 28, 3, 28, 5, 28, 559, 10, 28, 3, 28, 3, 28, 5, 28, 563, 10, 28, 3,
	28, 3, 28, 5, 28, 567, 10, 28, 3, 29, 3, 29, 5, 29, 571, 10, 29, 3, 29,
	3, 29, 5, 29, 575, 10, 29, 3, 29, 7, 29, 578, 10, 29, 12, 29, 14, 29, 581,
	11, 29, 3, 29, 3, 29, 5, 29, 585, 10, 29, 3, 29, 3, 29, 5, 29, 589, 10,
	29, 3, 29, 7, 29, 592, 10, 29, 12, 29, 14, 29, 595, 11, 29, 5, 29, 597,
	10, 29, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 5, 30, 606, 10,
	30, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 5, 31, 615, 10, 31,
	3, 31, 7, 31, 618, 10, 31, 12, 31, 14, 31, 621, 11, 31, 3, 32, 3, 32, 3,
	32, 3, 32, 3, 33, 3, 33, 3, 33, 3, 33, 3, 34, 3, 34, 5, 34, 633, 10, 34,
	3, 34, 5, 34, 636, 10, 34, 3, 35, 3, 35, 3, 35, 3, 35, 3, 36, 3, 36, 5,
	36, 644, 10, 36, 3, 36, 3, 36, 5, 36, 648, 10, 36, 3, 36, 7, 36, 651, 10,
	36, 12, 36, 14, 36, 654, 11, 36, 3, 37, 3, 37, 5, 37, 658, 10, 37, 3, 37,
	3, 37, 5, 37, 662, 10, 37, 3, 37, 3, 37, 3, 37, 5, 37, 667, 10, 37, 3,
	38, 3, 38, 3, 39, 3, 39, 5, 39, 673, 10, 39, 3, 39, 7, 39, 676, 10, 39,
	12, 39, 14, 39, 679, 11, 39, 3, 39, 3, 39, 3, 39, 3, 39, 5, 39, 685, 10,
	39, 3, 40, 3, 40, 5, 40, 689, 10, 40, 3, 40, 3, 40, 5, 40, 693, 10, 40,
	5, 40, 695, 10, 40, 3, 40, 3, 40, 5, 40, 699, 10, 40, 5, 40, 701, 10, 40,
	3, 40, 3, 40, 5, 40, 705, 10, 40, 5, 40, 707, 10, 40, 3, 40, 3, 40, 3,
	41, 3, 41, 5, 41, 713, 10, 41, 3, 41, 3, 41, 3, 42, 3, 42, 5, 42, 719,
	10, 42, 3, 42, 3, 42, 5, 42, 723, 10, 42, 3, 42, 5, 42, 726, 10, 42, 3,
	42, 5, 42, 729, 10, 42, 3, 42, 3, 42, 5, 42, 733, 10, 42, 3, 42, 3, 42,
	3, 42, 3, 42, 5, 42, 739, 10, 42, 3, 42, 3, 42, 5, 42, 743, 10, 42, 3,
	42, 5, 42, 746, 10, 42, 3, 42, 5, 42, 749, 10, 42, 3, 42, 3, 42, 3, 42,
	3, 42, 5, 42, 755, 10, 42, 3, 42, 5, 42, 758, 10, 42, 3, 42, 5, 42, 761,
	10, 42, 3, 42, 3, 42, 5, 42, 765, 10, 42, 3, 42, 3, 42, 3, 42, 3, 42, 5,
	42, 771, 10, 42, 3, 42, 5, 42, 774, 10, 42, 3, 42, 5, 42, 777, 10, 42,
	3, 42, 3, 42, 5, 42, 781, 10, 42, 3, 43, 3, 43, 5, 43, 785, 10, 43, 3,
	43, 3, 43, 5, 43, 789, 10, 43, 5, 43, 791, 10, 43, 3, 43, 3, 43, 5, 43,
	795, 10, 43, 5, 43, 797, 10, 43, 3, 43, 5, 43, 800, 10, 43, 3, 43, 3, 43,
	5, 43, 804, 10, 43, 5, 43, 806, 10, 43, 3, 43, 3, 43, 3, 44, 3, 44, 5,
	44, 812, 10, 44, 3, 45, 3, 45, 5, 45, 816, 10, 45, 3, 45, 3, 45, 5, 45,
	820, 10, 45, 3, 45, 3, 45, 5, 45, 824, 10, 45, 3, 45, 5, 45, 827, 10, 45,
	3, 45, 7, 45, 830, 10, 45, 12, 45, 14, 45, 833, 11, 45, 3, 46, 3, 46, 5,
	46, 837, 10, 46, 3, 46, 7, 46, 840, 10, 46, 12, 46, 14, 46, 843, 11, 46,
	3, 47, 3, 47, 5, 47, 847, 10, 47, 3, 47, 3, 47, 3, 48, 3, 48, 5, 48, 853,
	10, 48, 3, 48, 3, 48, 5, 48, 857, 10, 48, 5, 48, 859, 10, 48, 3, 48, 3,
	48, 5, 48, 863, 10, 48, 3, 48, 3, 48, 5, 48, 867, 10, 48, 5, 48, 869, 10,
	48, 5, 48, 871, 10, 48, 3, 49, 3, 49, 3, 50, 3, 50, 3, 51, 3, 51, 3, 52,
	3, 52, 3, 52, 3, 52, 3, 52, 7, 52, 884, 10, 52, 12, 52, 14, 52, 887, 11,
	52, 3, 53, 3, 53, 3, 53, 3, 53, 3, 53, 7, 53, 894, 10, 53, 12, 53, 14,
	53, 897, 11, 53, 3, 54, 3, 54, 3, 54, 3, 54, 3, 54, 7, 54, 904, 10, 54,
	12, 54, 14, 54, 907, 11, 54, 3, 55, 3, 55, 5, 55, 911, 10, 55, 7, 55, 913,
	10, 55, 12, 55, 14, 55, 916, 11, 55, 3, 55, 3, 55, 3, 56, 3, 56, 5, 56,
	922, 10, 56, 3, 56, 7, 56, 925, 10, 56, 12, 56, 14, 56, 928, 11, 56, 3,
	57, 3, 57, 5, 57, 932, 10, 57, 3, 57, 3, 57, 5, 57, 936, 10, 57, 3, 57,
	3, 57, 5, 57, 940, 10, 57, 3, 57, 3, 57, 5, 57, 944, 10, 57, 3, 57, 7,
	57, 947, 10, 57, 12, 57, 14, 57, 950, 11, 57, 3, 58, 3, 58, 5, 58, 954,
	10, 58, 3, 58, 3, 58, 5, 58, 958, 10, 58, 3, 58, 3, 58, 5, 58, 962, 10,
	58, 3, 58, 3, 58, 5, 58, 966, 10, 58, 3, 58, 3, 58, 5, 58, 970, 10, 58,
	3, 58, 3, 58, 5, 58, 974, 10, 58, 3, 58, 7, 58, 977, 10, 58, 12, 58, 14,
	58, 980, 11, 58, 3, 59, 3, 59, 5, 59, 984, 10, 59, 3, 59, 3, 59, 5, 59,
	988, 10, 59, 3, 59, 7, 59, 991, 10, 59, 12, 59, 14, 59, 994, 11, 59, 3,
	60, 3, 60, 5, 60, 998, 10, 60, 7, 60, 1000, 10, 60, 12, 60, 14, 60, 1003,
	11, 60, 3, 60, 3, 60, 3, 61, 3, 61, 3, 61, 3, 61, 7, 61, 1011, 10, 61,
	12, 61, 14, 61, 1014, 11, 61, 3, 62, 3, 62, 3, 62, 5, 62, 1019, 10, 62,
	3, 62, 3, 62, 5, 62, 1023, 10, 62, 3, 62, 3, 62, 3, 62, 3, 62, 3, 62, 5,
	62, 1030, 10, 62, 3, 62, 3, 62, 5, 62, 1034, 10, 62, 3, 62, 3, 62, 5, 62,
	1038, 10, 62, 3, 62, 5, 62, 1041, 10, 62, 3, 63, 3, 63, 3, 63, 3, 63, 3,
	63, 3, 63, 3, 63, 3, 63, 3, 63, 3, 63, 5, 63, 1053, 10, 63, 3, 63, 5, 63,
	1056, 10, 63, 3, 63, 3, 63, 3, 64, 3, 64, 3, 64, 3, 64, 3, 64, 3, 64, 3,
	64, 3, 64, 3, 64, 3, 64, 5, 64, 1070, 10, 64, 3, 65, 3, 65, 5, 65, 1074,
	10, 65, 3, 65, 7, 65, 1077, 10, 65, 12, 65, 14, 65, 1080, 11, 65, 3, 65,
	5, 65, 1083, 10, 65, 3, 65, 5, 65, 1086, 10, 65, 3, 66, 3, 66, 3, 66, 3,
	66, 3, 66, 5, 66, 1093, 10, 66, 3, 66, 3, 66, 5, 66, 1097, 10, 66, 3, 66,
	3, 66, 5, 66, 1101, 10, 66, 3, 66, 3, 66, 3, 66, 3, 66, 3, 66, 5, 66, 1108,
	10, 66, 3, 66, 3, 66, 5, 66, 1112, 10, 66, 3, 66, 3, 66, 5, 66, 1116, 10,
	66, 3, 66, 3, 66, 3, 66, 3, 66, 5, 66, 1122, 10, 66, 3, 66, 3, 66, 5, 66,
	1126, 10, 66, 3, 66, 3, 66, 5, 66, 1130, 10, 66, 3, 66, 3, 66, 3, 66, 3,
	66, 5, 66, 1136, 10, 66, 3, 66, 3, 66, 5, 66, 1140, 10, 66, 3, 66, 3, 66,
	5, 66, 1144, 10, 66, 3, 66, 3, 66, 3, 66, 3, 66, 5, 66, 1150, 10, 66, 3,
	66, 3, 66, 5, 66, 1154, 10, 66, 3, 66, 3, 66, 5, 66, 1158, 10, 66, 3, 66,
	3, 66, 3, 66, 3, 66, 3, 66, 3, 66, 5, 66, 1166, 10, 66, 3, 67, 3, 67, 3,
	67, 3, 67, 3, 67, 3, 67, 5, 67, 1174, 10, 67, 3, 68, 3, 68, 3, 69, 3, 69,
	5, 69, 1180, 10, 69, 3, 69, 3, 69, 5, 69, 1184, 10, 69, 3, 69, 3, 69, 5,
	69, 1188, 10, 69, 3, 69, 3, 69, 5, 69, 1192, 10, 69, 7, 69, 1194, 10, 69,
	12, 69, 14, 69, 1197, 11, 69, 5, 69, 1199, 10, 69, 3, 69, 3, 69, 3, 70,
	3, 70, 5, 70, 1205, 10, 70, 3, 70, 3, 70, 3, 70, 5, 70, 1210, 10, 70, 3,
	70, 3, 70, 3, 70, 5, 70, 1215, 10, 70, 3, 70, 3, 70, 3, 70, 5, 70, 1220,
	10, 70, 3, 70, 3, 70, 3, 70, 5, 70, 1225, 10, 70, 3, 70, 3, 70, 3, 70,
	5, 70, 1230, 10, 70, 3, 70, 5, 70, 1233, 10, 70, 3, 71, 3, 71, 5, 71, 1237,
	10, 71, 3, 71, 3, 71, 5, 71, 1241, 10, 71, 3, 71, 3, 71, 3, 72, 3, 72,
	5, 72, 1247, 10, 72, 3, 72, 6, 72, 1250, 10, 72, 13, 72, 14, 72, 1251,
	3, 73, 3, 73, 5, 73, 1256, 10, 73, 3, 73, 5, 73, 1259, 10, 73, 3, 74, 3,
	74, 3, 74, 3, 74, 3, 74, 3, 74, 3, 75, 3, 75, 5, 75, 1269, 10, 75, 3, 75,
	3, 75, 5, 75, 1273, 10, 75, 3, 75, 3, 75, 5, 75, 1277, 10, 75, 5, 75, 1279,
	10, 75, 3, 75, 3, 75, 5, 75, 1283, 10, 75, 3, 75, 3, 75, 5, 75, 1287, 10,
	75, 3, 75, 3, 75, 5, 75, 1291, 10, 75, 7, 75, 1293, 10, 75, 12, 75, 14,
	75, 1296, 11, 75, 5, 75, 1298, 10, 75, 3, 75, 3, 75, 3, 76, 3, 76, 3, 76,
	3, 76, 5, 76, 1306, 10, 76, 3, 77, 3, 77, 5, 77, 1310, 10, 77, 3, 77, 3,
	77, 5, 77, 1314, 10, 77, 3, 77, 3, 77, 5, 77, 1318, 10, 77, 3, 77, 3, 77,
	5, 77, 1322, 10, 77, 3, 77, 3, 77, 5, 77, 1326, 10, 77, 7, 77, 1328, 10,
	77, 12, 77, 14, 77, 1331, 11, 77, 5, 77, 1333, 10, 77, 3, 77, 3, 77, 3,
	78, 3, 78, 3, 79, 3, 79, 3, 80, 3, 80, 3, 80, 3, 81, 3, 81, 3, 81, 7, 81,
	1347, 10, 81, 12, 81, 14, 81, 1350, 11, 81, 3, 82, 3, 82, 5, 82, 1354,
	10, 82, 3, 82, 3, 82, 5, 82, 1358, 10, 82, 3, 82, 3, 82, 5, 82, 1362, 10,
	82, 3, 82, 5, 82, 1365, 10, 82, 3, 82, 5, 82, 1368, 10, 82, 3, 82, 3, 82,
	3, 83, 3, 83, 5, 83, 1374, 10, 83, 3, 83, 3, 83, 5, 83, 1378, 10, 83, 3,
	83, 3, 83, 5, 83, 1382, 10, 83, 5, 83, 1384, 10, 83, 3, 83, 3, 83, 5, 83,
	1388, 10, 83, 3, 83, 3, 83, 5, 83, 1392, 10, 83, 3, 83, 3, 83, 5, 83, 1396,
	10, 83, 5, 83, 1398, 10, 83, 3, 83, 3, 83, 5, 83, 1402, 10, 83, 3, 83,
	3, 83, 5, 83, 1406, 10, 83, 3, 83, 3, 83, 3, 84, 3, 84, 5, 84, 1412, 10,
	84, 3, 84, 3, 84, 3, 85, 3, 85, 5, 85, 1418, 10, 85, 3, 85, 6, 85, 1421,
	10, 85, 13, 85, 14, 85, 1422, 3, 85, 3, 85, 5, 85, 1427, 10, 85, 3, 85,
	3, 85, 5, 85, 1431, 10, 85, 3, 85, 6, 85, 1434, 10, 85, 13, 85, 14, 85,
	1435, 5, 85, 1438, 10, 85, 3, 85, 5, 85, 1441, 10, 85, 3, 85, 3, 85, 5,
	85, 1445, 10, 85, 3, 85, 5, 85, 1448, 10, 85, 3, 85, 5, 85, 1451, 10, 85,
	3, 85, 3, 85, 3, 86, 3, 86, 5, 86, 1457, 10, 86, 3, 86, 3, 86, 5, 86, 1461,
	10, 86, 3, 86, 3, 86, 5, 86, 1465, 10, 86, 3, 86, 3, 86, 3, 87, 3, 87,
	3, 88, 3, 88, 5, 88, 1473, 10, 88, 3, 89, 3, 89, 5, 89, 1477, 10, 89, 3,
	89, 3, 89, 5, 89, 1481, 10, 89, 3, 89, 3, 89, 5, 89, 1485, 10, 89, 3, 89,
	3, 89, 5, 89, 1489, 10, 89, 3, 89, 3, 89, 5, 89, 1493, 10, 89, 3, 89, 3,
	89, 5, 89, 1497, 10, 89, 3, 89, 3, 89, 5, 89, 1501, 10, 89, 3, 89, 3, 89,
	5, 89, 1505, 10, 89, 7, 89, 1507, 10, 89, 12, 89, 14, 89, 1510, 11, 89,
	5, 89, 1512, 10, 89, 3, 89, 3, 89, 3, 90, 3, 90, 3, 90, 5, 90, 1519, 10,
	90, 3, 91, 3, 91, 5, 91, 1523, 10, 91, 3, 91, 6, 91, 1526, 10, 91, 13,
	91, 14, 91, 1527, 3, 92, 3, 92, 3, 93, 3, 93, 3, 94, 3, 94, 3, 95, 3, 95,
	5, 95, 1538, 10, 95, 3, 96, 3, 96, 3, 97, 3, 97, 3, 98, 3, 98, 3, 99, 3,
	99, 3, 100, 3, 100, 3, 100, 2, 2, 101, 2, 4, 6, 8, 10, 12, 14, 16, 18,
	20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54,
	56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90,
	92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120,
	122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150,
	152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180,
	182, 184, 186, 188, 190, 192, 194, 196, 198, 2, 12, 3, 2, 70, 73, 3, 2,
	15, 16, 3, 2, 89, 90, 3, 2, 99, 101, 3, 2, 109, 110, 6, 2, 48, 60, 63,
	84, 89, 96, 111, 120, 6, 2, 85, 88, 102, 102, 121, 123, 126, 126, 4, 2,
	21, 21, 29, 32, 4, 2, 22, 22, 33, 36, 4, 2, 16, 16, 37, 47, 2, 1767, 2,
	201, 3, 2, 2, 2, 4, 215, 3, 2, 2, 2, 6, 219, 3, 2, 2, 2, 8, 221, 3, 2,
	2, 2, 10, 243, 3, 2, 2, 2, 12, 247, 3, 2, 2, 2, 14, 284, 3, 2, 2, 2, 16,
	308, 3, 2, 2, 2, 18, 319, 3, 2, 2, 2, 20, 324, 3, 2, 2, 2, 22, 328, 3,
	2, 2, 2, 24, 341, 3, 2, 2, 2, 26, 351, 3, 2, 2, 2, 28, 373, 3, 2, 2, 2,
	30, 375, 3, 2, 2, 2, 32, 381, 3, 2, 2, 2, 34, 429, 3, 2, 2, 2, 36, 433,
	3, 2, 2, 2, 38, 453, 3, 2, 2, 2, 40, 473, 3, 2, 2, 2, 42, 475, 3, 2, 2,
	2, 44, 486, 3, 2, 2, 2, 46, 513, 3, 2, 2, 2, 48, 526, 3, 2, 2, 2, 50, 530,
	3, 2, 2, 2, 52, 545, 3, 2, 2, 2, 54, 555, 3, 2, 2, 2, 56, 596, 3, 2, 2,
	2, 58, 605, 3, 2, 2, 2, 60, 607, 3, 2, 2, 2, 62, 622, 3, 2, 2, 2, 64, 626,
	3, 2, 2, 2, 66, 630, 3, 2, 2, 2, 68, 637, 3, 2, 2, 2, 70, 641, 3, 2, 2,
	2, 72, 666, 3, 2, 2, 2, 74, 668, 3, 2, 2, 2, 76, 684, 3, 2, 2, 2, 78, 686,
	3, 2, 2, 2, 80, 710, 3, 2, 2, 2, 82, 780, 3, 2, 2, 2, 84, 782, 3, 2, 2,
	2, 86, 811, 3, 2, 2, 2, 88, 813, 3, 2, 2, 2, 90, 834, 3, 2, 2, 2, 92, 844,
	3, 2, 2, 2, 94, 850, 3, 2, 2, 2, 96, 872, 3, 2, 2, 2, 98, 874, 3, 2, 2,
	2, 100, 876, 3, 2, 2, 2, 102, 878, 3, 2, 2, 2, 104, 888, 3, 2, 2, 2, 106,
	898, 3, 2, 2, 2, 108, 914, 3, 2, 2, 2, 110, 919, 3, 2, 2, 2, 112, 929,
	3, 2, 2, 2, 114, 951, 3, 2, 2, 2, 116, 981, 3, 2, 2, 2, 118, 1001, 3, 2,
	2, 2, 120, 1006, 3, 2, 2, 2, 122, 1040, 3, 2, 2, 2, 124, 1052, 3, 2, 2,
	2, 126, 1069, 3, 2, 2, 2, 128, 1071, 3, 2, 2, 2, 130, 1165, 3, 2, 2, 2,
	132, 1173, 3, 2, 2, 2, 134, 1175, 3, 2, 2, 2, 136, 1177, 3, 2, 2, 2, 138,
	1232, 3, 2, 2, 2, 140, 1234, 3, 2, 2, 2, 142, 1244, 3, 2, 2, 2, 144, 1253,
	3, 2, 2, 2, 146, 1260, 3, 2, 2, 2, 148, 1266, 3, 2, 2, 2, 150, 1305, 3,
	2, 2, 2, 152, 1307, 3, 2, 2, 2, 154, 1336, 3, 2, 2, 2, 156, 1338, 3, 2,
	2, 2, 158, 1340, 3, 2, 2, 2, 160, 1348, 3, 2, 2, 2, 162, 1351, 3, 2, 2,
	2, 164, 1371, 3, 2, 2, 2, 166, 1409, 3, 2, 2, 2, 168, 1437, 3, 2, 2, 2,
	170, 1454, 3, 2, 2, 2, 172, 1468, 3, 2, 2, 2, 174, 1472, 3, 2, 2, 2, 176,
	1474, 3, 2, 2, 2, 178, 1515, 3, 2, 2, 2, 180, 1520, 3, 2, 2, 2, 182, 1529,
	3, 2, 2, 2, 184, 1531, 3, 2, 2, 2, 186, 1533, 3, 2, 2, 2, 188, 1537, 3,
	2, 2, 2, 190, 1539, 3, 2, 2, 2, 192, 1541, 3, 2, 2, 2, 194, 1543, 3, 2,
	2, 2, 196, 1545, 3, 2, 2, 2, 198, 1547, 3, 2, 2, 2, 200, 202, 7, 127, 2,
	2, 201, 200, 3, 2, 2, 2, 201, 202, 3, 2, 2, 2, 202, 203, 3, 2, 2, 2, 203,
	208, 5, 4, 3, 2, 204, 206, 7, 127, 2, 2, 205, 204, 3, 2, 2, 2, 205, 206,
	3, 2, 2, 2, 206, 207, 3, 2, 2, 2, 207, 209, 7, 3, 2, 2, 208, 205, 3, 2,
	2, 2, 208, 209, 3, 2, 2, 2, 209, 211, 3, 2, 2, 2, 210, 212, 7, 127, 2,
	2, 211, 210, 3, 2, 2, 2, 211, 212, 3, 2, 2, 2, 212, 213, 3, 2, 2, 2, 213,
	214, 7, 2, 2, 3, 214, 3, 3, 2, 2, 2, 215, 216, 5, 6, 4, 2, 216, 5, 3, 2,
	2, 2, 217, 220, 5, 8, 5, 2, 218, 220, 5, 44, 23, 2, 219, 217, 3, 2, 2,
	2, 219, 218, 3, 2, 2, 2, 220, 7, 3, 2, 2, 2, 221, 228, 5, 12, 7, 2, 222,
	224, 7, 127, 2, 2, 223, 222, 3, 2, 2, 2, 223, 224, 3, 2, 2, 2, 224, 225,
	3, 2, 2, 2, 225, 227, 5, 10, 6, 2, 226, 223, 3, 2, 2, 2, 227, 230, 3, 2,
	2, 2, 228, 226, 3, 2, 2, 2, 228, 229, 3, 2, 2, 2, 229, 9, 3, 2, 2, 2, 230,
	228, 3, 2, 2, 2, 231, 232, 7, 48, 2, 2, 232, 233, 7, 127, 2, 2, 233, 235,
	7, 49, 2, 2, 234, 236, 7, 127, 2, 2, 235, 234, 3, 2, 2, 2, 235, 236, 3,
	2, 2, 2, 236, 237, 3, 2, 2, 2, 237, 244, 5, 12, 7, 2, 238, 240, 7, 48,
	2, 2, 239, 241, 7, 127, 2, 2, 240, 239, 3, 2, 2, 2, 240, 241, 3, 2, 2,
	2, 241, 242, 3, 2, 2, 2, 242, 244, 5, 12, 7, 2, 243, 231, 3, 2, 2, 2, 243,
	238, 3, 2, 2, 2, 244, 11, 3, 2, 2, 2, 245, 248, 5, 14, 8, 2, 246, 248,
	5, 16, 9, 2, 247, 245, 3, 2, 2, 2, 247, 246, 3, 2, 2, 2, 248, 13, 3, 2,
	2, 2, 249, 251, 5, 20, 11, 2, 250, 252, 7, 127, 2, 2, 251, 250, 3, 2, 2,
	2, 251, 252, 3, 2, 2, 2, 252, 254, 3, 2, 2, 2, 253, 249, 3, 2, 2, 2, 254,
	257, 3, 2, 2, 2, 255, 253, 3, 2, 2, 2, 255, 256, 3, 2, 2, 2, 256, 258,
	3, 2, 2, 2, 257, 255, 3, 2, 2, 2, 258, 285, 5, 52, 27, 2, 259, 261, 5,
	20, 11, 2, 260, 262, 7, 127, 2, 2, 261, 260, 3, 2, 2, 2, 261, 262, 3, 2,
	2, 2, 262, 264, 3, 2, 2, 2, 263, 259, 3, 2, 2, 2, 264, 267, 3, 2, 2, 2,
	265, 263, 3, 2, 2, 2, 265, 266, 3, 2, 2, 2, 266, 268, 3, 2, 2, 2, 267,
	265, 3, 2, 2, 2, 268, 275, 5, 18, 10, 2, 269, 271, 7, 127, 2, 2, 270, 269,
	3, 2, 2, 2, 270, 271, 3, 2, 2, 2, 271, 272, 3, 2, 2, 2, 272, 274, 5, 18,
	10, 2, 273, 270, 3, 2, 2, 2, 274, 277, 3, 2, 2, 2, 275, 273, 3, 2, 2, 2,
	275, 276, 3, 2, 2, 2, 276, 282, 3, 2, 2, 2, 277, 275, 3, 2, 2, 2, 278,
	280, 7, 127, 2, 2, 279, 278, 3, 2, 2, 2, 279, 280, 3, 2, 2, 2, 280, 281,
	3, 2, 2, 2, 281, 283, 5, 52, 27, 2, 282, 279, 3, 2, 2, 2, 282, 283, 3,
	2, 2, 2, 283, 285, 3, 2, 2, 2, 284, 255, 3, 2, 2, 2, 284, 265, 3, 2, 2,
	2, 285, 15, 3, 2, 2, 2, 286, 288, 5, 20, 11, 2, 287, 289, 7, 127, 2, 2,
	288, 287, 3, 2, 2, 2, 288, 289, 3, 2, 2, 2, 289, 291, 3, 2, 2, 2, 290,
	286, 3, 2, 2, 2, 291, 294, 3, 2, 2, 2, 292, 290, 3, 2, 2, 2, 292, 293,
	3, 2, 2, 2, 293, 301, 3, 2, 2, 2, 294, 292, 3, 2, 2, 2, 295, 297, 5, 18,
	10, 2, 296, 298, 7, 127, 2, 2, 297, 296, 3, 2, 2, 2, 297, 298, 3, 2, 2,
	2, 298, 300, 3, 2, 2, 2, 299, 295, 3, 2, 2, 2, 300, 303, 3, 2, 2, 2, 301,
	299, 3, 2, 2, 2, 301, 302, 3, 2, 2, 2, 302, 304, 3, 2, 2, 2, 303, 301,
	3, 2, 2, 2, 304, 306, 5, 50, 26, 2, 305, 307, 7, 127, 2, 2, 306, 305, 3,
	2, 2, 2, 306, 307, 3, 2, 2, 2, 307, 309, 3, 2, 2, 2, 308, 292, 3, 2, 2,
	2, 309, 310, 3, 2, 2, 2, 310, 308, 3, 2, 2, 2, 310, 311, 3, 2, 2, 2, 311,
	312, 3, 2, 2, 2, 312, 313, 5, 14, 8, 2, 313, 17, 3, 2, 2, 2, 314, 320,
	5, 30, 16, 2, 315, 320, 5, 26, 14, 2, 316, 320, 5, 36, 19, 2, 317, 320,
	5, 32, 17, 2, 318, 320, 5, 38, 20, 2, 319, 314, 3, 2, 2, 2, 319, 315, 3,
	2, 2, 2, 319, 316, 3, 2, 2, 2, 319, 317, 3, 2, 2, 2, 319, 318, 3, 2, 2,
	2, 320, 19, 3, 2, 2, 2, 321, 325, 5, 22, 12, 2, 322, 325, 5, 24, 13, 2,
	323, 325, 5, 42, 22, 2, 324, 321, 3, 2, 2, 2, 324, 322, 3, 2, 2, 2, 324,
	323, 3, 2, 2, 2, 325, 21, 3, 2, 2, 2, 326, 327, 7, 50, 2, 2, 327, 329,
	7, 127, 2, 2, 328, 326, 3, 2, 2, 2, 328, 329, 3, 2, 2, 2, 329, 330, 3,
	2, 2, 2, 330, 332, 7, 51, 2, 2, 331, 333, 7, 127, 2, 2, 332, 331, 3, 2,
	2, 2, 332, 333, 3, 2, 2, 2, 333, 334, 3, 2, 2, 2, 334, 339, 5, 70, 36,
	2, 335, 337, 7, 127, 2, 2, 336, 335, 3, 2, 2, 2, 336, 337, 3, 2, 2, 2,
	337, 338, 3, 2, 2, 2, 338, 340, 5, 68, 35, 2, 339, 336, 3, 2, 2, 2, 339,
	340, 3, 2, 2, 2, 340, 23, 3, 2, 2, 2, 341, 343, 7, 52, 2, 2, 342, 344,
	7, 127, 2, 2, 343, 342, 3, 2, 2, 2, 343, 344, 3, 2, 2, 2, 344, 345, 3,
	2, 2, 2, 345, 346, 5, 100, 51, 2, 346, 347, 7, 127, 2, 2, 347, 348, 7,
	53, 2, 2, 348, 349, 7, 127, 2, 2, 349, 350, 5, 172, 87, 2, 350, 25, 3,
	2, 2, 2, 351, 353, 7, 54, 2, 2, 352, 354, 7, 127, 2, 2, 353, 352, 3, 2,
	2, 2, 353, 354, 3, 2, 2, 2, 354, 355, 3, 2, 2, 2, 355, 360, 5, 72, 37,
	2, 356, 357, 7, 127, 2, 2, 357, 359, 5, 28, 15, 2, 358, 356, 3, 2, 2, 2,
	359, 362, 3, 2, 2, 2, 360, 358, 3, 2, 2, 2, 360, 361, 3, 2, 2, 2, 361,
	27, 3, 2, 2, 2, 362, 360, 3, 2, 2, 2, 363, 364, 7, 55, 2, 2, 364, 365,
	7, 127, 2, 2, 365, 366, 7, 51, 2, 2, 366, 367, 7, 127, 2, 2, 367, 374,
	5, 32, 17, 2, 368, 369, 7, 55, 2, 2, 369, 370, 7, 127, 2, 2, 370, 371,
	7, 56, 2, 2, 371, 372, 7, 127, 2, 2, 372, 374, 5, 32, 17, 2, 373, 363,
	3, 2, 2, 2, 373, 368, 3, 2, 2, 2, 374, 29, 3, 2, 2, 2, 375, 377, 7, 56,
	2, 2, 376, 378, 7, 127, 2, 2, 377, 376, 3, 2, 2, 2, 377, 378, 3, 2, 2,
	2, 378, 379, 3, 2, 2, 2, 379, 380, 5, 70, 36, 2, 380, 31, 3, 2, 2, 2, 381,
	383, 7, 57, 2, 2, 382, 384, 7, 127, 2, 2, 383, 382, 3, 2, 2, 2, 383, 384,
	3, 2, 2, 2, 384, 385, 3, 2, 2, 2, 385, 390, 5, 34, 18, 2, 386, 387, 7,
	4, 2, 2, 387, 389, 5, 34, 18, 2, 388, 386, 3, 2, 2, 2, 389, 392, 3, 2,
	2, 2, 390, 388, 3, 2, 2, 2, 390, 391, 3, 2, 2, 2, 391, 33, 3, 2, 2, 2,
	392, 390, 3, 2, 2, 2, 393, 395, 5, 180, 91, 2, 394, 396, 7, 127, 2, 2,
	395, 394, 3, 2, 2, 2, 395, 396, 3, 2, 2, 2, 396, 397, 3, 2, 2, 2, 397,
	399, 7, 5, 2, 2, 398, 400, 7, 127, 2, 2, 399, 398, 3, 2, 2, 2, 399, 400,
	3, 2, 2, 2, 400, 401, 3, 2, 2, 2, 401, 402, 5, 100, 51, 2, 402, 430, 3,
	2, 2, 2, 403, 405, 5, 172, 87, 2, 404, 406, 7, 127, 2, 2, 405, 404, 3,
	2, 2, 2, 405, 406, 3, 2, 2, 2, 406, 407, 3, 2, 2, 2, 407, 409, 7, 5, 2,
	2, 408, 410, 7, 127, 2, 2, 409, 408, 3, 2, 2, 2, 409, 410, 3, 2, 2, 2,
	410, 411, 3, 2, 2, 2, 411, 412, 5, 100, 51, 2, 412, 430, 3, 2, 2, 2, 413,
	415, 5, 172, 87, 2, 414, 416, 7, 127, 2, 2, 415, 414, 3, 2, 2, 2, 415,
	416, 3, 2, 2, 2, 416, 417, 3, 2, 2, 2, 417, 419, 7, 6, 2, 2, 418, 420,
	7, 127, 2, 2, 419, 418, 3, 2, 2, 2, 419, 420, 3, 2, 2, 2, 420, 421, 3,
	2, 2, 2, 421, 422, 5, 100, 51, 2, 422, 430, 3, 2, 2, 2, 423, 425, 5, 172,
	87, 2, 424, 426, 7, 127, 2, 2, 425, 424, 3, 2, 2, 2, 425, 426, 3, 2, 2,
	2, 426, 427, 3, 2, 2, 2, 427, 428, 5, 90, 46, 2, 428, 430, 3, 2, 2, 2,
	429, 393, 3, 2, 2, 2, 429, 403, 3, 2, 2, 2, 429, 413, 3, 2, 2, 2, 429,
	423, 3, 2, 2, 2, 430, 35, 3, 2, 2, 2, 431, 432, 7, 58, 2, 2, 432, 434,
	7, 127, 2, 2, 433, 431, 3, 2, 2, 2, 433, 434, 3, 2, 2, 2, 434, 435, 3,
	2, 2, 2, 435, 437, 7, 59, 2, 2, 436, 438, 7, 127, 2, 2, 437, 436, 3, 2,
	2, 2, 437, 438, 3, 2, 2, 2, 438, 439, 3, 2, 2, 2, 439, 450, 5, 100, 51,
	2, 440, 442, 7, 127, 2, 2, 441, 440, 3, 2, 2, 2, 441, 442, 3, 2, 2, 2,
	442, 443, 3, 2, 2, 2, 443, 445, 7, 4, 2, 2, 444, 446, 7, 127, 2, 2, 445,
	444, 3, 2, 2, 2, 445, 446, 3, 2, 2, 2, 446, 447, 3, 2, 2, 2, 447, 449,
	5, 100, 51, 2, 448, 441, 3, 2, 2, 2, 449, 452, 3, 2, 2, 2, 450, 448, 3,
	2, 2, 2, 450, 451, 3, 2, 2, 2, 451, 37, 3, 2, 2, 2, 452, 450, 3, 2, 2,
	2, 453, 454, 7, 60, 2, 2, 454, 455, 7, 127, 2, 2, 455, 466, 5, 40, 21,
	2, 456, 458, 7, 127, 2, 2, 457, 456, 3, 2, 2, 2, 457, 458, 3, 2, 2, 2,
	458, 459, 3, 2, 2, 2, 459, 461, 7, 4, 2, 2, 460, 462, 7, 127, 2, 2, 461,
	460, 3, 2, 2, 2, 461, 462, 3, 2, 2, 2, 462, 463, 3, 2, 2, 2, 463, 465,
	5, 40, 21, 2, 464, 457, 3, 2, 2, 2, 465, 468, 3, 2, 2, 2, 466, 464, 3,
	2, 2, 2, 466, 467, 3, 2, 2, 2, 467, 39, 3, 2, 2, 2, 468, 466, 3, 2, 2,
	2, 469, 470, 5, 172, 87, 2, 470, 471, 5, 90, 46, 2, 471, 474, 3, 2, 2,
	2, 472, 474, 5, 180, 91, 2, 473, 469, 3, 2, 2, 2, 473, 472, 3, 2, 2, 2,
	474, 41, 3, 2, 2, 2, 475, 476, 7, 61, 2, 2, 476, 477, 7, 127, 2, 2, 477,
	484, 5, 152, 77, 2, 478, 480, 7, 127, 2, 2, 479, 478, 3, 2, 2, 2, 479,
	480, 3, 2, 2, 2, 480, 481, 3, 2, 2, 2, 481, 482, 7, 62, 2, 2, 482, 483,
	7, 127, 2, 2, 483, 485, 5, 46, 24, 2, 484, 479, 3, 2, 2, 2, 484, 485, 3,
	2, 2, 2, 485, 43, 3, 2, 2, 2, 486, 487, 7, 61, 2, 2, 487, 490, 7, 127,
	2, 2, 488, 491, 5, 152, 77, 2, 489, 491, 5, 154, 78, 2, 490, 488, 3, 2,
	2, 2, 490, 489, 3, 2, 2, 2, 491, 496, 3, 2, 2, 2, 492, 493, 7, 127, 2,
	2, 493, 494, 7, 62, 2, 2, 494, 495, 7, 127, 2, 2, 495, 497, 5, 46, 24,
	2, 496, 492, 3, 2, 2, 2, 496, 497, 3, 2, 2, 2, 497, 45, 3, 2, 2, 2, 498,
	514, 7, 7, 2, 2, 499, 510, 5, 48, 25, 2, 500, 502, 7, 127, 2, 2, 501, 500,
	3, 2, 2, 2, 501, 502, 3, 2, 2, 2, 502, 503, 3, 2, 2, 2, 503, 505, 7, 4,
	2, 2, 504, 506, 7, 127, 2, 2, 505, 504, 3, 2, 2, 2, 505, 506, 3, 2, 2,
	2, 506, 507, 3, 2, 2, 2, 507, 509, 5, 48, 25, 2, 508, 501, 3, 2, 2, 2,
	509, 512, 3, 2, 2, 2, 510, 508, 3, 2, 2, 2, 510, 511, 3, 2, 2, 2, 511,
	514, 3, 2, 2, 2, 512, 510, 3, 2, 2, 2, 513, 498, 3, 2, 2, 2, 513, 499,
	3, 2, 2, 2, 514, 519, 3, 2, 2, 2, 515, 517, 7, 127, 2, 2, 516, 515, 3,
	2, 2, 2, 516, 517, 3, 2, 2, 2, 517, 518, 3, 2, 2, 2, 518, 520, 5, 68, 35,
	2, 519, 516, 3, 2, 2, 2, 519, 520, 3, 2, 2, 2, 520, 47, 3, 2, 2, 2, 521,
	522, 5, 156, 79, 2, 522, 523, 7, 127, 2, 2, 523, 524, 7, 53, 2, 2, 524,
	525, 7, 127, 2, 2, 525, 527, 3, 2, 2, 2, 526, 521, 3, 2, 2, 2, 526, 527,
	3, 2, 2, 2, 527, 528, 3, 2, 2, 2, 528, 529, 5, 172, 87, 2, 529, 49, 3,
	2, 2, 2, 530, 535, 7, 63, 2, 2, 531, 533, 7, 127, 2, 2, 532, 531, 3, 2,
	2, 2, 532, 533, 3, 2, 2, 2, 533, 534, 3, 2, 2, 2, 534, 536, 7, 64, 2, 2,
	535, 532, 3, 2, 2, 2, 535, 536, 3, 2, 2, 2, 536, 537, 3, 2, 2, 2, 537,
	538, 7, 127, 2, 2, 538, 543, 5, 54, 28, 2, 539, 541, 7, 127, 2, 2, 540,
	539, 3, 2, 2, 2, 540, 541, 3, 2, 2, 2, 541, 542, 3, 2, 2, 2, 542, 544,
	5, 68, 35, 2, 543, 540, 3, 2, 2, 2, 543, 544, 3, 2, 2, 2, 544, 51, 3, 2,
	2, 2, 545, 550, 7, 65, 2, 2, 546, 548, 7, 127, 2, 2, 547, 546, 3, 2, 2,
	2, 547, 548, 3, 2, 2, 2, 548, 549, 3, 2, 2, 2, 549, 551, 7, 64, 2, 2, 550,
	547, 3, 2, 2, 2, 550, 551, 3, 2, 2, 2, 551, 552, 3, 2, 2, 2, 552, 553,
	7, 127, 2, 2, 553, 554, 5, 54, 28, 2, 554, 53, 3, 2, 2, 2, 555, 558, 5,
	56, 29, 2, 556, 557, 7, 127, 2, 2, 557, 559, 5, 60, 31, 2, 558, 556, 3,
	2, 2, 2, 558, 559, 3, 2, 2, 2, 559, 562, 3, 2, 2, 2, 560, 561, 7, 127,
	2, 2, 561, 563, 5, 62, 32, 2, 562, 560, 3, 2, 2, 2, 562, 563, 3, 2, 2,
	2, 563, 566, 3, 2, 2, 2, 564, 565, 7, 127, 2, 2, 565, 567, 5, 64, 33, 2,
	566, 564, 3, 2, 2, 2, 566, 567, 3, 2, 2, 2, 567, 55, 3, 2, 2, 2, 568, 579,
	7, 7, 2, 2, 569, 571, 7, 127, 2, 2, 570, 569, 3, 2, 2, 2, 570, 571, 3,
	2, 2, 2, 571, 572, 3, 2, 2, 2, 572, 574, 7, 4, 2, 2, 573, 575, 7, 127,
	2, 2, 574, 573, 3, 2, 2, 2, 574, 575, 3, 2, 2, 2, 575, 576, 3, 2, 2, 2,
	576, 578, 5, 58, 30, 2, 577, 570, 3, 2, 2, 2, 578, 581, 3, 2, 2, 2, 579,
	577, 3, 2, 2, 2, 579, 580, 3, 2, 2, 2, 580, 597, 3, 2, 2, 2, 581, 579,
	3, 2, 2, 2, 582, 593, 5, 58, 30, 2, 583, 585, 7, 127, 2, 2, 584, 583, 3,
	2, 2, 2, 584, 585, 3, 2, 2, 2, 585, 586, 3, 2, 2, 2, 586, 588, 7, 4, 2,
	2, 587, 589, 7, 127, 2, 2, 588, 587, 3, 2, 2, 2, 588, 589, 3, 2, 2, 2,
	589, 590, 3, 2, 2, 2, 590, 592, 5, 58, 30, 2, 591, 584, 3, 2, 2, 2, 592,
	595, 3, 2, 2, 2, 593, 591, 3, 2, 2, 2, 593, 594, 3, 2, 2, 2, 594, 597,
	3, 2, 2, 2, 595, 593, 3, 2, 2, 2, 596, 568, 3, 2, 2, 2, 596, 582, 3, 2,
	2, 2, 597, 57, 3, 2, 2, 2, 598, 599, 5, 100, 51, 2, 599, 600, 7, 127, 2,
	2, 600, 601, 7, 53, 2, 2, 601, 602, 7, 127, 2, 2, 602, 603, 5, 172, 87,
	2, 603, 606, 3, 2, 2, 2, 604, 606, 5, 100, 51, 2, 605, 598, 3, 2, 2, 2,
	605, 604, 3, 2, 2, 2, 606, 59, 3, 2, 2, 2, 607, 608, 7, 66, 2, 2, 608,
	609, 7, 127, 2, 2, 609, 610, 7, 67, 2, 2, 610, 611, 7, 127, 2, 2, 611,
	619, 5, 66, 34, 2, 612, 614, 7, 4, 2, 2, 613, 615, 7, 127, 2, 2, 614, 613,
	3, 2, 2, 2, 614, 615, 3, 2, 2, 2, 615, 616, 3, 2, 2, 2, 616, 618, 5, 66,
	34, 2, 617, 612, 3, 2, 2, 2, 618, 621, 3, 2, 2, 2, 619, 617, 3, 2, 2, 2,
	619, 620, 3, 2, 2, 2, 620, 61, 3, 2, 2, 2, 621, 619, 3, 2, 2, 2, 622, 623,
	7, 68, 2, 2, 623, 624, 7, 127, 2, 2, 624, 625, 5, 100, 51, 2, 625, 63,
	3, 2, 2, 2, 626, 627, 7, 69, 2, 2, 627, 628, 7, 127, 2, 2, 628, 629, 5,
	100, 51, 2, 629, 65, 3, 2, 2, 2, 630, 635, 5, 100, 51, 2, 631, 633, 7,
	127, 2, 2, 632, 631, 3, 2, 2, 2, 632, 633, 3, 2, 2, 2, 633, 634, 3, 2,
	2, 2, 634, 636, 9, 2, 2, 2, 635, 632, 3, 2, 2, 2, 635, 636, 3, 2, 2, 2,
	636, 67, 3, 2, 2, 2, 637, 638, 7, 74, 2, 2, 638, 639, 7, 127, 2, 2, 639,
	640, 5, 100, 51, 2, 640, 69, 3, 2, 2, 2, 641, 652, 5, 72, 37, 2, 642, 644,
	7, 127, 2, 2, 643, 642, 3, 2, 2, 2, 643, 644, 3, 2, 2, 2, 644, 645, 3,
	2, 2, 2, 645, 647, 7, 4, 2, 2, 646, 648, 7, 127, 2, 2, 647, 646, 3, 2,
	2, 2, 647, 648, 3, 2, 2, 2, 648, 649, 3, 2, 2, 2, 649, 651, 5, 72, 37,
	2, 650, 643, 3, 2, 2, 2, 651, 654, 3, 2, 2, 2, 652, 650, 3, 2, 2, 2, 652,
	653, 3, 2, 2, 2, 653, 71, 3, 2, 2, 2, 654, 652, 3, 2, 2, 2, 655, 657, 5,
	172, 87, 2, 656, 658, 7, 127, 2, 2, 657, 656, 3, 2, 2, 2, 657, 658, 3,
	2, 2, 2, 658, 659, 3, 2, 2, 2, 659, 661, 7, 5, 2, 2, 660, 662, 7, 127,
	2, 2, 661, 660, 3, 2, 2, 2, 661, 662, 3, 2, 2, 2, 662, 663, 3, 2, 2, 2,
	663, 664, 5, 74, 38, 2, 664, 667, 3, 2, 2, 2, 665, 667, 5, 74, 38, 2, 666,
	655, 3, 2, 2, 2, 666, 665, 3, 2, 2, 2, 667, 73, 3, 2, 2, 2, 668, 669, 5,
	76, 39, 2, 669, 75, 3, 2, 2, 2, 670, 677, 5, 78, 40, 2, 671, 673, 7, 127,
	2, 2, 672, 671, 3, 2, 2, 2, 672, 673, 3, 2, 2, 2, 673, 674, 3, 2, 2, 2,
	674, 676, 5, 80, 41, 2, 675, 672, 3, 2, 2, 2, 676, 679, 3, 2, 2, 2, 677,
	675, 3, 2, 2, 2, 677, 678, 3, 2, 2, 2, 678, 685, 3, 2, 2, 2, 679, 677,
	3, 2, 2, 2, 680, 681, 7, 8, 2, 2, 681, 682, 5, 76, 39, 2, 682, 683, 7,
	9, 2, 2, 683, 685, 3, 2, 2, 2, 684, 670, 3, 2, 2, 2, 684, 680, 3, 2, 2,
	2, 685, 77, 3, 2, 2, 2, 686, 688, 7, 8, 2, 2, 687, 689, 7, 127, 2, 2, 688,
	687, 3, 2, 2, 2, 688, 689, 3, 2, 2, 2, 689, 694, 3, 2, 2, 2, 690, 692,
	5, 172, 87, 2, 691, 693, 7, 127, 2, 2, 692, 691, 3, 2, 2, 2, 692, 693,
	3, 2, 2, 2, 693, 695, 3, 2, 2, 2, 694, 690, 3, 2, 2, 2, 694, 695, 3, 2,
	2, 2, 695, 700, 3, 2, 2, 2, 696, 698, 5, 90, 46, 2, 697, 699, 7, 127, 2,
	2, 698, 697, 3, 2, 2, 2, 698, 699, 3, 2, 2, 2, 699, 701, 3, 2, 2, 2, 700,
	696, 3, 2, 2, 2, 700, 701, 3, 2, 2, 2, 701, 706, 3, 2, 2, 2, 702, 704,
	5, 86, 44, 2, 703, 705, 7, 127, 2, 2, 704, 703, 3, 2, 2, 2, 704, 705, 3,
	2, 2, 2, 705, 707, 3, 2, 2, 2, 706, 702, 3, 2, 2, 2, 706, 707, 3, 2, 2,
	2, 707, 708, 3, 2, 2, 2, 708, 709, 7, 9, 2, 2, 709, 79, 3, 2, 2, 2, 710,
	712, 5, 82, 42, 2, 711, 713, 7, 127, 2, 2, 712, 711, 3, 2, 2, 2, 712, 713,
	3, 2, 2, 2, 713, 714, 3, 2, 2, 2, 714, 715, 5, 78, 40, 2, 715, 81, 3, 2,
	2, 2, 716, 718, 5, 194, 98, 2, 717, 719, 7, 127, 2, 2, 718, 717, 3, 2,
	2, 2, 718, 719, 3, 2, 2, 2, 719, 720, 3, 2, 2, 2, 720, 722, 5, 198, 100,
	2, 721, 723, 7, 127, 2, 2, 722, 721, 3, 2, 2, 2, 722, 723, 3, 2, 2, 2,
	723, 725, 3, 2, 2, 2, 724, 726, 5, 84, 43, 2, 725, 724, 3, 2, 2, 2, 725,
	726, 3, 2, 2, 2, 726, 728, 3, 2, 2, 2, 727, 729, 7, 127, 2, 2, 728, 727,
	3, 2, 2, 2, 728, 729, 3, 2, 2, 2, 729, 730, 3, 2, 2, 2, 730, 732, 5, 198,
	100, 2, 731, 733, 7, 127, 2, 2, 732, 731, 3, 2, 2, 2, 732, 733, 3, 2, 2,
	2, 733, 734, 3, 2, 2, 2, 734, 735, 5, 196, 99, 2, 735, 781, 3, 2, 2, 2,
	736, 738, 5, 194, 98, 2, 737, 739, 7, 127, 2, 2, 738, 737, 3, 2, 2, 2,
	738, 739, 3, 2, 2, 2, 739, 740, 3, 2, 2, 2, 740, 742, 5, 198, 100, 2, 741,
	743, 7, 127, 2, 2, 742, 741, 3, 2, 2, 2, 742, 743, 3, 2, 2, 2, 743, 745,
	3, 2, 2, 2, 744, 746, 5, 84, 43, 2, 745, 744, 3, 2, 2, 2, 745, 746, 3,
	2, 2, 2, 746, 748, 3, 2, 2, 2, 747, 749, 7, 127, 2, 2, 748, 747, 3, 2,
	2, 2, 748, 749, 3, 2, 2, 2, 749, 750, 3, 2, 2, 2, 750, 751, 5, 198, 100,
	2, 751, 781, 3, 2, 2, 2, 752, 754, 5, 198, 100, 2, 753, 755, 7, 127, 2,
	2, 754, 753, 3, 2, 2, 2, 754, 755, 3, 2, 2, 2, 755, 757, 3, 2, 2, 2, 756,
	758, 5, 84, 43, 2, 757, 756, 3, 2, 2, 2, 757, 758, 3, 2, 2, 2, 758, 760,
	3, 2, 2, 2, 759, 761, 7, 127, 2, 2, 760, 759, 3, 2, 2, 2, 760, 761, 3,
	2, 2, 2, 761, 762, 3, 2, 2, 2, 762, 764, 5, 198, 100, 2, 763, 765, 7, 127,
	2, 2, 764, 763, 3, 2, 2, 2, 764, 765, 3, 2, 2, 2, 765, 766, 3, 2, 2, 2,
	766, 767, 5, 196, 99, 2, 767, 781, 3, 2, 2, 2, 768, 770, 5, 198, 100, 2,
	769, 771, 7, 127, 2, 2, 770, 769, 3, 2, 2, 2, 770, 771, 3, 2, 2, 2, 771,
	773, 3, 2, 2, 2, 772, 774, 5, 84, 43, 2, 773, 772, 3, 2, 2, 2, 773, 774,
	3, 2, 2, 2, 774, 776, 3, 2, 2, 2, 775, 777, 7, 127, 2, 2, 776, 775, 3,
	2, 2, 2, 776, 777, 3, 2, 2, 2, 777, 778, 3, 2, 2, 2, 778, 779, 5, 198,
	100, 2, 779, 781, 3, 2, 2, 2, 780, 716, 3, 2, 2, 2, 780, 736, 3, 2, 2,
	2, 780, 752, 3, 2, 2, 2, 780, 768, 3, 2, 2, 2, 781, 83, 3, 2, 2, 2, 782,
	784, 7, 10, 2, 2, 783, 785, 7, 127, 2, 2, 784, 783, 3, 2, 2, 2, 784, 785,
	3, 2, 2, 2, 785, 790, 3, 2, 2, 2, 786, 788, 5, 172, 87, 2, 787, 789, 7,
	127, 2, 2, 788, 787, 3, 2, 2, 2, 788, 789, 3, 2, 2, 2, 789, 791, 3, 2,
	2, 2, 790, 786, 3, 2, 2, 2, 790, 791, 3, 2, 2, 2, 791, 796, 3, 2, 2, 2,
	792, 794, 5, 88, 45, 2, 793, 795, 7, 127, 2, 2, 794, 793, 3, 2, 2, 2, 794,
	795, 3, 2, 2, 2, 795, 797, 3, 2, 2, 2, 796, 792, 3, 2, 2, 2, 796, 797,
	3, 2, 2, 2, 797, 799, 3, 2, 2, 2, 798, 800, 5, 94, 48, 2, 799, 798, 3,
	2, 2, 2, 799, 800, 3, 2, 2, 2, 800, 805, 3, 2, 2, 2, 801, 803, 5, 86, 44,
	2, 802, 804, 7, 127, 2, 2, 803, 802, 3, 2, 2, 2, 803, 804, 3, 2, 2, 2,
	804, 806, 3, 2, 2, 2, 805, 801, 3, 2, 2, 2, 805, 806, 3, 2, 2, 2, 806,
	807, 3, 2, 2, 2, 807, 808, 7, 11, 2, 2, 808, 85, 3, 2, 2, 2, 809, 812,
	5, 176, 89, 2, 810, 812, 5, 178, 90, 2, 811, 809, 3, 2, 2, 2, 811, 810,
	3, 2, 2, 2, 812, 87, 3, 2, 2, 2, 813, 815, 7, 12, 2, 2, 814, 816, 7, 127,
	2, 2, 815, 814, 3, 2, 2, 2, 815, 816, 3, 2, 2, 2, 816, 817, 3, 2, 2, 2,
	817, 831, 5, 98, 50, 2, 818, 820, 7, 127, 2, 2, 819, 818, 3, 2, 2, 2, 819,
	820, 3, 2, 2, 2, 820, 821, 3, 2, 2, 2, 821, 823, 7, 13, 2, 2, 822, 824,
	7, 12, 2, 2, 823, 822, 3, 2, 2, 2, 823, 824, 3, 2, 2, 2, 824, 826, 3, 2,
	2, 2, 825, 827, 7, 127, 2, 2, 826, 825, 3, 2, 2, 2, 826, 827, 3, 2, 2,
	2, 827, 828, 3, 2, 2, 2, 828, 830, 5, 98, 50, 2, 829, 819, 3, 2, 2, 2,
	830, 833, 3, 2, 2, 2, 831, 829, 3, 2, 2, 2, 831, 832, 3, 2, 2, 2, 832,
	89, 3, 2, 2, 2, 833, 831, 3, 2, 2, 2, 834, 841, 5, 92, 47, 2, 835, 837,
	7, 127, 2, 2, 836, 835, 3, 2, 2, 2, 836, 837, 3, 2, 2, 2, 837, 838, 3,
	2, 2, 2, 838, 840, 5, 92, 47, 2, 839, 836, 3, 2, 2, 2, 840, 843, 3, 2,
	2, 2, 841, 839, 3, 2, 2, 2, 841, 842, 3, 2, 2, 2, 842, 91, 3, 2, 2, 2,
	843, 841, 3, 2, 2, 2, 844, 846, 7, 12, 2, 2, 845, 847, 7, 127, 2, 2, 846,
	845, 3, 2, 2, 2, 846, 847, 3, 2, 2, 2, 847, 848, 3, 2, 2, 2, 848, 849,
	5, 96, 49, 2, 849, 93, 3, 2, 2, 2, 850, 852, 7, 7, 2, 2, 851, 853, 7, 127,
	2, 2, 852, 851, 3, 2, 2, 2, 852, 853, 3, 2, 2, 2, 853, 858, 3, 2, 2, 2,
	854, 856, 5, 184, 93, 2, 855, 857, 7, 127, 2, 2, 856, 855, 3, 2, 2, 2,
	856, 857, 3, 2, 2, 2, 857, 859, 3, 2, 2, 2, 858, 854, 3, 2, 2, 2, 858,
	859, 3, 2, 2, 2, 859, 870, 3, 2, 2, 2, 860, 862, 7, 14, 2, 2, 861, 863,
	7, 127, 2, 2, 862, 861, 3, 2, 2, 2, 862, 863, 3, 2, 2, 2, 863, 868, 3,
	2, 2, 2, 864, 866, 5, 184, 93, 2, 865, 867, 7, 127, 2, 2, 866, 865, 3,
	2, 2, 2, 866, 867, 3, 2, 2, 2, 867, 869, 3, 2, 2, 2, 868, 864, 3, 2, 2,
	2, 868, 869, 3, 2, 2, 2, 869, 871, 3, 2, 2, 2, 870, 860, 3, 2, 2, 2, 870,
	871, 3, 2, 2, 2, 871, 95, 3, 2, 2, 2, 872, 873, 5, 188, 95, 2, 873, 97,
	3, 2, 2, 2, 874, 875, 5, 188, 95, 2, 875, 99, 3, 2, 2, 2, 876, 877, 5,
	102, 52, 2, 877, 101, 3, 2, 2, 2, 878, 885, 5, 104, 53, 2, 879, 880, 7,
	127, 2, 2, 880, 881, 7, 75, 2, 2, 881, 882, 7, 127, 2, 2, 882, 884, 5,
	104, 53, 2, 883, 879, 3, 2, 2, 2, 884, 887, 3, 2, 2, 2, 885, 883, 3, 2,
	2, 2, 885, 886, 3, 2, 2, 2, 886, 103, 3, 2, 2, 2, 887, 885, 3, 2, 2, 2,
	888, 895, 5, 106, 54, 2, 889, 890, 7, 127, 2, 2, 890, 891, 7, 76, 2, 2,
	891, 892, 7, 127, 2, 2, 892, 894, 5, 106, 54, 2, 893, 889, 3, 2, 2, 2,
	894, 897, 3, 2, 2, 2, 895, 893, 3, 2, 2, 2, 895, 896, 3, 2, 2, 2, 896,
	105, 3, 2, 2, 2, 897, 895, 3, 2, 2, 2, 898, 905, 5, 108, 55, 2, 899, 900,
	7, 127, 2, 2, 900, 901, 7, 77, 2, 2, 901, 902, 7, 127, 2, 2, 902, 904,
	5, 108, 55, 2, 903, 899, 3, 2, 2, 2, 904, 907, 3, 2, 2, 2, 905, 903, 3,
	2, 2, 2, 905, 906, 3, 2, 2, 2, 906, 107, 3, 2, 2, 2, 907, 905, 3, 2, 2,
	2, 908, 910, 7, 78, 2, 2, 909, 911, 7, 127, 2, 2, 910, 909, 3, 2, 2, 2,
	910, 911, 3, 2, 2, 2, 911, 913, 3, 2, 2, 2, 912, 908, 3, 2, 2, 2, 913,
	916, 3, 2, 2, 2, 914, 912, 3, 2, 2, 2, 914, 915, 3, 2, 2, 2, 915, 917,
	3, 2, 2, 2, 916, 914, 3, 2, 2, 2, 917, 918, 5, 110, 56, 2, 918, 109, 3,
	2, 2, 2, 919, 926, 5, 112, 57, 2, 920, 922, 7, 127, 2, 2, 921, 920, 3,
	2, 2, 2, 921, 922, 3, 2, 2, 2, 922, 923, 3, 2, 2, 2, 923, 925, 5, 138,
	70, 2, 924, 921, 3, 2, 2, 2, 925, 928, 3, 2, 2, 2, 926, 924, 3, 2, 2, 2,
	926, 927, 3, 2, 2, 2, 927, 111, 3, 2, 2, 2, 928, 926, 3, 2, 2, 2, 929,
	948, 5, 114, 58, 2, 930, 932, 7, 127, 2, 2, 931, 930, 3, 2, 2, 2, 931,
	932, 3, 2, 2, 2, 932, 933, 3, 2, 2, 2, 933, 935, 7, 15, 2, 2, 934, 936,
	7, 127, 2, 2, 935, 934, 3, 2, 2, 2, 935, 936, 3, 2, 2, 2, 936, 937, 3,
	2, 2, 2, 937, 947, 5, 114, 58, 2, 938, 940, 7, 127, 2, 2, 939, 938, 3,
	2, 2, 2, 939, 940, 3, 2, 2, 2, 940, 941, 3, 2, 2, 2, 941, 943, 7, 16, 2,
	2, 942, 944, 7, 127, 2, 2, 943, 942, 3, 2, 2, 2, 943, 944, 3, 2, 2, 2,
	944, 945, 3, 2, 2, 2, 945, 947, 5, 114, 58, 2, 946, 931, 3, 2, 2, 2, 946,
	939, 3, 2, 2, 2, 947, 950, 3, 2, 2, 2, 948, 946, 3, 2, 2, 2, 948, 949,
	3, 2, 2, 2, 949, 113, 3, 2, 2, 2, 950, 948, 3, 2, 2, 2, 951, 978, 5, 116,
	59, 2, 952, 954, 7, 127, 2, 2, 953, 952, 3, 2, 2, 2, 953, 954, 3, 2, 2,
	2, 954, 955, 3, 2, 2, 2, 955, 957, 7, 7, 2, 2, 956, 958, 7, 127, 2, 2,
	957, 956, 3, 2, 2, 2, 957, 958, 3, 2, 2, 2, 958, 959, 3, 2, 2, 2, 959,
	977, 5, 116, 59, 2, 960, 962, 7, 127, 2, 2, 961, 960, 3, 2, 2, 2, 961,
	962, 3, 2, 2, 2, 962, 963, 3, 2, 2, 2, 963, 965, 7, 17, 2, 2, 964, 966,
	7, 127, 2, 2, 965, 964, 3, 2, 2, 2, 965, 966, 3, 2, 2, 2, 966, 967, 3,
	2, 2, 2, 967, 977, 5, 116, 59, 2, 968, 970, 7, 127, 2, 2, 969, 968, 3,
	2, 2, 2, 969, 970, 3, 2, 2, 2, 970, 971, 3, 2, 2, 2, 971, 973, 7, 18, 2,
	2, 972, 974, 7, 127, 2, 2, 973, 972, 3, 2, 2, 2, 973, 974, 3, 2, 2, 2,
	974, 975, 3, 2, 2, 2, 975, 977, 5, 116, 59, 2, 976, 953, 3, 2, 2, 2, 976,
	961, 3, 2, 2, 2, 976, 969, 3, 2, 2, 2, 977, 980, 3, 2, 2, 2, 978, 976,
	3, 2, 2, 2, 978, 979, 3, 2, 2, 2, 979, 115, 3, 2, 2, 2, 980, 978, 3, 2,
	2, 2, 981, 992, 5, 118, 60, 2, 982, 984, 7, 127, 2, 2, 983, 982, 3, 2,
	2, 2, 983, 984, 3, 2, 2, 2, 984, 985, 3, 2, 2, 2, 985, 987, 7, 19, 2, 2,
	986, 988, 7, 127, 2, 2, 987, 986, 3, 2, 2, 2, 987, 988, 3, 2, 2, 2, 988,
	989, 3, 2, 2, 2, 989, 991, 5, 118, 60, 2, 990, 983, 3, 2, 2, 2, 991, 994,
	3, 2, 2, 2, 992, 990, 3, 2, 2, 2, 992, 993, 3, 2, 2, 2, 993, 117, 3, 2,
	2, 2, 994, 992, 3, 2, 2, 2, 995, 997, 9, 3, 2, 2, 996, 998, 7, 127, 2,
	2, 997, 996, 3, 2, 2, 2, 997, 998, 3, 2, 2, 2, 998, 1000, 3, 2, 2, 2, 999,
	995, 3, 2, 2, 2, 1000, 1003, 3, 2, 2, 2, 1001, 999, 3, 2, 2, 2, 1001, 1002,
	3, 2, 2, 2, 1002, 1004, 3, 2, 2, 2, 1003, 1001, 3, 2, 2, 2, 1004, 1005,
	5, 120, 61, 2, 1005, 119, 3, 2, 2, 2, 1006, 1012, 5, 128, 65, 2, 1007,
	1011, 5, 124, 63, 2, 1008, 1011, 5, 122, 62, 2, 1009, 1011, 5, 126, 64,
	2, 1010, 1007, 3, 2, 2, 2, 1010, 1008, 3, 2, 2, 2, 1010, 1009, 3, 2, 2,
	2, 1011, 1014, 3, 2, 2, 2, 1012, 1010, 3, 2, 2, 2, 1012, 1013, 3, 2, 2,
	2, 1013, 121, 3, 2, 2, 2, 1014, 1012, 3, 2, 2, 2, 1015, 1016, 7, 127, 2,
	2, 1016, 1018, 7, 79, 2, 2, 1017, 1019, 7, 127, 2, 2, 1018, 1017, 3, 2,
	2, 2, 1018, 1019, 3, 2, 2, 2, 1019, 1020, 3, 2, 2, 2, 1020, 1041, 5, 128,
	65, 2, 1021, 1023, 7, 127, 2, 2, 1022, 1021, 3, 2, 2, 2, 1022, 1023, 3,
	2, 2, 2, 1023, 1024, 3, 2, 2, 2, 1024, 1025, 7, 10, 2, 2, 1025, 1026, 5,
	100, 51, 2, 1026, 1027, 7, 11, 2, 2, 1027, 1041, 3, 2, 2, 2, 1028, 1030,
	7, 127, 2, 2, 1029, 1028, 3, 2, 2, 2, 1029, 1030, 3, 2, 2, 2, 1030, 1031,
	3, 2, 2, 2, 1031, 1033, 7, 10, 2, 2, 1032, 1034, 5, 100, 51, 2, 1033, 1032,
	3, 2, 2, 2, 1033, 1034, 3, 2, 2, 2, 1034, 1035, 3, 2, 2, 2, 1035, 1037,
	7, 14, 2, 2, 1036, 1038, 5, 100, 51, 2, 1037, 1036, 3, 2, 2, 2, 1037, 1038,
	3, 2, 2, 2, 1038, 1039, 3, 2, 2, 2, 1039, 1041, 7, 11, 2, 2, 1040, 1015,
	3, 2, 2, 2, 1040, 1022, 3, 2, 2, 2, 1040, 1029, 3, 2, 2, 2, 1041, 123,
	3, 2, 2, 2, 1042, 1043, 7, 127, 2, 2, 1043, 1044, 7, 80, 2, 2, 1044, 1045,
	7, 127, 2, 2, 1045, 1053, 7, 63, 2, 2, 1046, 1047, 7, 127, 2, 2, 1047,
	1048, 7, 81, 2, 2, 1048, 1049, 7, 127, 2, 2, 1049, 1053, 7, 63, 2, 2, 1050,
	1051, 7, 127, 2, 2, 1051, 1053, 7, 82, 2, 2, 1052, 1042, 3, 2, 2, 2, 1052,
	1046, 3, 2, 2, 2, 1052, 1050, 3, 2, 2, 2, 1053, 1055, 3, 2, 2, 2, 1054,
	1056, 7, 127, 2, 2, 1055, 1054, 3, 2, 2, 2, 1055, 1056, 3, 2, 2, 2, 1056,
	1057, 3, 2, 2, 2, 1057, 1058, 5, 128, 65, 2, 1058, 125, 3, 2, 2, 2, 1059,
	1060, 7, 127, 2, 2, 1060, 1061, 7, 83, 2, 2, 1061, 1062, 7, 127, 2, 2,
	1062, 1070, 7, 84, 2, 2, 1063, 1064, 7, 127, 2, 2, 1064, 1065, 7, 83, 2,
	2, 1065, 1066, 7, 127, 2, 2, 1066, 1067, 7, 78, 2, 2, 1067, 1068, 7, 127,
	2, 2, 1068, 1070, 7, 84, 2, 2, 1069, 1059, 3, 2, 2, 2, 1069, 1063, 3, 2,
	2, 2, 1070, 127, 3, 2, 2, 2, 1071, 1078, 5, 130, 66, 2, 1072, 1074, 7,
	127, 2, 2, 1073, 1072, 3, 2, 2, 2, 1073, 1074, 3, 2, 2, 2, 1074, 1075,
	3, 2, 2, 2, 1075, 1077, 5, 166, 84, 2, 1076, 1073, 3, 2, 2, 2, 1077, 1080,
	3, 2, 2, 2, 1078, 1076, 3, 2, 2, 2, 1078, 1079, 3, 2, 2, 2, 1079, 1085,
	3, 2, 2, 2, 1080, 1078, 3, 2, 2, 2, 1081, 1083, 7, 127, 2, 2, 1082, 1081,
	3, 2, 2, 2, 1082, 1083, 3, 2, 2, 2, 1083, 1084, 3, 2, 2, 2, 1084, 1086,
	5, 90, 46, 2, 1085, 1082, 3, 2, 2, 2, 1085, 1086, 3, 2, 2, 2, 1086, 129,
	3, 2, 2, 2, 1087, 1166, 5, 132, 67, 2, 1088, 1166, 5, 178, 90, 2, 1089,
	1166, 5, 168, 85, 2, 1090, 1092, 7, 85, 2, 2, 1091, 1093, 7, 127, 2, 2,
	1092, 1091, 3, 2, 2, 2, 1092, 1093, 3, 2, 2, 2, 1093, 1094, 3, 2, 2, 2,
	1094, 1096, 7, 8, 2, 2, 1095, 1097, 7, 127, 2, 2, 1096, 1095, 3, 2, 2,
	2, 1096, 1097, 3, 2, 2, 2, 1097, 1098, 3, 2, 2, 2, 1098, 1100, 7, 7, 2,
	2, 1099, 1101, 7, 127, 2, 2, 1100, 1099, 3, 2, 2, 2, 1100, 1101, 3, 2,
	2, 2, 1101, 1102, 3, 2, 2, 2, 1102, 1166, 7, 9, 2, 2, 1103, 1166, 5, 162,
	82, 2, 1104, 1166, 5, 164, 83, 2, 1105, 1107, 7, 49, 2, 2, 1106, 1108,
	7, 127, 2, 2, 1107, 1106, 3, 2, 2, 2, 1107, 1108, 3, 2, 2, 2, 1108, 1109,
	3, 2, 2, 2, 1109, 1111, 7, 8, 2, 2, 1110, 1112, 7, 127, 2, 2, 1111, 1110,
	3, 2, 2, 2, 1111, 1112, 3, 2, 2, 2, 1112, 1113, 3, 2, 2, 2, 1113, 1115,
	5, 144, 73, 2, 1114, 1116, 7, 127, 2, 2, 1115, 1114, 3, 2, 2, 2, 1115,
	1116, 3, 2, 2, 2, 1116, 1117, 3, 2, 2, 2, 1117, 1118, 7, 9, 2, 2, 1118,
	1166, 3, 2, 2, 2, 1119, 1121, 7, 86, 2, 2, 1120, 1122, 7, 127, 2, 2, 1121,
	1120, 3, 2, 2, 2, 1121, 1122, 3, 2, 2, 2, 1122, 1123, 3, 2, 2, 2, 1123,
	1125, 7, 8, 2, 2, 1124, 1126, 7, 127, 2, 2, 1125, 1124, 3, 2, 2, 2, 1125,
	1126, 3, 2, 2, 2, 1126, 1127, 3, 2, 2, 2, 1127, 1129, 5, 144, 73, 2, 1128,
	1130, 7, 127, 2, 2, 1129, 1128, 3, 2, 2, 2, 1129, 1130, 3, 2, 2, 2, 1130,
	1131, 3, 2, 2, 2, 1131, 1132, 7, 9, 2, 2, 1132, 1166, 3, 2, 2, 2, 1133,
	1135, 7, 87, 2, 2, 1134, 1136, 7, 127, 2, 2, 1135, 1134, 3, 2, 2, 2, 1135,
	1136, 3, 2, 2, 2, 1136, 1137, 3, 2, 2, 2, 1137, 1139, 7, 8, 2, 2, 1138,
	1140, 7, 127, 2, 2, 1139, 1138, 3, 2, 2, 2, 1139, 1140, 3, 2, 2, 2, 1140,
	1141, 3, 2, 2, 2, 1141, 1143, 5, 144, 73, 2, 1142, 1144, 7, 127, 2, 2,
	1143, 1142, 3, 2, 2, 2, 1143, 1144, 3, 2, 2, 2, 1144, 1145, 3, 2, 2, 2,
	1145, 1146, 7, 9, 2, 2, 1146, 1166, 3, 2, 2, 2, 1147, 1149, 7, 88, 2, 2,
	1148, 1150, 7, 127, 2, 2, 1149, 1148, 3, 2, 2, 2, 1149, 1150, 3, 2, 2,
	2, 1150, 1151, 3, 2, 2, 2, 1151, 1153, 7, 8, 2, 2, 1152, 1154, 7, 127,
	2, 2, 1153, 1152, 3, 2, 2, 2, 1153, 1154, 3, 2, 2, 2, 1154, 1155, 3, 2,
	2, 2, 1155, 1157, 5, 144, 73, 2, 1156, 1158, 7, 127, 2, 2, 1157, 1156,
	3, 2, 2, 2, 1157, 1158, 3, 2, 2, 2, 1158, 1159, 3, 2, 2, 2, 1159, 1160,
	7, 9, 2, 2, 1160, 1166, 3, 2, 2, 2, 1161, 1166, 5, 142, 72, 2, 1162, 1166,
	5, 140, 71, 2, 1163, 1166, 5, 148, 75, 2, 1164, 1166, 5, 172, 87, 2, 1165,
	1087, 3, 2, 2, 2, 1165, 1088, 3, 2, 2, 2, 1165, 1089, 3, 2, 2, 2, 1165,
	1090, 3, 2, 2, 2, 1165, 1103, 3, 2, 2, 2, 1165, 1104, 3, 2, 2, 2, 1165,
	1105, 3, 2, 2, 2, 1165, 1119, 3, 2, 2, 2, 1165, 1133, 3, 2, 2, 2, 1165,
	1147, 3, 2, 2, 2, 1165, 1161, 3, 2, 2, 2, 1165, 1162, 3, 2, 2, 2, 1165,
	1163, 3, 2, 2, 2, 1165, 1164, 3, 2, 2, 2, 1166, 131, 3, 2, 2, 2, 1167,
	1174, 5, 174, 88, 2, 1168, 1174, 7, 97, 2, 2, 1169, 1174, 5, 134, 68, 2,
	1170, 1174, 7, 84, 2, 2, 1171, 1174, 5, 176, 89, 2, 1172, 1174, 5, 136,
	69, 2, 1173, 1167, 3, 2, 2, 2, 1173, 1168, 3, 2, 2, 2, 1173, 1169, 3, 2,
	2, 2, 1173, 1170, 3, 2, 2, 2, 1173, 1171, 3, 2, 2, 2, 1173, 1172, 3, 2,
	2, 2, 1174, 133, 3, 2, 2, 2, 1175, 1176, 9, 4, 2, 2, 1176, 135, 3, 2, 2,
	2, 1177, 1179, 7, 10, 2, 2, 1178, 1180, 7, 127, 2, 2, 1179, 1178, 3, 2,
	2, 2, 1179, 1180, 3, 2, 2, 2, 1180, 1198, 3, 2, 2, 2, 1181, 1183, 5, 100,
	51, 2, 1182, 1184, 7, 127, 2, 2, 1183, 1182, 3, 2, 2, 2, 1183, 1184, 3,
	2, 2, 2, 1184, 1195, 3, 2, 2, 2, 1185, 1187, 7, 4, 2, 2, 1186, 1188, 7,
	127, 2, 2, 1187, 1186, 3, 2, 2, 2, 1187, 1188, 3, 2, 2, 2, 1188, 1189,
	3, 2, 2, 2, 1189, 1191, 5, 100, 51, 2, 1190, 1192, 7, 127, 2, 2, 1191,
	1190, 3, 2, 2, 2, 1191, 1192, 3, 2, 2, 2, 1192, 1194, 3, 2, 2, 2, 1193,
	1185, 3, 2, 2, 2, 1194, 1197, 3, 2, 2, 2, 1195, 1193, 3, 2, 2, 2, 1195,
	1196, 3, 2, 2, 2, 1196, 1199, 3, 2, 2, 2, 1197, 1195, 3, 2, 2, 2, 1198,
	1181, 3, 2, 2, 2, 1198, 1199, 3, 2, 2, 2, 1199, 1200, 3, 2, 2, 2, 1200,
	1201, 7, 11, 2, 2, 1201, 137, 3, 2, 2, 2, 1202, 1204, 7, 5, 2, 2, 1203,
	1205, 7, 127, 2, 2, 1204, 1203, 3, 2, 2, 2, 1204, 1205, 3, 2, 2, 2, 1205,
	1206, 3, 2, 2, 2, 1206, 1233, 5, 112, 57, 2, 1207, 1209, 7, 20, 2, 2, 1208,
	1210, 7, 127, 2, 2, 1209, 1208, 3, 2, 2, 2, 1209, 1210, 3, 2, 2, 2, 1210,
	1211, 3, 2, 2, 2, 1211, 1233, 5, 112, 57, 2, 1212, 1214, 7, 21, 2, 2, 1213,
	1215, 7, 127, 2, 2, 1214, 1213, 3, 2, 2, 2, 1214, 1215, 3, 2, 2, 2, 1215,
	1216, 3, 2, 2, 2, 1216, 1233, 5, 112, 57, 2, 1217, 1219, 7, 22, 2, 2, 1218,
	1220, 7, 127, 2, 2, 1219, 1218, 3, 2, 2, 2, 1219, 1220, 3, 2, 2, 2, 1220,
	1221, 3, 2, 2, 2, 1221, 1233, 5, 112, 57, 2, 1222, 1224, 7, 23, 2, 2, 1223,
	1225, 7, 127, 2, 2, 1224, 1223, 3, 2, 2, 2, 1224, 1225, 3, 2, 2, 2, 1225,
	1226, 3, 2, 2, 2, 1226, 1233, 5, 112, 57, 2, 1227, 1229, 7, 24, 2, 2, 1228,
	1230, 7, 127, 2, 2, 1229, 1228, 3, 2, 2, 2, 1229, 1230, 3, 2, 2, 2, 1230,
	1231, 3, 2, 2, 2, 1231, 1233, 5, 112, 57, 2, 1232, 1202, 3, 2, 2, 2, 1232,
	1207, 3, 2, 2, 2, 1232, 1212, 3, 2, 2, 2, 1232, 1217, 3, 2, 2, 2, 1232,
	1222, 3, 2, 2, 2, 1232, 1227, 3, 2, 2, 2, 1233, 139, 3, 2, 2, 2, 1234,
	1236, 7, 8, 2, 2, 1235, 1237, 7, 127, 2, 2, 1236, 1235, 3, 2, 2, 2, 1236,
	1237, 3, 2, 2, 2, 1237, 1238, 3, 2, 2, 2, 1238, 1240, 5, 100, 51, 2, 1239,
	1241, 7, 127, 2, 2, 1240, 1239, 3, 2, 2, 2, 1240, 1241, 3, 2, 2, 2, 1241,
	1242, 3, 2, 2, 2, 1242, 1243, 7, 9, 2, 2, 1243, 141, 3, 2, 2, 2, 1244,
	1249, 5, 78, 40, 2, 1245, 1247, 7, 127, 2, 2, 1246, 1245, 3, 2, 2, 2, 1246,
	1247, 3, 2, 2, 2, 1247, 1248, 3, 2, 2, 2, 1248, 1250, 5, 80, 41, 2, 1249,
	1246, 3, 2, 2, 2, 1250, 1251, 3, 2, 2, 2, 1251, 1249, 3, 2, 2, 2, 1251,
	1252, 3, 2, 2, 2, 1252, 143, 3, 2, 2, 2, 1253, 1258, 5, 146, 74, 2, 1254,
	1256, 7, 127, 2, 2, 1255, 1254, 3, 2, 2, 2, 1255, 1256, 3, 2, 2, 2, 1256,
	1257, 3, 2, 2, 2, 1257, 1259, 5, 68, 35, 2, 1258, 1255, 3, 2, 2, 2, 1258,
	1259, 3, 2, 2, 2, 1259, 145, 3, 2, 2, 2, 1260, 1261, 5, 172, 87, 2, 1261,
	1262, 7, 127, 2, 2, 1262, 1263, 7, 79, 2, 2, 1263, 1264, 7, 127, 2, 2,
	1264, 1265, 5, 100, 51, 2, 1265, 147, 3, 2, 2, 2, 1266, 1268, 5, 150, 76,
	2, 1267, 1269, 7, 127, 2, 2, 1268, 1267, 3, 2, 2, 2, 1268, 1269, 3, 2,
	2, 2, 1269, 1270, 3, 2, 2, 2, 1270, 1272, 7, 8, 2, 2, 1271, 1273, 7, 127,
	2, 2, 1272, 1271, 3, 2, 2, 2, 1272, 1273, 3, 2, 2, 2, 1273, 1278, 3, 2,
	2, 2, 1274, 1276, 7, 64, 2, 2, 1275, 1277, 7, 127, 2, 2, 1276, 1275, 3,
	2, 2, 2, 1276, 1277, 3, 2, 2, 2, 1277, 1279, 3, 2, 2, 2, 1278, 1274, 3,
	2, 2, 2, 1278, 1279, 3, 2, 2, 2, 1279, 1297, 3, 2, 2, 2, 1280, 1282, 5,
	100, 51, 2, 1281, 1283, 7, 127, 2, 2, 1282, 1281, 3, 2, 2, 2, 1282, 1283,
	3, 2, 2, 2, 1283, 1294, 3, 2, 2, 2, 1284, 1286, 7, 4, 2, 2, 1285, 1287,
	7, 127, 2, 2, 1286, 1285, 3, 2, 2, 2, 1286, 1287, 3, 2, 2, 2, 1287, 1288,
	3, 2, 2, 2, 1288, 1290, 5, 100, 51, 2, 1289, 1291, 7, 127, 2, 2, 1290,
	1289, 3, 2, 2, 2, 1290, 1291, 3, 2, 2, 2, 1291, 1293, 3, 2, 2, 2, 1292,
	1284, 3, 2, 2, 2, 1293, 1296, 3, 2, 2, 2, 1294, 1292, 3, 2, 2, 2, 1294,
	1295, 3, 2, 2, 2, 1295, 1298, 3, 2, 2, 2, 1296, 1294, 3, 2, 2, 2, 1297,
	1280, 3, 2, 2, 2, 1297, 1298, 3, 2, 2, 2, 1298, 1299, 3, 2, 2, 2, 1299,
	1300, 7, 9, 2, 2, 1300, 149, 3, 2, 2, 2, 1301, 1302, 5, 160, 81, 2, 1302,
	1303, 5, 192, 97, 2, 1303, 1306, 3, 2, 2, 2, 1304, 1306, 7, 91, 2, 2, 1305,
	1301, 3, 2, 2, 2, 1305, 1304, 3, 2, 2, 2, 1306, 151, 3, 2, 2, 2, 1307,
	1309, 5, 158, 80, 2, 1308, 1310, 7, 127, 2, 2, 1309, 1308, 3, 2, 2, 2,
	1309, 1310, 3, 2, 2, 2, 1310, 1311, 3, 2, 2, 2, 1311, 1313, 7, 8, 2, 2,
	1312, 1314, 7, 127, 2, 2, 1313, 1312, 3, 2, 2, 2, 1313, 1314, 3, 2, 2,
	2, 1314, 1332, 3, 2, 2, 2, 1315, 1317, 5, 100, 51, 2, 1316, 1318, 7, 127,
	2, 2, 1317, 1316, 3, 2, 2, 2, 1317, 1318, 3, 2, 2, 2, 1318, 1329, 3, 2,
	2, 2, 1319, 1321, 7, 4, 2, 2, 1320, 1322, 7, 127, 2, 2, 1321, 1320, 3,
	2, 2, 2, 1321, 1322, 3, 2, 2, 2, 1322, 1323, 3, 2, 2, 2, 1323, 1325, 5,
	100, 51, 2, 1324, 1326, 7, 127, 2, 2, 1325, 1324, 3, 2, 2, 2, 1325, 1326,
	3, 2, 2, 2, 1326, 1328, 3, 2, 2, 2, 1327, 1319, 3, 2, 2, 2, 1328, 1331,
	3, 2, 2, 2, 1329, 1327, 3, 2, 2, 2, 1329, 1330, 3, 2, 2, 2, 1330, 1333,
	3, 2, 2, 2, 1331, 1329, 3, 2, 2, 2, 1332, 1315, 3, 2, 2, 2, 1332, 1333,
	3, 2, 2, 2, 1333, 1334, 3, 2, 2, 2, 1334, 1335, 7, 9, 2, 2, 1335, 153,
	3, 2, 2, 2, 1336, 1337, 5, 158, 80, 2, 1337, 155, 3, 2, 2, 2, 1338, 1339,
	5, 192, 97, 2, 1339, 157, 3, 2, 2, 2, 1340, 1341, 5, 160, 81, 2, 1341,
	1342, 5, 192, 97, 2, 1342, 159, 3, 2, 2, 2, 1343, 1344, 5, 192, 97, 2,
	1344, 1345, 7, 25, 2, 2, 1345, 1347, 3, 2, 2, 2, 1346, 1343, 3, 2, 2, 2,
	1347, 1350, 3, 2, 2, 2, 1348, 1346, 3, 2, 2, 2, 1348, 1349, 3, 2, 2, 2,
	1349, 161, 3, 2, 2, 2, 1350, 1348, 3, 2, 2, 2, 1351, 1353, 7, 10, 2, 2,
	1352, 1354, 7, 127, 2, 2, 1353, 1352, 3, 2, 2, 2, 1353, 1354, 3, 2, 2,
	2, 1354, 1355, 3, 2, 2, 2, 1355, 1364, 5, 144, 73, 2, 1356, 1358, 7, 127,
	2, 2, 1357, 1356, 3, 2, 2, 2, 1357, 1358, 3, 2, 2, 2, 1358, 1359, 3, 2,
	2, 2, 1359, 1361, 7, 13, 2, 2, 1360, 1362, 7, 127, 2, 2, 1361, 1360, 3,
	2, 2, 2, 1361, 1362, 3, 2, 2, 2, 1362, 1363, 3, 2, 2, 2, 1363, 1365, 5,
	100, 51, 2, 1364, 1357, 3, 2, 2, 2, 1364, 1365, 3, 2, 2, 2, 1365, 1367,
	3, 2, 2, 2, 1366, 1368, 7, 127, 2, 2, 1367, 1366, 3, 2, 2, 2, 1367, 1368,
	3, 2, 2, 2, 1368, 1369, 3, 2, 2, 2, 1369, 1370, 7, 11, 2, 2, 1370, 163,
	3, 2, 2, 2, 1371, 1373, 7, 10, 2, 2, 1372, 1374, 7, 127, 2, 2, 1373, 1372,
	3, 2, 2, 2, 1373, 1374, 3, 2, 2, 2, 1374, 1383, 3, 2, 2, 2, 1375, 1377,
	5, 172, 87, 2, 1376, 1378, 7, 127, 2, 2, 1377, 1376, 3, 2, 2, 2, 1377,
	1378, 3, 2, 2, 2, 1378, 1379, 3, 2, 2, 2, 1379, 1381, 7, 5, 2, 2, 1380,
	1382, 7, 127, 2, 2, 1381, 1380, 3, 2, 2, 2, 1381, 1382, 3, 2, 2, 2, 1382,
	1384, 3, 2, 2, 2, 1383, 1375, 3, 2, 2, 2, 1383, 1384, 3, 2, 2, 2, 1384,
	1385, 3, 2, 2, 2, 1385, 1387, 5, 142, 72, 2, 1386, 1388, 7, 127, 2, 2,
	1387, 1386, 3, 2, 2, 2, 1387, 1388, 3, 2, 2, 2, 1388, 1397, 3, 2, 2, 2,
	1389, 1391, 7, 74, 2, 2, 1390, 1392, 7, 127, 2, 2, 1391, 1390, 3, 2, 2,
	2, 1391, 1392, 3, 2, 2, 2, 1392, 1393, 3, 2, 2, 2, 1393, 1395, 5, 100,
	51, 2, 1394, 1396, 7, 127, 2, 2, 1395, 1394, 3, 2, 2, 2, 1395, 1396, 3,
	2, 2, 2, 1396, 1398, 3, 2, 2, 2, 1397, 1389, 3, 2, 2, 2, 1397, 1398, 3,
	2, 2, 2, 1398, 1399, 3, 2, 2, 2, 1399, 1401, 7, 13, 2, 2, 1400, 1402, 7,
	127, 2, 2, 1401, 1400, 3, 2, 2, 2, 1401, 1402, 3, 2, 2, 2, 1402, 1403,
	3, 2, 2, 2, 1403, 1405, 5, 100, 51, 2, 1404, 1406, 7, 127, 2, 2, 1405,
	1404, 3, 2, 2, 2, 1405, 1406, 3, 2, 2, 2, 1406, 1407, 3, 2, 2, 2, 1407,
	1408, 7, 11, 2, 2, 1408, 165, 3, 2, 2, 2, 1409, 1411, 7, 25, 2, 2, 1410,
	1412, 7, 127, 2, 2, 1411, 1410, 3, 2, 2, 2, 1411, 1412, 3, 2, 2, 2, 1412,
	1413, 3, 2, 2, 2, 1413, 1414, 5, 182, 92, 2, 1414, 167, 3, 2, 2, 2, 1415,
	1420, 7, 92, 2, 2, 1416, 1418, 7, 127, 2, 2, 1417, 1416, 3, 2, 2, 2, 1417,
	1418, 3, 2, 2, 2, 1418, 1419, 3, 2, 2, 2, 1419, 1421, 5, 170, 86, 2, 1420,
	1417, 3, 2, 2, 2, 1421, 1422, 3, 2, 2, 2, 1422, 1420, 3, 2, 2, 2, 1422,
	1423, 3, 2, 2, 2, 1423, 1438, 3, 2, 2, 2, 1424, 1426, 7, 92, 2, 2, 1425,
	1427, 7, 127, 2, 2, 1426, 1425, 3, 2, 2, 2, 1426, 1427, 3, 2, 2, 2, 1427,
	1428, 3, 2, 2, 2, 1428, 1433, 5, 100, 51, 2, 1429, 1431, 7, 127, 2, 2,
	1430, 1429, 3, 2, 2, 2, 1430, 1431, 3, 2, 2, 2, 1431, 1432, 3, 2, 2, 2,
	1432, 1434, 5, 170, 86, 2, 1433, 1430, 3, 2, 2, 2, 1434, 1435, 3, 2, 2,
	2, 1435, 1433, 3, 2, 2, 2, 1435, 1436, 3, 2, 2, 2, 1436, 1438, 3, 2, 2,
	2, 1437, 1415, 3, 2, 2, 2, 1437, 1424, 3, 2, 2, 2, 1438, 1447, 3, 2, 2,
	2, 1439, 1441, 7, 127, 2, 2, 1440, 1439, 3, 2, 2, 2, 1440, 1441, 3, 2,
	2, 2, 1441, 1442, 3, 2, 2, 2, 1442, 1444, 7, 93, 2, 2, 1443, 1445, 7, 127,
	2, 2, 1444, 1443, 3, 2, 2, 2, 1444, 1445, 3, 2, 2, 2, 1445, 1446, 3, 2,
	2, 2, 1446, 1448, 5, 100, 51, 2, 1447, 1440, 3, 2, 2, 2, 1447, 1448, 3,
	2, 2, 2, 1448, 1450, 3, 2, 2, 2, 1449, 1451, 7, 127, 2, 2, 1450, 1449,
	3, 2, 2, 2, 1450, 1451, 3, 2, 2, 2, 1451, 1452, 3, 2, 2, 2, 1452, 1453,
	7, 94, 2, 2, 1453, 169, 3, 2, 2, 2, 1454, 1456, 7, 95, 2, 2, 1455, 1457,
	7, 127, 2, 2, 1456, 1455, 3, 2, 2, 2, 1456, 1457, 3, 2, 2, 2, 1457, 1458,
	3, 2, 2, 2, 1458, 1460, 5, 100, 51, 2, 1459, 1461, 7, 127, 2, 2, 1460,
	1459, 3, 2, 2, 2, 1460, 1461, 3, 2, 2, 2, 1461, 1462, 3, 2, 2, 2, 1462,
	1464, 7, 96, 2, 2, 1463, 1465, 7, 127, 2, 2, 1464, 1463, 3, 2, 2, 2, 1464,
	1465, 3, 2, 2, 2, 1465, 1466, 3, 2, 2, 2, 1466, 1467, 5, 100, 51, 2, 1467,
	171, 3, 2, 2, 2, 1468, 1469, 5, 192, 97, 2, 1469, 173, 3, 2, 2, 2, 1470,
	1473, 5, 186, 94, 2, 1471, 1473, 5, 184, 93, 2, 1472, 1470, 3, 2, 2, 2,
	1472, 1471, 3, 2, 2, 2, 1473, 175, 3, 2, 2, 2, 1474, 1476, 7, 26, 2, 2,
	1475, 1477, 7, 127, 2, 2, 1476, 1475, 3, 2, 2, 2, 1476, 1477, 3, 2, 2,
	2, 1477, 1511, 3, 2, 2, 2, 1478, 1480, 5, 182, 92, 2, 1479, 1481, 7, 127,
	2, 2, 1480, 1479, 3, 2, 2, 2, 1480, 1481, 3, 2, 2, 2, 1481, 1482, 3, 2,
	2, 2, 1482, 1484, 7, 12, 2, 2, 1483, 1485, 7, 127, 2, 2, 1484, 1483, 3,
	2, 2, 2, 1484, 1485, 3, 2, 2, 2, 1485, 1486, 3, 2, 2, 2, 1486, 1488, 5,
	100, 51, 2, 1487, 1489, 7, 127, 2, 2, 1488, 1487, 3, 2, 2, 2, 1488, 1489,
	3, 2, 2, 2, 1489, 1508, 3, 2, 2, 2, 1490, 1492, 7, 4, 2, 2, 1491, 1493,
	7, 127, 2, 2, 1492, 1491, 3, 2, 2, 2, 1492, 1493, 3, 2, 2, 2, 1493, 1494,
	3, 2, 2, 2, 1494, 1496, 5, 182, 92, 2, 1495, 1497, 7, 127, 2, 2, 1496,
	1495, 3, 2, 2, 2, 1496, 1497, 3, 2, 2, 2, 1497, 1498, 3, 2, 2, 2, 1498,
	1500, 7, 12, 2, 2, 1499, 1501, 7, 127, 2, 2, 1500, 1499, 3, 2, 2, 2, 1500,
	1501, 3, 2, 2, 2, 1501, 1502, 3, 2, 2, 2, 1502, 1504, 5, 100, 51, 2, 1503,
	1505, 7, 127, 2, 2, 1504, 1503, 3, 2, 2, 2, 1504, 1505, 3, 2, 2, 2, 1505,
	1507, 3, 2, 2, 2, 1506, 1490, 3, 2, 2, 2, 1507, 1510, 3, 2, 2, 2, 1508,
	1506, 3, 2, 2, 2, 1508, 1509, 3, 2, 2, 2, 1509, 1512, 3, 2, 2, 2, 1510,
	1508, 3, 2, 2, 2, 1511, 1478, 3, 2, 2, 2, 1511, 1512, 3, 2, 2, 2, 1512,
	1513, 3, 2, 2, 2, 1513, 1514, 7, 27, 2, 2, 1514, 177, 3, 2, 2, 2, 1515,
	1518, 7, 28, 2, 2, 1516, 1519, 5, 192, 97, 2, 1517, 1519, 7, 100, 2, 2,
	1518, 1516, 3, 2, 2, 2, 1518, 1517, 3, 2, 2, 2, 1519, 179, 3, 2, 2, 2,
	1520, 1525, 5, 130, 66, 2, 1521, 1523, 7, 127, 2, 2, 1522, 1521, 3, 2,
	2, 2, 1522, 1523, 3, 2, 2, 2, 1523, 1524, 3, 2, 2, 2, 1524, 1526, 5, 166,
	84, 2, 1525, 1522, 3, 2, 2, 2, 1526, 1527, 3, 2, 2, 2, 1527, 1525, 3, 2,
	2, 2, 1527, 1528, 3, 2, 2, 2, 1528, 181, 3, 2, 2, 2, 1529, 1530, 5, 188,
	95, 2, 1530, 183, 3, 2, 2, 2, 1531, 1532, 9, 5, 2, 2, 1532, 185, 3, 2,
	2, 2, 1533, 1534, 9, 6, 2, 2, 1534, 187, 3, 2, 2, 2, 1535, 1538, 5, 192,
	97, 2, 1536, 1538, 5, 190, 96, 2, 1537, 1535, 3, 2, 2, 2, 1537, 1536, 3,
	2, 2, 2, 1538, 189, 3, 2, 2, 2, 1539, 1540, 9, 7, 2, 2, 1540, 191, 3, 2,
	2, 2, 1541, 1542, 9, 8, 2, 2, 1542, 193, 3, 2, 2, 2, 1543, 1544, 9, 9,
	2, 2, 1544, 195, 3, 2, 2, 2, 1545, 1546, 9, 10, 2, 2, 1546, 197, 3, 2,
	2, 2, 1547, 1548, 9, 11, 2, 2, 1548, 199, 3, 2, 2, 2, 287, 201, 205, 208,
	211, 219, 223, 228, 235, 240, 243, 247, 251, 255, 261, 265, 270, 275, 279,
	282, 284, 288, 292, 297, 301, 306, 310, 319, 324, 328, 332, 336, 339, 343,
	353, 360, 373, 377, 383, 390, 395, 399, 405, 409, 415, 419, 425, 429, 433,
	437, 441, 445, 450, 457, 461, 466, 473, 479, 484, 490, 496, 501, 505, 510,
	513, 516, 519, 526, 532, 535, 540, 543, 547, 550, 558, 562, 566, 570, 574,
	579, 584, 588, 593, 596, 605, 614, 619, 632, 635, 643, 647, 652, 657, 661,
	666, 672, 677, 684, 688, 692, 694, 698, 700, 704, 706, 712, 718, 722, 725,
	728, 732, 738, 742, 745, 748, 754, 757, 760, 764, 770, 773, 776, 780, 784,
	788, 790, 794, 796, 799, 803, 805, 811, 815, 819, 823, 826, 831, 836, 841,
	846, 852, 856, 858, 862, 866, 868, 870, 885, 895, 905, 910, 914, 921, 926,
	931, 935, 939, 943, 946, 948, 953, 957, 961, 965, 969, 973, 976, 978, 983,
	987, 992, 997, 1001, 1010, 1012, 1018, 1022, 1029, 1033, 1037, 1040, 1052,
	1055, 1069, 1073, 1078, 1082, 1085, 1092, 1096, 1100, 1107, 1111, 1115,
	1121, 1125, 1129, 1135, 1139, 1143, 1149, 1153, 1157, 1165, 1173, 1179,
	1183, 1187, 1191, 1195, 1198, 1204, 1209, 1214, 1219, 1224, 1229, 1232,
	1236, 1240, 1246, 1251, 1255, 1258, 1268, 1272, 1276, 1278, 1282, 1286,
	1290, 1294, 1297, 1305, 1309, 1313, 1317, 1321, 1325, 1329, 1332, 1348,
	1353, 1357, 1361, 1364, 1367, 1373, 1377, 1381, 1383, 1387, 1391, 1395,
	1397, 1401, 1405, 1411, 1417, 1422, 1426, 1430, 1435, 1437, 1440, 1444,
	1447, 1450, 1456, 1460, 1464, 1472, 1476, 1480, 1484, 1488, 1492, 1496,
	1500, 1504, 1508, 1511, 1518, 1522, 1527, 1537,
}
var deserializer = antlr.NewATNDeserializer(nil)
var deserializedATN = deserializer.DeserializeFromUInt16(parserATN)

var literalNames = []string{
	"", "';'", "','", "'='", "'+='", "'*'", "'('", "')'", "'['", "']'", "':'",
	"'|'", "'..'", "'+'", "'-'", "'/'", "'%'", "'^'", "'<>'", "'<'", "'>'",
	"'<='", "'>='", "'.'", "'{'", "'}'", "'$'", "'\u27E8'", "'\u3008'", "'\uFE64'",
	"'\uFF1C'", "'\u27E9'", "'\u3009'", "'\uFE65'", "'\uFF1E'", "'\u00AD'",
	"'\u2010'", "'\u2011'", "'\u2012'", "'\u2013'", "'\u2014'", "'\u2015'",
	"'\u2212'", "'\uFE58'", "'\uFE63'", "'\uFF0D'", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"'0'",
}
var symbolicNames = []string{
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "UNION", "ALL", "OPTIONAL", "MATCH",
	"UNWIND", "AS", "MERGE", "ON", "CREATE", "SET", "DETACH", "DELETE", "REMOVE",
	"CALL", "YIELD", "WITH", "DISTINCT", "RETURN", "ORDER", "BY", "L_SKIP",
	"LIMIT", "ASCENDING", "ASC", "DESCENDING", "DESC", "WHERE", "OR", "XOR",
	"AND", "NOT", "IN", "STARTS", "ENDS", "CONTAINS", "IS", "NULL", "COUNT",
	"ANY", "NONE", "SINGLE", "TRUE", "FALSE", "EXISTS", "CASE", "ELSE", "END",
	"WHEN", "THEN", "StringLiteral", "EscapedChar", "HexInteger", "DecimalInteger",
	"OctalInteger", "HexLetter", "HexDigit", "Digit", "NonZeroDigit", "NonZeroOctDigit",
	"OctDigit", "ZeroDigit", "ExponentDecimalReal", "RegularDecimalReal", "CONSTRAINT",
	"DO", "FOR", "REQUIRE", "UNIQUE", "MANDATORY", "SCALAR", "OF", "ADD", "DROP",
	"FILTER", "EXTRACT", "UnescapedSymbolicName", "IdentifierStart", "IdentifierPart",
	"EscapedSymbolicName", "SP", "WHITESPACE", "Comment",
}

var ruleNames = []string{
	"oC_Cypher", "oC_Statement", "oC_Query", "oC_RegularQuery", "oC_Union",
	"oC_SingleQuery", "oC_SinglePartQuery", "oC_MultiPartQuery", "oC_UpdatingClause",
	"oC_ReadingClause", "oC_Match", "oC_Unwind", "oC_Merge", "oC_MergeAction",
	"oC_Create", "oC_Set", "oC_SetItem", "oC_Delete", "oC_Remove", "oC_RemoveItem",
	"oC_InQueryCall", "oC_StandaloneCall", "oC_YieldItems", "oC_YieldItem",
	"oC_With", "oC_Return", "oC_ReturnBody", "oC_ReturnItems", "oC_ReturnItem",
	"oC_Order", "oC_Skip", "oC_Limit", "oC_SortItem", "oC_Where", "oC_Pattern",
	"oC_PatternPart", "oC_AnonymousPatternPart", "oC_PatternElement", "oC_NodePattern",
	"oC_PatternElementChain", "oC_RelationshipPattern", "oC_RelationshipDetail",
	"oC_Properties", "oC_RelationshipTypes", "oC_NodeLabels", "oC_NodeLabel",
	"oC_RangeLiteral", "oC_LabelName", "oC_RelTypeName", "oC_Expression", "oC_OrExpression",
	"oC_XorExpression", "oC_AndExpression", "oC_NotExpression", "oC_ComparisonExpression",
	"oC_AddOrSubtractExpression", "oC_MultiplyDivideModuloExpression", "oC_PowerOfExpression",
	"oC_UnaryAddOrSubtractExpression", "oC_StringListNullOperatorExpression",
	"oC_ListOperatorExpression", "oC_StringOperatorExpression", "oC_NullOperatorExpression",
	"oC_PropertyOrLabelsExpression", "oC_Atom", "oC_Literal", "oC_BooleanLiteral",
	"oC_ListLiteral", "oC_PartialComparisonExpression", "oC_ParenthesizedExpression",
	"oC_RelationshipsPattern", "oC_FilterExpression", "oC_IdInColl", "oC_FunctionInvocation",
	"oC_FunctionName", "oC_ExplicitProcedureInvocation", "oC_ImplicitProcedureInvocation",
	"oC_ProcedureResultField", "oC_ProcedureName", "oC_Namespace", "oC_ListComprehension",
	"oC_PatternComprehension", "oC_PropertyLookup", "oC_CaseExpression", "oC_CaseAlternatives",
	"oC_Variable", "oC_NumberLiteral", "oC_MapLiteral", "oC_Parameter", "oC_PropertyExpression",
	"oC_PropertyKeyName", "oC_IntegerLiteral", "oC_DoubleLiteral", "oC_SchemaName",
	"oC_ReservedWord", "oC_SymbolicName", "oC_LeftArrowHead", "oC_RightArrowHead",
	"oC_Dash",
}
var decisionToDFA = make([]*antlr.DFA, len(deserializedATN.DecisionToState))

func init() {
	for index, ds := range deserializedATN.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(ds, index)
	}
}

type CypherParser struct {
	*antlr.BaseParser
}

func NewCypherParser(input antlr.TokenStream) *CypherParser {
	this := new(CypherParser)

	this.BaseParser = antlr.NewBaseParser(input)

	this.Interpreter = antlr.NewParserATNSimulator(this, deserializedATN, decisionToDFA, antlr.NewPredictionContextCache())
	this.RuleNames = ruleNames
	this.LiteralNames = literalNames
	this.SymbolicNames = symbolicNames
	this.GrammarFileName = "Cypher.g4"

	return this
}

// CypherParser tokens.
const (
	CypherParserEOF                   = antlr.TokenEOF
	CypherParserT__0                  = 1
	CypherParserT__1                  = 2
	CypherParserT__2                  = 3
	CypherParserT__3                  = 4
	CypherParserT__4                  = 5
	CypherParserT__5                  = 6
	CypherParserT__6                  = 7
	CypherParserT__7                  = 8
	CypherParserT__8                  = 9
	CypherParserT__9                  = 10
	CypherParserT__10                 = 11
	CypherParserT__11                 = 12
	CypherParserT__12                 = 13
	CypherParserT__13                 = 14
	CypherParserT__14                 = 15
	CypherParserT__15                 = 16
	CypherParserT__16                 = 17
	CypherParserT__17                 = 18
	CypherParserT__18                 = 19
	CypherParserT__19                 = 20
	CypherParserT__20                 = 21
	CypherParserT__21                 = 22
	CypherParserT__22                 = 23
	CypherParserT__23                 = 24
	CypherParserT__24                 = 25
	CypherParserT__25                 = 26
	CypherParserT__26                 = 27
	CypherParserT__27                 = 28
	CypherParserT__28                 = 29
	CypherParserT__29                 = 30
	CypherParserT__30                 = 31
	CypherParserT__31                 = 32
	CypherParserT__32                 = 33
	CypherParserT__33                 = 34
	CypherParserT__34                 = 35
	CypherParserT__35                 = 36
	CypherParserT__36                 = 37
	CypherParserT__37                 = 38
	CypherParserT__38                 = 39
	CypherParserT__39                 = 40
	CypherParserT__40                 = 41
	CypherParserT__41                 = 42
	CypherParserT__42                 = 43
	CypherParserT__43                 = 44
	CypherParserT__44                 = 45
	CypherParserUNION                 = 46
	CypherParserALL                   = 47
	CypherParserOPTIONAL              = 48
	CypherParserMATCH                 = 49
	CypherParserUNWIND                = 50
	CypherParserAS                    = 51
	CypherParserMERGE                 = 52
	CypherParserON                    = 53
	CypherParserCREATE                = 54
	CypherParserSET                   = 55
	CypherParserDETACH                = 56
	CypherParserDELETE                = 57
	CypherParserREMOVE                = 58
	CypherParserCALL                  = 59
	CypherParserYIELD                 = 60
	CypherParserWITH                  = 61
	CypherParserDISTINCT              = 62
	CypherParserRETURN                = 63
	CypherParserORDER                 = 64
	CypherParserBY                    = 65
	CypherParserL_SKIP                = 66
	CypherParserLIMIT                 = 67
	CypherParserASCENDING             = 68
	CypherParserASC                   = 69
	CypherParserDESCENDING            = 70
	CypherParserDESC                  = 71
	CypherParserWHERE                 = 72
	CypherParserOR                    = 73
	CypherParserXOR                   = 74
	CypherParserAND                   = 75
	CypherParserNOT                   = 76
	CypherParserIN                    = 77
	CypherParserSTARTS                = 78
	CypherParserENDS                  = 79
	CypherParserCONTAINS              = 80
	CypherParserIS                    = 81
	CypherParserNULL                  = 82
	CypherParserCOUNT                 = 83
	CypherParserANY                   = 84
	CypherParserNONE                  = 85
	CypherParserSINGLE                = 86
	CypherParserTRUE                  = 87
	CypherParserFALSE                 = 88
	CypherParserEXISTS                = 89
	CypherParserCASE                  = 90
	CypherParserELSE                  = 91
	CypherParserEND                   = 92
	CypherParserWHEN                  = 93
	CypherParserTHEN                  = 94
	CypherParserStringLiteral         = 95
	CypherParserEscapedChar           = 96
	CypherParserHexInteger            = 97
	CypherParserDecimalInteger        = 98
	CypherParserOctalInteger          = 99
	CypherParserHexLetter             = 100
	CypherParserHexDigit              = 101
	CypherParserDigit                 = 102
	CypherParserNonZeroDigit          = 103
	CypherParserNonZeroOctDigit       = 104
	CypherParserOctDigit              = 105
	CypherParserZeroDigit             = 106
	CypherParserExponentDecimalReal   = 107
	CypherParserRegularDecimalReal    = 108
	CypherParserCONSTRAINT            = 109
	CypherParserDO                    = 110
	CypherParserFOR                   = 111
	CypherParserREQUIRE               = 112
	CypherParserUNIQUE                = 113
	CypherParserMANDATORY             = 114
	CypherParserSCALAR                = 115
	CypherParserOF                    = 116
	CypherParserADD                   = 117
	CypherParserDROP                  = 118
	CypherParserFILTER                = 119
	CypherParserEXTRACT               = 120
	CypherParserUnescapedSymbolicName = 121
	CypherParserIdentifierStart       = 122
	CypherParserIdentifierPart        = 123
	CypherParserEscapedSymbolicName   = 124
	CypherParserSP                    = 125
	CypherParserWHITESPACE            = 126
	CypherParserComment               = 127
)

// CypherParser rules.
const (
	CypherParserRULE_oC_Cypher                           = 0
	CypherParserRULE_oC_Statement                        = 1
	CypherParserRULE_oC_Query                            = 2
	CypherParserRULE_oC_RegularQuery                     = 3
	CypherParserRULE_oC_Union                            = 4
	CypherParserRULE_oC_SingleQuery                      = 5
	CypherParserRULE_oC_SinglePartQuery                  = 6
	CypherParserRULE_oC_MultiPartQuery                   = 7
	CypherParserRULE_oC_UpdatingClause                   = 8
	CypherParserRULE_oC_ReadingClause                    = 9
	CypherParserRULE_oC_Match                            = 10
	CypherParserRULE_oC_Unwind                           = 11
	CypherParserRULE_oC_Merge                            = 12
	CypherParserRULE_oC_MergeAction                      = 13
	CypherParserRULE_oC_Create                           = 14
	CypherParserRULE_oC_Set                              = 15
	CypherParserRULE_oC_SetItem                          = 16
	CypherParserRULE_oC_Delete                           = 17
	CypherParserRULE_oC_Remove                           = 18
	CypherParserRULE_oC_RemoveItem                       = 19
	CypherParserRULE_oC_InQueryCall                      = 20
	CypherParserRULE_oC_StandaloneCall                   = 21
	CypherParserRULE_oC_YieldItems                       = 22
	CypherParserRULE_oC_YieldItem                        = 23
	CypherParserRULE_oC_With                             = 24
	CypherParserRULE_oC_Return                           = 25
	CypherParserRULE_oC_ReturnBody                       = 26
	CypherParserRULE_oC_ReturnItems                      = 27
	CypherParserRULE_oC_ReturnItem                       = 28
	CypherParserRULE_oC_Order                            = 29
	CypherParserRULE_oC_Skip                             = 30
	CypherParserRULE_oC_Limit                            = 31
	CypherParserRULE_oC_SortItem                         = 32
	CypherParserRULE_oC_Where                            = 33
	CypherParserRULE_oC_Pattern                          = 34
	CypherParserRULE_oC_PatternPart                      = 35
	CypherParserRULE_oC_AnonymousPatternPart             = 36
	CypherParserRULE_oC_PatternElement                   = 37
	CypherParserRULE_oC_NodePattern                      = 38
	CypherParserRULE_oC_PatternElementChain              = 39
	CypherParserRULE_oC_RelationshipPattern              = 40
	CypherParserRULE_oC_RelationshipDetail               = 41
	CypherParserRULE_oC_Properties                       = 42
	CypherParserRULE_oC_RelationshipTypes                = 43
	CypherParserRULE_oC_NodeLabels                       = 44
	CypherParserRULE_oC_NodeLabel                        = 45
	CypherParserRULE_oC_RangeLiteral                     = 46
	CypherParserRULE_oC_LabelName                        = 47
	CypherParserRULE_oC_RelTypeName                      = 48
	CypherParserRULE_oC_Expression                       = 49
	CypherParserRULE_oC_OrExpression                     = 50
	CypherParserRULE_oC_XorExpression                    = 51
	CypherParserRULE_oC_AndExpression                    = 52
	CypherParserRULE_oC_NotExpression                    = 53
	CypherParserRULE_oC_ComparisonExpression             = 54
	CypherParserRULE_oC_AddOrSubtractExpression          = 55
	CypherParserRULE_oC_MultiplyDivideModuloExpression   = 56
	CypherParserRULE_oC_PowerOfExpression                = 57
	CypherParserRULE_oC_UnaryAddOrSubtractExpression     = 58
	CypherParserRULE_oC_StringListNullOperatorExpression = 59
	CypherParserRULE_oC_ListOperatorExpression           = 60
	CypherParserRULE_oC_StringOperatorExpression         = 61
	CypherParserRULE_oC_NullOperatorExpression           = 62
	CypherParserRULE_oC_PropertyOrLabelsExpression       = 63
	CypherParserRULE_oC_Atom                             = 64
	CypherParserRULE_oC_Literal                          = 65
	CypherParserRULE_oC_BooleanLiteral                   = 66
	CypherParserRULE_oC_ListLiteral                      = 67
	CypherParserRULE_oC_PartialComparisonExpression      = 68
	CypherParserRULE_oC_ParenthesizedExpression          = 69
	CypherParserRULE_oC_RelationshipsPattern             = 70
	CypherParserRULE_oC_FilterExpression                 = 71
	CypherParserRULE_oC_IdInColl                         = 72
	CypherParserRULE_oC_FunctionInvocation               = 73
	CypherParserRULE_oC_FunctionName                     = 74
	CypherParserRULE_oC_ExplicitProcedureInvocation      = 75
	CypherParserRULE_oC_ImplicitProcedureInvocation      = 76
	CypherParserRULE_oC_ProcedureResultField             = 77
	CypherParserRULE_oC_ProcedureName                    = 78
	CypherParserRULE_oC_Namespace                        = 79
	CypherParserRULE_oC_ListComprehension                = 80
	CypherParserRULE_oC_PatternComprehension             = 81
	CypherParserRULE_oC_PropertyLookup                   = 82
	CypherParserRULE_oC_CaseExpression                   = 83
	CypherParserRULE_oC_CaseAlternatives                 = 84
	CypherParserRULE_oC_Variable                         = 85
	CypherParserRULE_oC_NumberLiteral                    = 86
	CypherParserRULE_oC_MapLiteral                       = 87
	CypherParserRULE_oC_Parameter                        = 88
	CypherParserRULE_oC_PropertyExpression               = 89
	CypherParserRULE_oC_PropertyKeyName                  = 90
	CypherParserRULE_oC_IntegerLiteral                   = 91
	CypherParserRULE_oC_DoubleLiteral                    = 92
	CypherParserRULE_oC_SchemaName                       = 93
	CypherParserRULE_oC_ReservedWord                     = 94
	CypherParserRULE_oC_SymbolicName                     = 95
	CypherParserRULE_oC_LeftArrowHead                    = 96
	CypherParserRULE_oC_RightArrowHead                   = 97
	CypherParserRULE_oC_Dash                             = 98
)

// IOC_CypherContext is an interface to support dynamic dispatch.
type IOC_CypherContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_CypherContext differentiates from other interfaces.
	IsOC_CypherContext()
}

type OC_CypherContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_CypherContext() *OC_CypherContext {
	var p = new(OC_CypherContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_Cypher
	return p
}

func (*OC_CypherContext) IsOC_CypherContext() {}

func NewOC_CypherContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_CypherContext {
	var p = new(OC_CypherContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_Cypher

	return p
}

func (s *OC_CypherContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_CypherContext) OC_Statement() IOC_StatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_StatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_StatementContext)
}

func (s *OC_CypherContext) EOF() antlr.TerminalNode {
	return s.GetToken(CypherParserEOF, 0)
}

func (s *OC_CypherContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_CypherContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_CypherContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_CypherContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_CypherContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_Cypher(s)
	}
}

func (s *OC_CypherContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_Cypher(s)
	}
}

func (p *CypherParser) OC_Cypher() (localctx IOC_CypherContext) {
	localctx = NewOC_CypherContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, CypherParserRULE_oC_Cypher)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(199)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserSP {
		{
			p.SetState(198)
			p.Match(CypherParserSP)
		}

	}
	{
		p.SetState(201)
		p.OC_Statement()
	}
	p.SetState(206)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 2, p.GetParserRuleContext()) == 1 {
		p.SetState(203)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(202)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(205)
			p.Match(CypherParserT__0)
		}

	}
	p.SetState(209)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserSP {
		{
			p.SetState(208)
			p.Match(CypherParserSP)
		}

	}
	{
		p.SetState(211)
		p.Match(CypherParserEOF)
	}

	return localctx
}

// IOC_StatementContext is an interface to support dynamic dispatch.
type IOC_StatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_StatementContext differentiates from other interfaces.
	IsOC_StatementContext()
}

type OC_StatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_StatementContext() *OC_StatementContext {
	var p = new(OC_StatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_Statement
	return p
}

func (*OC_StatementContext) IsOC_StatementContext() {}

func NewOC_StatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_StatementContext {
	var p = new(OC_StatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_Statement

	return p
}

func (s *OC_StatementContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_StatementContext) OC_Query() IOC_QueryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_QueryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_QueryContext)
}

func (s *OC_StatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_StatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_StatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_Statement(s)
	}
}

func (s *OC_StatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_Statement(s)
	}
}

func (p *CypherParser) OC_Statement() (localctx IOC_StatementContext) {
	localctx = NewOC_StatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, CypherParserRULE_oC_Statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(213)
		p.OC_Query()
	}

	return localctx
}

// IOC_QueryContext is an interface to support dynamic dispatch.
type IOC_QueryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_QueryContext differentiates from other interfaces.
	IsOC_QueryContext()
}

type OC_QueryContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_QueryContext() *OC_QueryContext {
	var p = new(OC_QueryContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_Query
	return p
}

func (*OC_QueryContext) IsOC_QueryContext() {}

func NewOC_QueryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_QueryContext {
	var p = new(OC_QueryContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_Query

	return p
}

func (s *OC_QueryContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_QueryContext) OC_RegularQuery() IOC_RegularQueryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_RegularQueryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_RegularQueryContext)
}

func (s *OC_QueryContext) OC_StandaloneCall() IOC_StandaloneCallContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_StandaloneCallContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_StandaloneCallContext)
}

func (s *OC_QueryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_QueryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_QueryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_Query(s)
	}
}

func (s *OC_QueryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_Query(s)
	}
}

func (p *CypherParser) OC_Query() (localctx IOC_QueryContext) {
	localctx = NewOC_QueryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, CypherParserRULE_oC_Query)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(217)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 4, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(215)
			p.OC_RegularQuery()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(216)
			p.OC_StandaloneCall()
		}

	}

	return localctx
}

// IOC_RegularQueryContext is an interface to support dynamic dispatch.
type IOC_RegularQueryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_RegularQueryContext differentiates from other interfaces.
	IsOC_RegularQueryContext()
}

type OC_RegularQueryContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_RegularQueryContext() *OC_RegularQueryContext {
	var p = new(OC_RegularQueryContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_RegularQuery
	return p
}

func (*OC_RegularQueryContext) IsOC_RegularQueryContext() {}

func NewOC_RegularQueryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_RegularQueryContext {
	var p = new(OC_RegularQueryContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_RegularQuery

	return p
}

func (s *OC_RegularQueryContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_RegularQueryContext) OC_SingleQuery() IOC_SingleQueryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_SingleQueryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_SingleQueryContext)
}

func (s *OC_RegularQueryContext) AllOC_Union() []IOC_UnionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOC_UnionContext)(nil)).Elem())
	var tst = make([]IOC_UnionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOC_UnionContext)
		}
	}

	return tst
}

func (s *OC_RegularQueryContext) OC_Union(i int) IOC_UnionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_UnionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOC_UnionContext)
}

func (s *OC_RegularQueryContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_RegularQueryContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_RegularQueryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_RegularQueryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_RegularQueryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_RegularQuery(s)
	}
}

func (s *OC_RegularQueryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_RegularQuery(s)
	}
}

func (p *CypherParser) OC_RegularQuery() (localctx IOC_RegularQueryContext) {
	localctx = NewOC_RegularQueryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, CypherParserRULE_oC_RegularQuery)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(219)
		p.OC_SingleQuery()
	}
	p.SetState(226)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 6, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(221)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == CypherParserSP {
				{
					p.SetState(220)
					p.Match(CypherParserSP)
				}

			}
			{
				p.SetState(223)
				p.OC_Union()
			}

		}
		p.SetState(228)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 6, p.GetParserRuleContext())
	}

	return localctx
}

// IOC_UnionContext is an interface to support dynamic dispatch.
type IOC_UnionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_UnionContext differentiates from other interfaces.
	IsOC_UnionContext()
}

type OC_UnionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_UnionContext() *OC_UnionContext {
	var p = new(OC_UnionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_Union
	return p
}

func (*OC_UnionContext) IsOC_UnionContext() {}

func NewOC_UnionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_UnionContext {
	var p = new(OC_UnionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_Union

	return p
}

func (s *OC_UnionContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_UnionContext) UNION() antlr.TerminalNode {
	return s.GetToken(CypherParserUNION, 0)
}

func (s *OC_UnionContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_UnionContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_UnionContext) ALL() antlr.TerminalNode {
	return s.GetToken(CypherParserALL, 0)
}

func (s *OC_UnionContext) OC_SingleQuery() IOC_SingleQueryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_SingleQueryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_SingleQueryContext)
}

func (s *OC_UnionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_UnionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_UnionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_Union(s)
	}
}

func (s *OC_UnionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_Union(s)
	}
}

func (p *CypherParser) OC_Union() (localctx IOC_UnionContext) {
	localctx = NewOC_UnionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, CypherParserRULE_oC_Union)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(241)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 9, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(229)
			p.Match(CypherParserUNION)
		}
		{
			p.SetState(230)
			p.Match(CypherParserSP)
		}
		{
			p.SetState(231)
			p.Match(CypherParserALL)
		}
		p.SetState(233)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(232)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(235)
			p.OC_SingleQuery()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(236)
			p.Match(CypherParserUNION)
		}
		p.SetState(238)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(237)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(240)
			p.OC_SingleQuery()
		}

	}

	return localctx
}

// IOC_SingleQueryContext is an interface to support dynamic dispatch.
type IOC_SingleQueryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_SingleQueryContext differentiates from other interfaces.
	IsOC_SingleQueryContext()
}

type OC_SingleQueryContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_SingleQueryContext() *OC_SingleQueryContext {
	var p = new(OC_SingleQueryContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_SingleQuery
	return p
}

func (*OC_SingleQueryContext) IsOC_SingleQueryContext() {}

func NewOC_SingleQueryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_SingleQueryContext {
	var p = new(OC_SingleQueryContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_SingleQuery

	return p
}

func (s *OC_SingleQueryContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_SingleQueryContext) OC_SinglePartQuery() IOC_SinglePartQueryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_SinglePartQueryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_SinglePartQueryContext)
}

func (s *OC_SingleQueryContext) OC_MultiPartQuery() IOC_MultiPartQueryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_MultiPartQueryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_MultiPartQueryContext)
}

func (s *OC_SingleQueryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_SingleQueryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_SingleQueryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_SingleQuery(s)
	}
}

func (s *OC_SingleQueryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_SingleQuery(s)
	}
}

func (p *CypherParser) OC_SingleQuery() (localctx IOC_SingleQueryContext) {
	localctx = NewOC_SingleQueryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, CypherParserRULE_oC_SingleQuery)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(245)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 10, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(243)
			p.OC_SinglePartQuery()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(244)
			p.OC_MultiPartQuery()
		}

	}

	return localctx
}

// IOC_SinglePartQueryContext is an interface to support dynamic dispatch.
type IOC_SinglePartQueryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_SinglePartQueryContext differentiates from other interfaces.
	IsOC_SinglePartQueryContext()
}

type OC_SinglePartQueryContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_SinglePartQueryContext() *OC_SinglePartQueryContext {
	var p = new(OC_SinglePartQueryContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_SinglePartQuery
	return p
}

func (*OC_SinglePartQueryContext) IsOC_SinglePartQueryContext() {}

func NewOC_SinglePartQueryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_SinglePartQueryContext {
	var p = new(OC_SinglePartQueryContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_SinglePartQuery

	return p
}

func (s *OC_SinglePartQueryContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_SinglePartQueryContext) OC_Return() IOC_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_ReturnContext)
}

func (s *OC_SinglePartQueryContext) AllOC_ReadingClause() []IOC_ReadingClauseContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOC_ReadingClauseContext)(nil)).Elem())
	var tst = make([]IOC_ReadingClauseContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOC_ReadingClauseContext)
		}
	}

	return tst
}

func (s *OC_SinglePartQueryContext) OC_ReadingClause(i int) IOC_ReadingClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_ReadingClauseContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOC_ReadingClauseContext)
}

func (s *OC_SinglePartQueryContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_SinglePartQueryContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_SinglePartQueryContext) AllOC_UpdatingClause() []IOC_UpdatingClauseContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOC_UpdatingClauseContext)(nil)).Elem())
	var tst = make([]IOC_UpdatingClauseContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOC_UpdatingClauseContext)
		}
	}

	return tst
}

func (s *OC_SinglePartQueryContext) OC_UpdatingClause(i int) IOC_UpdatingClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_UpdatingClauseContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOC_UpdatingClauseContext)
}

func (s *OC_SinglePartQueryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_SinglePartQueryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_SinglePartQueryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_SinglePartQuery(s)
	}
}

func (s *OC_SinglePartQueryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_SinglePartQuery(s)
	}
}

func (p *CypherParser) OC_SinglePartQuery() (localctx IOC_SinglePartQueryContext) {
	localctx = NewOC_SinglePartQueryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, CypherParserRULE_oC_SinglePartQuery)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(282)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 19, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(253)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ((_la-48)&-(0x1f+1)) == 0 && ((1<<uint((_la-48)))&((1<<(CypherParserOPTIONAL-48))|(1<<(CypherParserMATCH-48))|(1<<(CypherParserUNWIND-48))|(1<<(CypherParserCALL-48)))) != 0 {
			{
				p.SetState(247)
				p.OC_ReadingClause()
			}
			p.SetState(249)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == CypherParserSP {
				{
					p.SetState(248)
					p.Match(CypherParserSP)
				}

			}

			p.SetState(255)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(256)
			p.OC_Return()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(263)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ((_la-48)&-(0x1f+1)) == 0 && ((1<<uint((_la-48)))&((1<<(CypherParserOPTIONAL-48))|(1<<(CypherParserMATCH-48))|(1<<(CypherParserUNWIND-48))|(1<<(CypherParserCALL-48)))) != 0 {
			{
				p.SetState(257)
				p.OC_ReadingClause()
			}
			p.SetState(259)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == CypherParserSP {
				{
					p.SetState(258)
					p.Match(CypherParserSP)
				}

			}

			p.SetState(265)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(266)
			p.OC_UpdatingClause()
		}
		p.SetState(273)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 16, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				p.SetState(268)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == CypherParserSP {
					{
						p.SetState(267)
						p.Match(CypherParserSP)
					}

				}
				{
					p.SetState(270)
					p.OC_UpdatingClause()
				}

			}
			p.SetState(275)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 16, p.GetParserRuleContext())
		}
		p.SetState(280)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 18, p.GetParserRuleContext()) == 1 {
			p.SetState(277)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == CypherParserSP {
				{
					p.SetState(276)
					p.Match(CypherParserSP)
				}

			}
			{
				p.SetState(279)
				p.OC_Return()
			}

		}

	}

	return localctx
}

// IOC_MultiPartQueryContext is an interface to support dynamic dispatch.
type IOC_MultiPartQueryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_MultiPartQueryContext differentiates from other interfaces.
	IsOC_MultiPartQueryContext()
}

type OC_MultiPartQueryContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_MultiPartQueryContext() *OC_MultiPartQueryContext {
	var p = new(OC_MultiPartQueryContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_MultiPartQuery
	return p
}

func (*OC_MultiPartQueryContext) IsOC_MultiPartQueryContext() {}

func NewOC_MultiPartQueryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_MultiPartQueryContext {
	var p = new(OC_MultiPartQueryContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_MultiPartQuery

	return p
}

func (s *OC_MultiPartQueryContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_MultiPartQueryContext) OC_SinglePartQuery() IOC_SinglePartQueryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_SinglePartQueryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_SinglePartQueryContext)
}

func (s *OC_MultiPartQueryContext) AllOC_With() []IOC_WithContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOC_WithContext)(nil)).Elem())
	var tst = make([]IOC_WithContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOC_WithContext)
		}
	}

	return tst
}

func (s *OC_MultiPartQueryContext) OC_With(i int) IOC_WithContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_WithContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOC_WithContext)
}

func (s *OC_MultiPartQueryContext) AllOC_ReadingClause() []IOC_ReadingClauseContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOC_ReadingClauseContext)(nil)).Elem())
	var tst = make([]IOC_ReadingClauseContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOC_ReadingClauseContext)
		}
	}

	return tst
}

func (s *OC_MultiPartQueryContext) OC_ReadingClause(i int) IOC_ReadingClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_ReadingClauseContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOC_ReadingClauseContext)
}

func (s *OC_MultiPartQueryContext) AllOC_UpdatingClause() []IOC_UpdatingClauseContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOC_UpdatingClauseContext)(nil)).Elem())
	var tst = make([]IOC_UpdatingClauseContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOC_UpdatingClauseContext)
		}
	}

	return tst
}

func (s *OC_MultiPartQueryContext) OC_UpdatingClause(i int) IOC_UpdatingClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_UpdatingClauseContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOC_UpdatingClauseContext)
}

func (s *OC_MultiPartQueryContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_MultiPartQueryContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_MultiPartQueryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_MultiPartQueryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_MultiPartQueryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_MultiPartQuery(s)
	}
}

func (s *OC_MultiPartQueryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_MultiPartQuery(s)
	}
}

func (p *CypherParser) OC_MultiPartQuery() (localctx IOC_MultiPartQueryContext) {
	localctx = NewOC_MultiPartQueryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, CypherParserRULE_oC_MultiPartQuery)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(306)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			p.SetState(290)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for ((_la-48)&-(0x1f+1)) == 0 && ((1<<uint((_la-48)))&((1<<(CypherParserOPTIONAL-48))|(1<<(CypherParserMATCH-48))|(1<<(CypherParserUNWIND-48))|(1<<(CypherParserCALL-48)))) != 0 {
				{
					p.SetState(284)
					p.OC_ReadingClause()
				}
				p.SetState(286)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == CypherParserSP {
					{
						p.SetState(285)
						p.Match(CypherParserSP)
					}

				}

				p.SetState(292)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			p.SetState(299)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for ((_la-52)&-(0x1f+1)) == 0 && ((1<<uint((_la-52)))&((1<<(CypherParserMERGE-52))|(1<<(CypherParserCREATE-52))|(1<<(CypherParserSET-52))|(1<<(CypherParserDETACH-52))|(1<<(CypherParserDELETE-52))|(1<<(CypherParserREMOVE-52)))) != 0 {
				{
					p.SetState(293)
					p.OC_UpdatingClause()
				}
				p.SetState(295)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == CypherParserSP {
					{
						p.SetState(294)
						p.Match(CypherParserSP)
					}

				}

				p.SetState(301)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(302)
				p.OC_With()
			}
			p.SetState(304)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == CypherParserSP {
				{
					p.SetState(303)
					p.Match(CypherParserSP)
				}

			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(308)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 25, p.GetParserRuleContext())
	}
	{
		p.SetState(310)
		p.OC_SinglePartQuery()
	}

	return localctx
}

// IOC_UpdatingClauseContext is an interface to support dynamic dispatch.
type IOC_UpdatingClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_UpdatingClauseContext differentiates from other interfaces.
	IsOC_UpdatingClauseContext()
}

type OC_UpdatingClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_UpdatingClauseContext() *OC_UpdatingClauseContext {
	var p = new(OC_UpdatingClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_UpdatingClause
	return p
}

func (*OC_UpdatingClauseContext) IsOC_UpdatingClauseContext() {}

func NewOC_UpdatingClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_UpdatingClauseContext {
	var p = new(OC_UpdatingClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_UpdatingClause

	return p
}

func (s *OC_UpdatingClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_UpdatingClauseContext) OC_Create() IOC_CreateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_CreateContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_CreateContext)
}

func (s *OC_UpdatingClauseContext) OC_Merge() IOC_MergeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_MergeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_MergeContext)
}

func (s *OC_UpdatingClauseContext) OC_Delete() IOC_DeleteContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_DeleteContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_DeleteContext)
}

func (s *OC_UpdatingClauseContext) OC_Set() IOC_SetContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_SetContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_SetContext)
}

func (s *OC_UpdatingClauseContext) OC_Remove() IOC_RemoveContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_RemoveContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_RemoveContext)
}

func (s *OC_UpdatingClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_UpdatingClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_UpdatingClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_UpdatingClause(s)
	}
}

func (s *OC_UpdatingClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_UpdatingClause(s)
	}
}

func (p *CypherParser) OC_UpdatingClause() (localctx IOC_UpdatingClauseContext) {
	localctx = NewOC_UpdatingClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, CypherParserRULE_oC_UpdatingClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(317)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CypherParserCREATE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(312)
			p.OC_Create()
		}

	case CypherParserMERGE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(313)
			p.OC_Merge()
		}

	case CypherParserDETACH, CypherParserDELETE:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(314)
			p.OC_Delete()
		}

	case CypherParserSET:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(315)
			p.OC_Set()
		}

	case CypherParserREMOVE:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(316)
			p.OC_Remove()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IOC_ReadingClauseContext is an interface to support dynamic dispatch.
type IOC_ReadingClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_ReadingClauseContext differentiates from other interfaces.
	IsOC_ReadingClauseContext()
}

type OC_ReadingClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_ReadingClauseContext() *OC_ReadingClauseContext {
	var p = new(OC_ReadingClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_ReadingClause
	return p
}

func (*OC_ReadingClauseContext) IsOC_ReadingClauseContext() {}

func NewOC_ReadingClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_ReadingClauseContext {
	var p = new(OC_ReadingClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_ReadingClause

	return p
}

func (s *OC_ReadingClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_ReadingClauseContext) OC_Match() IOC_MatchContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_MatchContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_MatchContext)
}

func (s *OC_ReadingClauseContext) OC_Unwind() IOC_UnwindContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_UnwindContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_UnwindContext)
}

func (s *OC_ReadingClauseContext) OC_InQueryCall() IOC_InQueryCallContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_InQueryCallContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_InQueryCallContext)
}

func (s *OC_ReadingClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_ReadingClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_ReadingClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_ReadingClause(s)
	}
}

func (s *OC_ReadingClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_ReadingClause(s)
	}
}

func (p *CypherParser) OC_ReadingClause() (localctx IOC_ReadingClauseContext) {
	localctx = NewOC_ReadingClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, CypherParserRULE_oC_ReadingClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(322)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CypherParserOPTIONAL, CypherParserMATCH:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(319)
			p.OC_Match()
		}

	case CypherParserUNWIND:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(320)
			p.OC_Unwind()
		}

	case CypherParserCALL:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(321)
			p.OC_InQueryCall()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IOC_MatchContext is an interface to support dynamic dispatch.
type IOC_MatchContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_MatchContext differentiates from other interfaces.
	IsOC_MatchContext()
}

type OC_MatchContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_MatchContext() *OC_MatchContext {
	var p = new(OC_MatchContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_Match
	return p
}

func (*OC_MatchContext) IsOC_MatchContext() {}

func NewOC_MatchContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_MatchContext {
	var p = new(OC_MatchContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_Match

	return p
}

func (s *OC_MatchContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_MatchContext) MATCH() antlr.TerminalNode {
	return s.GetToken(CypherParserMATCH, 0)
}

func (s *OC_MatchContext) OC_Pattern() IOC_PatternContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_PatternContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_PatternContext)
}

func (s *OC_MatchContext) OPTIONAL() antlr.TerminalNode {
	return s.GetToken(CypherParserOPTIONAL, 0)
}

func (s *OC_MatchContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_MatchContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_MatchContext) OC_Where() IOC_WhereContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_WhereContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_WhereContext)
}

func (s *OC_MatchContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_MatchContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_MatchContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_Match(s)
	}
}

func (s *OC_MatchContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_Match(s)
	}
}

func (p *CypherParser) OC_Match() (localctx IOC_MatchContext) {
	localctx = NewOC_MatchContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, CypherParserRULE_oC_Match)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(326)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserOPTIONAL {
		{
			p.SetState(324)
			p.Match(CypherParserOPTIONAL)
		}
		{
			p.SetState(325)
			p.Match(CypherParserSP)
		}

	}
	{
		p.SetState(328)
		p.Match(CypherParserMATCH)
	}
	p.SetState(330)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserSP {
		{
			p.SetState(329)
			p.Match(CypherParserSP)
		}

	}
	{
		p.SetState(332)
		p.OC_Pattern()
	}
	p.SetState(337)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 31, p.GetParserRuleContext()) == 1 {
		p.SetState(334)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(333)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(336)
			p.OC_Where()
		}

	}

	return localctx
}

// IOC_UnwindContext is an interface to support dynamic dispatch.
type IOC_UnwindContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_UnwindContext differentiates from other interfaces.
	IsOC_UnwindContext()
}

type OC_UnwindContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_UnwindContext() *OC_UnwindContext {
	var p = new(OC_UnwindContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_Unwind
	return p
}

func (*OC_UnwindContext) IsOC_UnwindContext() {}

func NewOC_UnwindContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_UnwindContext {
	var p = new(OC_UnwindContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_Unwind

	return p
}

func (s *OC_UnwindContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_UnwindContext) UNWIND() antlr.TerminalNode {
	return s.GetToken(CypherParserUNWIND, 0)
}

func (s *OC_UnwindContext) OC_Expression() IOC_ExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_ExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_ExpressionContext)
}

func (s *OC_UnwindContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_UnwindContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_UnwindContext) AS() antlr.TerminalNode {
	return s.GetToken(CypherParserAS, 0)
}

func (s *OC_UnwindContext) OC_Variable() IOC_VariableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_VariableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_VariableContext)
}

func (s *OC_UnwindContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_UnwindContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_UnwindContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_Unwind(s)
	}
}

func (s *OC_UnwindContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_Unwind(s)
	}
}

func (p *CypherParser) OC_Unwind() (localctx IOC_UnwindContext) {
	localctx = NewOC_UnwindContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 22, CypherParserRULE_oC_Unwind)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(339)
		p.Match(CypherParserUNWIND)
	}
	p.SetState(341)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserSP {
		{
			p.SetState(340)
			p.Match(CypherParserSP)
		}

	}
	{
		p.SetState(343)
		p.OC_Expression()
	}
	{
		p.SetState(344)
		p.Match(CypherParserSP)
	}
	{
		p.SetState(345)
		p.Match(CypherParserAS)
	}
	{
		p.SetState(346)
		p.Match(CypherParserSP)
	}
	{
		p.SetState(347)
		p.OC_Variable()
	}

	return localctx
}

// IOC_MergeContext is an interface to support dynamic dispatch.
type IOC_MergeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_MergeContext differentiates from other interfaces.
	IsOC_MergeContext()
}

type OC_MergeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_MergeContext() *OC_MergeContext {
	var p = new(OC_MergeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_Merge
	return p
}

func (*OC_MergeContext) IsOC_MergeContext() {}

func NewOC_MergeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_MergeContext {
	var p = new(OC_MergeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_Merge

	return p
}

func (s *OC_MergeContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_MergeContext) MERGE() antlr.TerminalNode {
	return s.GetToken(CypherParserMERGE, 0)
}

func (s *OC_MergeContext) OC_PatternPart() IOC_PatternPartContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_PatternPartContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_PatternPartContext)
}

func (s *OC_MergeContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_MergeContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_MergeContext) AllOC_MergeAction() []IOC_MergeActionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOC_MergeActionContext)(nil)).Elem())
	var tst = make([]IOC_MergeActionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOC_MergeActionContext)
		}
	}

	return tst
}

func (s *OC_MergeContext) OC_MergeAction(i int) IOC_MergeActionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_MergeActionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOC_MergeActionContext)
}

func (s *OC_MergeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_MergeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_MergeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_Merge(s)
	}
}

func (s *OC_MergeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_Merge(s)
	}
}

func (p *CypherParser) OC_Merge() (localctx IOC_MergeContext) {
	localctx = NewOC_MergeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, CypherParserRULE_oC_Merge)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(349)
		p.Match(CypherParserMERGE)
	}
	p.SetState(351)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserSP {
		{
			p.SetState(350)
			p.Match(CypherParserSP)
		}

	}
	{
		p.SetState(353)
		p.OC_PatternPart()
	}
	p.SetState(358)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 34, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(354)
				p.Match(CypherParserSP)
			}
			{
				p.SetState(355)
				p.OC_MergeAction()
			}

		}
		p.SetState(360)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 34, p.GetParserRuleContext())
	}

	return localctx
}

// IOC_MergeActionContext is an interface to support dynamic dispatch.
type IOC_MergeActionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_MergeActionContext differentiates from other interfaces.
	IsOC_MergeActionContext()
}

type OC_MergeActionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_MergeActionContext() *OC_MergeActionContext {
	var p = new(OC_MergeActionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_MergeAction
	return p
}

func (*OC_MergeActionContext) IsOC_MergeActionContext() {}

func NewOC_MergeActionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_MergeActionContext {
	var p = new(OC_MergeActionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_MergeAction

	return p
}

func (s *OC_MergeActionContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_MergeActionContext) ON() antlr.TerminalNode {
	return s.GetToken(CypherParserON, 0)
}

func (s *OC_MergeActionContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_MergeActionContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_MergeActionContext) MATCH() antlr.TerminalNode {
	return s.GetToken(CypherParserMATCH, 0)
}

func (s *OC_MergeActionContext) OC_Set() IOC_SetContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_SetContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_SetContext)
}

func (s *OC_MergeActionContext) CREATE() antlr.TerminalNode {
	return s.GetToken(CypherParserCREATE, 0)
}

func (s *OC_MergeActionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_MergeActionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_MergeActionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_MergeAction(s)
	}
}

func (s *OC_MergeActionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_MergeAction(s)
	}
}

func (p *CypherParser) OC_MergeAction() (localctx IOC_MergeActionContext) {
	localctx = NewOC_MergeActionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 26, CypherParserRULE_oC_MergeAction)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(371)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 35, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(361)
			p.Match(CypherParserON)
		}
		{
			p.SetState(362)
			p.Match(CypherParserSP)
		}
		{
			p.SetState(363)
			p.Match(CypherParserMATCH)
		}
		{
			p.SetState(364)
			p.Match(CypherParserSP)
		}
		{
			p.SetState(365)
			p.OC_Set()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(366)
			p.Match(CypherParserON)
		}
		{
			p.SetState(367)
			p.Match(CypherParserSP)
		}
		{
			p.SetState(368)
			p.Match(CypherParserCREATE)
		}
		{
			p.SetState(369)
			p.Match(CypherParserSP)
		}
		{
			p.SetState(370)
			p.OC_Set()
		}

	}

	return localctx
}

// IOC_CreateContext is an interface to support dynamic dispatch.
type IOC_CreateContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_CreateContext differentiates from other interfaces.
	IsOC_CreateContext()
}

type OC_CreateContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_CreateContext() *OC_CreateContext {
	var p = new(OC_CreateContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_Create
	return p
}

func (*OC_CreateContext) IsOC_CreateContext() {}

func NewOC_CreateContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_CreateContext {
	var p = new(OC_CreateContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_Create

	return p
}

func (s *OC_CreateContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_CreateContext) CREATE() antlr.TerminalNode {
	return s.GetToken(CypherParserCREATE, 0)
}

func (s *OC_CreateContext) OC_Pattern() IOC_PatternContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_PatternContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_PatternContext)
}

func (s *OC_CreateContext) SP() antlr.TerminalNode {
	return s.GetToken(CypherParserSP, 0)
}

func (s *OC_CreateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_CreateContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_CreateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_Create(s)
	}
}

func (s *OC_CreateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_Create(s)
	}
}

func (p *CypherParser) OC_Create() (localctx IOC_CreateContext) {
	localctx = NewOC_CreateContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, CypherParserRULE_oC_Create)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(373)
		p.Match(CypherParserCREATE)
	}
	p.SetState(375)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserSP {
		{
			p.SetState(374)
			p.Match(CypherParserSP)
		}

	}
	{
		p.SetState(377)
		p.OC_Pattern()
	}

	return localctx
}

// IOC_SetContext is an interface to support dynamic dispatch.
type IOC_SetContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_SetContext differentiates from other interfaces.
	IsOC_SetContext()
}

type OC_SetContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_SetContext() *OC_SetContext {
	var p = new(OC_SetContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_Set
	return p
}

func (*OC_SetContext) IsOC_SetContext() {}

func NewOC_SetContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_SetContext {
	var p = new(OC_SetContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_Set

	return p
}

func (s *OC_SetContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_SetContext) SET() antlr.TerminalNode {
	return s.GetToken(CypherParserSET, 0)
}

func (s *OC_SetContext) AllOC_SetItem() []IOC_SetItemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOC_SetItemContext)(nil)).Elem())
	var tst = make([]IOC_SetItemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOC_SetItemContext)
		}
	}

	return tst
}

func (s *OC_SetContext) OC_SetItem(i int) IOC_SetItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_SetItemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOC_SetItemContext)
}

func (s *OC_SetContext) SP() antlr.TerminalNode {
	return s.GetToken(CypherParserSP, 0)
}

func (s *OC_SetContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_SetContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_SetContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_Set(s)
	}
}

func (s *OC_SetContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_Set(s)
	}
}

func (p *CypherParser) OC_Set() (localctx IOC_SetContext) {
	localctx = NewOC_SetContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 30, CypherParserRULE_oC_Set)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(379)
		p.Match(CypherParserSET)
	}
	p.SetState(381)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserSP {
		{
			p.SetState(380)
			p.Match(CypherParserSP)
		}

	}
	{
		p.SetState(383)
		p.OC_SetItem()
	}
	p.SetState(388)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == CypherParserT__1 {
		{
			p.SetState(384)
			p.Match(CypherParserT__1)
		}
		{
			p.SetState(385)
			p.OC_SetItem()
		}

		p.SetState(390)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IOC_SetItemContext is an interface to support dynamic dispatch.
type IOC_SetItemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_SetItemContext differentiates from other interfaces.
	IsOC_SetItemContext()
}

type OC_SetItemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_SetItemContext() *OC_SetItemContext {
	var p = new(OC_SetItemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_SetItem
	return p
}

func (*OC_SetItemContext) IsOC_SetItemContext() {}

func NewOC_SetItemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_SetItemContext {
	var p = new(OC_SetItemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_SetItem

	return p
}

func (s *OC_SetItemContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_SetItemContext) OC_PropertyExpression() IOC_PropertyExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_PropertyExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_PropertyExpressionContext)
}

func (s *OC_SetItemContext) OC_Expression() IOC_ExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_ExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_ExpressionContext)
}

func (s *OC_SetItemContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_SetItemContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_SetItemContext) OC_Variable() IOC_VariableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_VariableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_VariableContext)
}

func (s *OC_SetItemContext) OC_NodeLabels() IOC_NodeLabelsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_NodeLabelsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_NodeLabelsContext)
}

func (s *OC_SetItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_SetItemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_SetItemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_SetItem(s)
	}
}

func (s *OC_SetItemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_SetItem(s)
	}
}

func (p *CypherParser) OC_SetItem() (localctx IOC_SetItemContext) {
	localctx = NewOC_SetItemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, CypherParserRULE_oC_SetItem)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(427)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 46, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(391)
			p.OC_PropertyExpression()
		}
		p.SetState(393)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(392)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(395)
			p.Match(CypherParserT__2)
		}
		p.SetState(397)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(396)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(399)
			p.OC_Expression()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(401)
			p.OC_Variable()
		}
		p.SetState(403)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(402)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(405)
			p.Match(CypherParserT__2)
		}
		p.SetState(407)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(406)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(409)
			p.OC_Expression()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(411)
			p.OC_Variable()
		}
		p.SetState(413)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(412)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(415)
			p.Match(CypherParserT__3)
		}
		p.SetState(417)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(416)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(419)
			p.OC_Expression()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(421)
			p.OC_Variable()
		}
		p.SetState(423)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(422)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(425)
			p.OC_NodeLabels()
		}

	}

	return localctx
}

// IOC_DeleteContext is an interface to support dynamic dispatch.
type IOC_DeleteContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_DeleteContext differentiates from other interfaces.
	IsOC_DeleteContext()
}

type OC_DeleteContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_DeleteContext() *OC_DeleteContext {
	var p = new(OC_DeleteContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_Delete
	return p
}

func (*OC_DeleteContext) IsOC_DeleteContext() {}

func NewOC_DeleteContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_DeleteContext {
	var p = new(OC_DeleteContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_Delete

	return p
}

func (s *OC_DeleteContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_DeleteContext) DELETE() antlr.TerminalNode {
	return s.GetToken(CypherParserDELETE, 0)
}

func (s *OC_DeleteContext) AllOC_Expression() []IOC_ExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOC_ExpressionContext)(nil)).Elem())
	var tst = make([]IOC_ExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOC_ExpressionContext)
		}
	}

	return tst
}

func (s *OC_DeleteContext) OC_Expression(i int) IOC_ExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_ExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOC_ExpressionContext)
}

func (s *OC_DeleteContext) DETACH() antlr.TerminalNode {
	return s.GetToken(CypherParserDETACH, 0)
}

func (s *OC_DeleteContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_DeleteContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_DeleteContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_DeleteContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_DeleteContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_Delete(s)
	}
}

func (s *OC_DeleteContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_Delete(s)
	}
}

func (p *CypherParser) OC_Delete() (localctx IOC_DeleteContext) {
	localctx = NewOC_DeleteContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, CypherParserRULE_oC_Delete)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(431)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserDETACH {
		{
			p.SetState(429)
			p.Match(CypherParserDETACH)
		}
		{
			p.SetState(430)
			p.Match(CypherParserSP)
		}

	}
	{
		p.SetState(433)
		p.Match(CypherParserDELETE)
	}
	p.SetState(435)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserSP {
		{
			p.SetState(434)
			p.Match(CypherParserSP)
		}

	}
	{
		p.SetState(437)
		p.OC_Expression()
	}
	p.SetState(448)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 51, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(439)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == CypherParserSP {
				{
					p.SetState(438)
					p.Match(CypherParserSP)
				}

			}
			{
				p.SetState(441)
				p.Match(CypherParserT__1)
			}
			p.SetState(443)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == CypherParserSP {
				{
					p.SetState(442)
					p.Match(CypherParserSP)
				}

			}
			{
				p.SetState(445)
				p.OC_Expression()
			}

		}
		p.SetState(450)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 51, p.GetParserRuleContext())
	}

	return localctx
}

// IOC_RemoveContext is an interface to support dynamic dispatch.
type IOC_RemoveContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_RemoveContext differentiates from other interfaces.
	IsOC_RemoveContext()
}

type OC_RemoveContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_RemoveContext() *OC_RemoveContext {
	var p = new(OC_RemoveContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_Remove
	return p
}

func (*OC_RemoveContext) IsOC_RemoveContext() {}

func NewOC_RemoveContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_RemoveContext {
	var p = new(OC_RemoveContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_Remove

	return p
}

func (s *OC_RemoveContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_RemoveContext) REMOVE() antlr.TerminalNode {
	return s.GetToken(CypherParserREMOVE, 0)
}

func (s *OC_RemoveContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_RemoveContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_RemoveContext) AllOC_RemoveItem() []IOC_RemoveItemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOC_RemoveItemContext)(nil)).Elem())
	var tst = make([]IOC_RemoveItemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOC_RemoveItemContext)
		}
	}

	return tst
}

func (s *OC_RemoveContext) OC_RemoveItem(i int) IOC_RemoveItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_RemoveItemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOC_RemoveItemContext)
}

func (s *OC_RemoveContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_RemoveContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_RemoveContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_Remove(s)
	}
}

func (s *OC_RemoveContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_Remove(s)
	}
}

func (p *CypherParser) OC_Remove() (localctx IOC_RemoveContext) {
	localctx = NewOC_RemoveContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 36, CypherParserRULE_oC_Remove)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(451)
		p.Match(CypherParserREMOVE)
	}
	{
		p.SetState(452)
		p.Match(CypherParserSP)
	}
	{
		p.SetState(453)
		p.OC_RemoveItem()
	}
	p.SetState(464)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 54, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(455)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == CypherParserSP {
				{
					p.SetState(454)
					p.Match(CypherParserSP)
				}

			}
			{
				p.SetState(457)
				p.Match(CypherParserT__1)
			}
			p.SetState(459)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == CypherParserSP {
				{
					p.SetState(458)
					p.Match(CypherParserSP)
				}

			}
			{
				p.SetState(461)
				p.OC_RemoveItem()
			}

		}
		p.SetState(466)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 54, p.GetParserRuleContext())
	}

	return localctx
}

// IOC_RemoveItemContext is an interface to support dynamic dispatch.
type IOC_RemoveItemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_RemoveItemContext differentiates from other interfaces.
	IsOC_RemoveItemContext()
}

type OC_RemoveItemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_RemoveItemContext() *OC_RemoveItemContext {
	var p = new(OC_RemoveItemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_RemoveItem
	return p
}

func (*OC_RemoveItemContext) IsOC_RemoveItemContext() {}

func NewOC_RemoveItemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_RemoveItemContext {
	var p = new(OC_RemoveItemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_RemoveItem

	return p
}

func (s *OC_RemoveItemContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_RemoveItemContext) OC_Variable() IOC_VariableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_VariableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_VariableContext)
}

func (s *OC_RemoveItemContext) OC_NodeLabels() IOC_NodeLabelsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_NodeLabelsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_NodeLabelsContext)
}

func (s *OC_RemoveItemContext) OC_PropertyExpression() IOC_PropertyExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_PropertyExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_PropertyExpressionContext)
}

func (s *OC_RemoveItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_RemoveItemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_RemoveItemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_RemoveItem(s)
	}
}

func (s *OC_RemoveItemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_RemoveItem(s)
	}
}

func (p *CypherParser) OC_RemoveItem() (localctx IOC_RemoveItemContext) {
	localctx = NewOC_RemoveItemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 38, CypherParserRULE_oC_RemoveItem)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(471)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 55, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(467)
			p.OC_Variable()
		}
		{
			p.SetState(468)
			p.OC_NodeLabels()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(470)
			p.OC_PropertyExpression()
		}

	}

	return localctx
}

// IOC_InQueryCallContext is an interface to support dynamic dispatch.
type IOC_InQueryCallContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_InQueryCallContext differentiates from other interfaces.
	IsOC_InQueryCallContext()
}

type OC_InQueryCallContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_InQueryCallContext() *OC_InQueryCallContext {
	var p = new(OC_InQueryCallContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_InQueryCall
	return p
}

func (*OC_InQueryCallContext) IsOC_InQueryCallContext() {}

func NewOC_InQueryCallContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_InQueryCallContext {
	var p = new(OC_InQueryCallContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_InQueryCall

	return p
}

func (s *OC_InQueryCallContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_InQueryCallContext) CALL() antlr.TerminalNode {
	return s.GetToken(CypherParserCALL, 0)
}

func (s *OC_InQueryCallContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_InQueryCallContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_InQueryCallContext) OC_ExplicitProcedureInvocation() IOC_ExplicitProcedureInvocationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_ExplicitProcedureInvocationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_ExplicitProcedureInvocationContext)
}

func (s *OC_InQueryCallContext) YIELD() antlr.TerminalNode {
	return s.GetToken(CypherParserYIELD, 0)
}

func (s *OC_InQueryCallContext) OC_YieldItems() IOC_YieldItemsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_YieldItemsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_YieldItemsContext)
}

func (s *OC_InQueryCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_InQueryCallContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_InQueryCallContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_InQueryCall(s)
	}
}

func (s *OC_InQueryCallContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_InQueryCall(s)
	}
}

func (p *CypherParser) OC_InQueryCall() (localctx IOC_InQueryCallContext) {
	localctx = NewOC_InQueryCallContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, CypherParserRULE_oC_InQueryCall)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(473)
		p.Match(CypherParserCALL)
	}
	{
		p.SetState(474)
		p.Match(CypherParserSP)
	}
	{
		p.SetState(475)
		p.OC_ExplicitProcedureInvocation()
	}
	p.SetState(482)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 57, p.GetParserRuleContext()) == 1 {
		p.SetState(477)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(476)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(479)
			p.Match(CypherParserYIELD)
		}
		{
			p.SetState(480)
			p.Match(CypherParserSP)
		}
		{
			p.SetState(481)
			p.OC_YieldItems()
		}

	}

	return localctx
}

// IOC_StandaloneCallContext is an interface to support dynamic dispatch.
type IOC_StandaloneCallContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_StandaloneCallContext differentiates from other interfaces.
	IsOC_StandaloneCallContext()
}

type OC_StandaloneCallContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_StandaloneCallContext() *OC_StandaloneCallContext {
	var p = new(OC_StandaloneCallContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_StandaloneCall
	return p
}

func (*OC_StandaloneCallContext) IsOC_StandaloneCallContext() {}

func NewOC_StandaloneCallContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_StandaloneCallContext {
	var p = new(OC_StandaloneCallContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_StandaloneCall

	return p
}

func (s *OC_StandaloneCallContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_StandaloneCallContext) CALL() antlr.TerminalNode {
	return s.GetToken(CypherParserCALL, 0)
}

func (s *OC_StandaloneCallContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_StandaloneCallContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_StandaloneCallContext) OC_ExplicitProcedureInvocation() IOC_ExplicitProcedureInvocationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_ExplicitProcedureInvocationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_ExplicitProcedureInvocationContext)
}

func (s *OC_StandaloneCallContext) OC_ImplicitProcedureInvocation() IOC_ImplicitProcedureInvocationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_ImplicitProcedureInvocationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_ImplicitProcedureInvocationContext)
}

func (s *OC_StandaloneCallContext) YIELD() antlr.TerminalNode {
	return s.GetToken(CypherParserYIELD, 0)
}

func (s *OC_StandaloneCallContext) OC_YieldItems() IOC_YieldItemsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_YieldItemsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_YieldItemsContext)
}

func (s *OC_StandaloneCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_StandaloneCallContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_StandaloneCallContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_StandaloneCall(s)
	}
}

func (s *OC_StandaloneCallContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_StandaloneCall(s)
	}
}

func (p *CypherParser) OC_StandaloneCall() (localctx IOC_StandaloneCallContext) {
	localctx = NewOC_StandaloneCallContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, CypherParserRULE_oC_StandaloneCall)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(484)
		p.Match(CypherParserCALL)
	}
	{
		p.SetState(485)
		p.Match(CypherParserSP)
	}
	p.SetState(488)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 58, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(486)
			p.OC_ExplicitProcedureInvocation()
		}

	case 2:
		{
			p.SetState(487)
			p.OC_ImplicitProcedureInvocation()
		}

	}
	p.SetState(494)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 59, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(490)
			p.Match(CypherParserSP)
		}
		{
			p.SetState(491)
			p.Match(CypherParserYIELD)
		}
		{
			p.SetState(492)
			p.Match(CypherParserSP)
		}
		{
			p.SetState(493)
			p.OC_YieldItems()
		}

	}

	return localctx
}

// IOC_YieldItemsContext is an interface to support dynamic dispatch.
type IOC_YieldItemsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_YieldItemsContext differentiates from other interfaces.
	IsOC_YieldItemsContext()
}

type OC_YieldItemsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_YieldItemsContext() *OC_YieldItemsContext {
	var p = new(OC_YieldItemsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_YieldItems
	return p
}

func (*OC_YieldItemsContext) IsOC_YieldItemsContext() {}

func NewOC_YieldItemsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_YieldItemsContext {
	var p = new(OC_YieldItemsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_YieldItems

	return p
}

func (s *OC_YieldItemsContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_YieldItemsContext) OC_Where() IOC_WhereContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_WhereContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_WhereContext)
}

func (s *OC_YieldItemsContext) AllOC_YieldItem() []IOC_YieldItemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOC_YieldItemContext)(nil)).Elem())
	var tst = make([]IOC_YieldItemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOC_YieldItemContext)
		}
	}

	return tst
}

func (s *OC_YieldItemsContext) OC_YieldItem(i int) IOC_YieldItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_YieldItemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOC_YieldItemContext)
}

func (s *OC_YieldItemsContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_YieldItemsContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_YieldItemsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_YieldItemsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_YieldItemsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_YieldItems(s)
	}
}

func (s *OC_YieldItemsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_YieldItems(s)
	}
}

func (p *CypherParser) OC_YieldItems() (localctx IOC_YieldItemsContext) {
	localctx = NewOC_YieldItemsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 44, CypherParserRULE_oC_YieldItems)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(511)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CypherParserT__4:
		{
			p.SetState(496)
			p.Match(CypherParserT__4)
		}

	case CypherParserCOUNT, CypherParserANY, CypherParserNONE, CypherParserSINGLE, CypherParserHexLetter, CypherParserFILTER, CypherParserEXTRACT, CypherParserUnescapedSymbolicName, CypherParserEscapedSymbolicName:
		{
			p.SetState(497)
			p.OC_YieldItem()
		}
		p.SetState(508)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 62, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				p.SetState(499)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == CypherParserSP {
					{
						p.SetState(498)
						p.Match(CypherParserSP)
					}

				}
				{
					p.SetState(501)
					p.Match(CypherParserT__1)
				}
				p.SetState(503)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == CypherParserSP {
					{
						p.SetState(502)
						p.Match(CypherParserSP)
					}

				}
				{
					p.SetState(505)
					p.OC_YieldItem()
				}

			}
			p.SetState(510)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 62, p.GetParserRuleContext())
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(517)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 65, p.GetParserRuleContext()) == 1 {
		p.SetState(514)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(513)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(516)
			p.OC_Where()
		}

	}

	return localctx
}

// IOC_YieldItemContext is an interface to support dynamic dispatch.
type IOC_YieldItemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_YieldItemContext differentiates from other interfaces.
	IsOC_YieldItemContext()
}

type OC_YieldItemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_YieldItemContext() *OC_YieldItemContext {
	var p = new(OC_YieldItemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_YieldItem
	return p
}

func (*OC_YieldItemContext) IsOC_YieldItemContext() {}

func NewOC_YieldItemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_YieldItemContext {
	var p = new(OC_YieldItemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_YieldItem

	return p
}

func (s *OC_YieldItemContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_YieldItemContext) OC_Variable() IOC_VariableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_VariableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_VariableContext)
}

func (s *OC_YieldItemContext) OC_ProcedureResultField() IOC_ProcedureResultFieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_ProcedureResultFieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_ProcedureResultFieldContext)
}

func (s *OC_YieldItemContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_YieldItemContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_YieldItemContext) AS() antlr.TerminalNode {
	return s.GetToken(CypherParserAS, 0)
}

func (s *OC_YieldItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_YieldItemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_YieldItemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_YieldItem(s)
	}
}

func (s *OC_YieldItemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_YieldItem(s)
	}
}

func (p *CypherParser) OC_YieldItem() (localctx IOC_YieldItemContext) {
	localctx = NewOC_YieldItemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, CypherParserRULE_oC_YieldItem)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(524)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 66, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(519)
			p.OC_ProcedureResultField()
		}
		{
			p.SetState(520)
			p.Match(CypherParserSP)
		}
		{
			p.SetState(521)
			p.Match(CypherParserAS)
		}
		{
			p.SetState(522)
			p.Match(CypherParserSP)
		}

	}
	{
		p.SetState(526)
		p.OC_Variable()
	}

	return localctx
}

// IOC_WithContext is an interface to support dynamic dispatch.
type IOC_WithContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_WithContext differentiates from other interfaces.
	IsOC_WithContext()
}

type OC_WithContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_WithContext() *OC_WithContext {
	var p = new(OC_WithContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_With
	return p
}

func (*OC_WithContext) IsOC_WithContext() {}

func NewOC_WithContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_WithContext {
	var p = new(OC_WithContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_With

	return p
}

func (s *OC_WithContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_WithContext) WITH() antlr.TerminalNode {
	return s.GetToken(CypherParserWITH, 0)
}

func (s *OC_WithContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_WithContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_WithContext) OC_ReturnBody() IOC_ReturnBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_ReturnBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_ReturnBodyContext)
}

func (s *OC_WithContext) DISTINCT() antlr.TerminalNode {
	return s.GetToken(CypherParserDISTINCT, 0)
}

func (s *OC_WithContext) OC_Where() IOC_WhereContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_WhereContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_WhereContext)
}

func (s *OC_WithContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_WithContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_WithContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_With(s)
	}
}

func (s *OC_WithContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_With(s)
	}
}

func (p *CypherParser) OC_With() (localctx IOC_WithContext) {
	localctx = NewOC_WithContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 48, CypherParserRULE_oC_With)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(528)
		p.Match(CypherParserWITH)
	}
	p.SetState(533)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 68, p.GetParserRuleContext()) == 1 {
		p.SetState(530)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(529)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(532)
			p.Match(CypherParserDISTINCT)
		}

	}
	{
		p.SetState(535)
		p.Match(CypherParserSP)
	}
	{
		p.SetState(536)
		p.OC_ReturnBody()
	}
	p.SetState(541)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 70, p.GetParserRuleContext()) == 1 {
		p.SetState(538)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(537)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(540)
			p.OC_Where()
		}

	}

	return localctx
}

// IOC_ReturnContext is an interface to support dynamic dispatch.
type IOC_ReturnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_ReturnContext differentiates from other interfaces.
	IsOC_ReturnContext()
}

type OC_ReturnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_ReturnContext() *OC_ReturnContext {
	var p = new(OC_ReturnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_Return
	return p
}

func (*OC_ReturnContext) IsOC_ReturnContext() {}

func NewOC_ReturnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_ReturnContext {
	var p = new(OC_ReturnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_Return

	return p
}

func (s *OC_ReturnContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_ReturnContext) RETURN() antlr.TerminalNode {
	return s.GetToken(CypherParserRETURN, 0)
}

func (s *OC_ReturnContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_ReturnContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_ReturnContext) OC_ReturnBody() IOC_ReturnBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_ReturnBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_ReturnBodyContext)
}

func (s *OC_ReturnContext) DISTINCT() antlr.TerminalNode {
	return s.GetToken(CypherParserDISTINCT, 0)
}

func (s *OC_ReturnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_ReturnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_ReturnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_Return(s)
	}
}

func (s *OC_ReturnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_Return(s)
	}
}

func (p *CypherParser) OC_Return() (localctx IOC_ReturnContext) {
	localctx = NewOC_ReturnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 50, CypherParserRULE_oC_Return)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(543)
		p.Match(CypherParserRETURN)
	}
	p.SetState(548)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 72, p.GetParserRuleContext()) == 1 {
		p.SetState(545)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(544)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(547)
			p.Match(CypherParserDISTINCT)
		}

	}
	{
		p.SetState(550)
		p.Match(CypherParserSP)
	}
	{
		p.SetState(551)
		p.OC_ReturnBody()
	}

	return localctx
}

// IOC_ReturnBodyContext is an interface to support dynamic dispatch.
type IOC_ReturnBodyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_ReturnBodyContext differentiates from other interfaces.
	IsOC_ReturnBodyContext()
}

type OC_ReturnBodyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_ReturnBodyContext() *OC_ReturnBodyContext {
	var p = new(OC_ReturnBodyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_ReturnBody
	return p
}

func (*OC_ReturnBodyContext) IsOC_ReturnBodyContext() {}

func NewOC_ReturnBodyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_ReturnBodyContext {
	var p = new(OC_ReturnBodyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_ReturnBody

	return p
}

func (s *OC_ReturnBodyContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_ReturnBodyContext) OC_ReturnItems() IOC_ReturnItemsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_ReturnItemsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_ReturnItemsContext)
}

func (s *OC_ReturnBodyContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_ReturnBodyContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_ReturnBodyContext) OC_Order() IOC_OrderContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_OrderContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_OrderContext)
}

func (s *OC_ReturnBodyContext) OC_Skip() IOC_SkipContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_SkipContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_SkipContext)
}

func (s *OC_ReturnBodyContext) OC_Limit() IOC_LimitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_LimitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_LimitContext)
}

func (s *OC_ReturnBodyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_ReturnBodyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_ReturnBodyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_ReturnBody(s)
	}
}

func (s *OC_ReturnBodyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_ReturnBody(s)
	}
}

func (p *CypherParser) OC_ReturnBody() (localctx IOC_ReturnBodyContext) {
	localctx = NewOC_ReturnBodyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 52, CypherParserRULE_oC_ReturnBody)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(553)
		p.OC_ReturnItems()
	}
	p.SetState(556)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 73, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(554)
			p.Match(CypherParserSP)
		}
		{
			p.SetState(555)
			p.OC_Order()
		}

	}
	p.SetState(560)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 74, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(558)
			p.Match(CypherParserSP)
		}
		{
			p.SetState(559)
			p.OC_Skip()
		}

	}
	p.SetState(564)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 75, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(562)
			p.Match(CypherParserSP)
		}
		{
			p.SetState(563)
			p.OC_Limit()
		}

	}

	return localctx
}

// IOC_ReturnItemsContext is an interface to support dynamic dispatch.
type IOC_ReturnItemsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_ReturnItemsContext differentiates from other interfaces.
	IsOC_ReturnItemsContext()
}

type OC_ReturnItemsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_ReturnItemsContext() *OC_ReturnItemsContext {
	var p = new(OC_ReturnItemsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_ReturnItems
	return p
}

func (*OC_ReturnItemsContext) IsOC_ReturnItemsContext() {}

func NewOC_ReturnItemsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_ReturnItemsContext {
	var p = new(OC_ReturnItemsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_ReturnItems

	return p
}

func (s *OC_ReturnItemsContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_ReturnItemsContext) AllOC_ReturnItem() []IOC_ReturnItemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOC_ReturnItemContext)(nil)).Elem())
	var tst = make([]IOC_ReturnItemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOC_ReturnItemContext)
		}
	}

	return tst
}

func (s *OC_ReturnItemsContext) OC_ReturnItem(i int) IOC_ReturnItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_ReturnItemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOC_ReturnItemContext)
}

func (s *OC_ReturnItemsContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_ReturnItemsContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_ReturnItemsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_ReturnItemsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_ReturnItemsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_ReturnItems(s)
	}
}

func (s *OC_ReturnItemsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_ReturnItems(s)
	}
}

func (p *CypherParser) OC_ReturnItems() (localctx IOC_ReturnItemsContext) {
	localctx = NewOC_ReturnItemsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 54, CypherParserRULE_oC_ReturnItems)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(594)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CypherParserT__4:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(566)
			p.Match(CypherParserT__4)
		}
		p.SetState(577)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 78, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				p.SetState(568)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == CypherParserSP {
					{
						p.SetState(567)
						p.Match(CypherParserSP)
					}

				}
				{
					p.SetState(570)
					p.Match(CypherParserT__1)
				}
				p.SetState(572)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == CypherParserSP {
					{
						p.SetState(571)
						p.Match(CypherParserSP)
					}

				}
				{
					p.SetState(574)
					p.OC_ReturnItem()
				}

			}
			p.SetState(579)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 78, p.GetParserRuleContext())
		}

	case CypherParserT__5, CypherParserT__7, CypherParserT__12, CypherParserT__13, CypherParserT__23, CypherParserT__25, CypherParserALL, CypherParserNOT, CypherParserNULL, CypherParserCOUNT, CypherParserANY, CypherParserNONE, CypherParserSINGLE, CypherParserTRUE, CypherParserFALSE, CypherParserEXISTS, CypherParserCASE, CypherParserStringLiteral, CypherParserHexInteger, CypherParserDecimalInteger, CypherParserOctalInteger, CypherParserHexLetter, CypherParserExponentDecimalReal, CypherParserRegularDecimalReal, CypherParserFILTER, CypherParserEXTRACT, CypherParserUnescapedSymbolicName, CypherParserEscapedSymbolicName:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(580)
			p.OC_ReturnItem()
		}
		p.SetState(591)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 81, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				p.SetState(582)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == CypherParserSP {
					{
						p.SetState(581)
						p.Match(CypherParserSP)
					}

				}
				{
					p.SetState(584)
					p.Match(CypherParserT__1)
				}
				p.SetState(586)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == CypherParserSP {
					{
						p.SetState(585)
						p.Match(CypherParserSP)
					}

				}
				{
					p.SetState(588)
					p.OC_ReturnItem()
				}

			}
			p.SetState(593)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 81, p.GetParserRuleContext())
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IOC_ReturnItemContext is an interface to support dynamic dispatch.
type IOC_ReturnItemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_ReturnItemContext differentiates from other interfaces.
	IsOC_ReturnItemContext()
}

type OC_ReturnItemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_ReturnItemContext() *OC_ReturnItemContext {
	var p = new(OC_ReturnItemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_ReturnItem
	return p
}

func (*OC_ReturnItemContext) IsOC_ReturnItemContext() {}

func NewOC_ReturnItemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_ReturnItemContext {
	var p = new(OC_ReturnItemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_ReturnItem

	return p
}

func (s *OC_ReturnItemContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_ReturnItemContext) OC_Expression() IOC_ExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_ExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_ExpressionContext)
}

func (s *OC_ReturnItemContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_ReturnItemContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_ReturnItemContext) AS() antlr.TerminalNode {
	return s.GetToken(CypherParserAS, 0)
}

func (s *OC_ReturnItemContext) OC_Variable() IOC_VariableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_VariableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_VariableContext)
}

func (s *OC_ReturnItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_ReturnItemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_ReturnItemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_ReturnItem(s)
	}
}

func (s *OC_ReturnItemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_ReturnItem(s)
	}
}

func (p *CypherParser) OC_ReturnItem() (localctx IOC_ReturnItemContext) {
	localctx = NewOC_ReturnItemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 56, CypherParserRULE_oC_ReturnItem)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(603)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 83, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(596)
			p.OC_Expression()
		}
		{
			p.SetState(597)
			p.Match(CypherParserSP)
		}
		{
			p.SetState(598)
			p.Match(CypherParserAS)
		}
		{
			p.SetState(599)
			p.Match(CypherParserSP)
		}
		{
			p.SetState(600)
			p.OC_Variable()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(602)
			p.OC_Expression()
		}

	}

	return localctx
}

// IOC_OrderContext is an interface to support dynamic dispatch.
type IOC_OrderContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_OrderContext differentiates from other interfaces.
	IsOC_OrderContext()
}

type OC_OrderContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_OrderContext() *OC_OrderContext {
	var p = new(OC_OrderContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_Order
	return p
}

func (*OC_OrderContext) IsOC_OrderContext() {}

func NewOC_OrderContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_OrderContext {
	var p = new(OC_OrderContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_Order

	return p
}

func (s *OC_OrderContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_OrderContext) ORDER() antlr.TerminalNode {
	return s.GetToken(CypherParserORDER, 0)
}

func (s *OC_OrderContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_OrderContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_OrderContext) BY() antlr.TerminalNode {
	return s.GetToken(CypherParserBY, 0)
}

func (s *OC_OrderContext) AllOC_SortItem() []IOC_SortItemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOC_SortItemContext)(nil)).Elem())
	var tst = make([]IOC_SortItemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOC_SortItemContext)
		}
	}

	return tst
}

func (s *OC_OrderContext) OC_SortItem(i int) IOC_SortItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_SortItemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOC_SortItemContext)
}

func (s *OC_OrderContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_OrderContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_OrderContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_Order(s)
	}
}

func (s *OC_OrderContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_Order(s)
	}
}

func (p *CypherParser) OC_Order() (localctx IOC_OrderContext) {
	localctx = NewOC_OrderContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 58, CypherParserRULE_oC_Order)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(605)
		p.Match(CypherParserORDER)
	}
	{
		p.SetState(606)
		p.Match(CypherParserSP)
	}
	{
		p.SetState(607)
		p.Match(CypherParserBY)
	}
	{
		p.SetState(608)
		p.Match(CypherParserSP)
	}
	{
		p.SetState(609)
		p.OC_SortItem()
	}
	p.SetState(617)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == CypherParserT__1 {
		{
			p.SetState(610)
			p.Match(CypherParserT__1)
		}
		p.SetState(612)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(611)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(614)
			p.OC_SortItem()
		}

		p.SetState(619)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IOC_SkipContext is an interface to support dynamic dispatch.
type IOC_SkipContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_SkipContext differentiates from other interfaces.
	IsOC_SkipContext()
}

type OC_SkipContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_SkipContext() *OC_SkipContext {
	var p = new(OC_SkipContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_Skip
	return p
}

func (*OC_SkipContext) IsOC_SkipContext() {}

func NewOC_SkipContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_SkipContext {
	var p = new(OC_SkipContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_Skip

	return p
}

func (s *OC_SkipContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_SkipContext) L_SKIP() antlr.TerminalNode {
	return s.GetToken(CypherParserL_SKIP, 0)
}

func (s *OC_SkipContext) SP() antlr.TerminalNode {
	return s.GetToken(CypherParserSP, 0)
}

func (s *OC_SkipContext) OC_Expression() IOC_ExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_ExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_ExpressionContext)
}

func (s *OC_SkipContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_SkipContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_SkipContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_Skip(s)
	}
}

func (s *OC_SkipContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_Skip(s)
	}
}

func (p *CypherParser) OC_Skip() (localctx IOC_SkipContext) {
	localctx = NewOC_SkipContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 60, CypherParserRULE_oC_Skip)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(620)
		p.Match(CypherParserL_SKIP)
	}
	{
		p.SetState(621)
		p.Match(CypherParserSP)
	}
	{
		p.SetState(622)
		p.OC_Expression()
	}

	return localctx
}

// IOC_LimitContext is an interface to support dynamic dispatch.
type IOC_LimitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_LimitContext differentiates from other interfaces.
	IsOC_LimitContext()
}

type OC_LimitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_LimitContext() *OC_LimitContext {
	var p = new(OC_LimitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_Limit
	return p
}

func (*OC_LimitContext) IsOC_LimitContext() {}

func NewOC_LimitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_LimitContext {
	var p = new(OC_LimitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_Limit

	return p
}

func (s *OC_LimitContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_LimitContext) LIMIT() antlr.TerminalNode {
	return s.GetToken(CypherParserLIMIT, 0)
}

func (s *OC_LimitContext) SP() antlr.TerminalNode {
	return s.GetToken(CypherParserSP, 0)
}

func (s *OC_LimitContext) OC_Expression() IOC_ExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_ExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_ExpressionContext)
}

func (s *OC_LimitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_LimitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_LimitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_Limit(s)
	}
}

func (s *OC_LimitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_Limit(s)
	}
}

func (p *CypherParser) OC_Limit() (localctx IOC_LimitContext) {
	localctx = NewOC_LimitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 62, CypherParserRULE_oC_Limit)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(624)
		p.Match(CypherParserLIMIT)
	}
	{
		p.SetState(625)
		p.Match(CypherParserSP)
	}
	{
		p.SetState(626)
		p.OC_Expression()
	}

	return localctx
}

// IOC_SortItemContext is an interface to support dynamic dispatch.
type IOC_SortItemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_SortItemContext differentiates from other interfaces.
	IsOC_SortItemContext()
}

type OC_SortItemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_SortItemContext() *OC_SortItemContext {
	var p = new(OC_SortItemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_SortItem
	return p
}

func (*OC_SortItemContext) IsOC_SortItemContext() {}

func NewOC_SortItemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_SortItemContext {
	var p = new(OC_SortItemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_SortItem

	return p
}

func (s *OC_SortItemContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_SortItemContext) OC_Expression() IOC_ExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_ExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_ExpressionContext)
}

func (s *OC_SortItemContext) ASCENDING() antlr.TerminalNode {
	return s.GetToken(CypherParserASCENDING, 0)
}

func (s *OC_SortItemContext) ASC() antlr.TerminalNode {
	return s.GetToken(CypherParserASC, 0)
}

func (s *OC_SortItemContext) DESCENDING() antlr.TerminalNode {
	return s.GetToken(CypherParserDESCENDING, 0)
}

func (s *OC_SortItemContext) DESC() antlr.TerminalNode {
	return s.GetToken(CypherParserDESC, 0)
}

func (s *OC_SortItemContext) SP() antlr.TerminalNode {
	return s.GetToken(CypherParserSP, 0)
}

func (s *OC_SortItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_SortItemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_SortItemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_SortItem(s)
	}
}

func (s *OC_SortItemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_SortItem(s)
	}
}

func (p *CypherParser) OC_SortItem() (localctx IOC_SortItemContext) {
	localctx = NewOC_SortItemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 64, CypherParserRULE_oC_SortItem)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(628)
		p.OC_Expression()
	}
	p.SetState(633)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 87, p.GetParserRuleContext()) == 1 {
		p.SetState(630)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(629)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(632)
			_la = p.GetTokenStream().LA(1)

			if !(((_la-68)&-(0x1f+1)) == 0 && ((1<<uint((_la-68)))&((1<<(CypherParserASCENDING-68))|(1<<(CypherParserASC-68))|(1<<(CypherParserDESCENDING-68))|(1<<(CypherParserDESC-68)))) != 0) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

	return localctx
}

// IOC_WhereContext is an interface to support dynamic dispatch.
type IOC_WhereContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_WhereContext differentiates from other interfaces.
	IsOC_WhereContext()
}

type OC_WhereContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_WhereContext() *OC_WhereContext {
	var p = new(OC_WhereContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_Where
	return p
}

func (*OC_WhereContext) IsOC_WhereContext() {}

func NewOC_WhereContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_WhereContext {
	var p = new(OC_WhereContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_Where

	return p
}

func (s *OC_WhereContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_WhereContext) WHERE() antlr.TerminalNode {
	return s.GetToken(CypherParserWHERE, 0)
}

func (s *OC_WhereContext) SP() antlr.TerminalNode {
	return s.GetToken(CypherParserSP, 0)
}

func (s *OC_WhereContext) OC_Expression() IOC_ExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_ExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_ExpressionContext)
}

func (s *OC_WhereContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_WhereContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_WhereContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_Where(s)
	}
}

func (s *OC_WhereContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_Where(s)
	}
}

func (p *CypherParser) OC_Where() (localctx IOC_WhereContext) {
	localctx = NewOC_WhereContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 66, CypherParserRULE_oC_Where)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(635)
		p.Match(CypherParserWHERE)
	}
	{
		p.SetState(636)
		p.Match(CypherParserSP)
	}
	{
		p.SetState(637)
		p.OC_Expression()
	}

	return localctx
}

// IOC_PatternContext is an interface to support dynamic dispatch.
type IOC_PatternContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_PatternContext differentiates from other interfaces.
	IsOC_PatternContext()
}

type OC_PatternContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_PatternContext() *OC_PatternContext {
	var p = new(OC_PatternContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_Pattern
	return p
}

func (*OC_PatternContext) IsOC_PatternContext() {}

func NewOC_PatternContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_PatternContext {
	var p = new(OC_PatternContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_Pattern

	return p
}

func (s *OC_PatternContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_PatternContext) AllOC_PatternPart() []IOC_PatternPartContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOC_PatternPartContext)(nil)).Elem())
	var tst = make([]IOC_PatternPartContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOC_PatternPartContext)
		}
	}

	return tst
}

func (s *OC_PatternContext) OC_PatternPart(i int) IOC_PatternPartContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_PatternPartContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOC_PatternPartContext)
}

func (s *OC_PatternContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_PatternContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_PatternContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_PatternContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_PatternContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_Pattern(s)
	}
}

func (s *OC_PatternContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_Pattern(s)
	}
}

func (p *CypherParser) OC_Pattern() (localctx IOC_PatternContext) {
	localctx = NewOC_PatternContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 68, CypherParserRULE_oC_Pattern)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(639)
		p.OC_PatternPart()
	}
	p.SetState(650)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 90, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(641)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == CypherParserSP {
				{
					p.SetState(640)
					p.Match(CypherParserSP)
				}

			}
			{
				p.SetState(643)
				p.Match(CypherParserT__1)
			}
			p.SetState(645)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == CypherParserSP {
				{
					p.SetState(644)
					p.Match(CypherParserSP)
				}

			}
			{
				p.SetState(647)
				p.OC_PatternPart()
			}

		}
		p.SetState(652)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 90, p.GetParserRuleContext())
	}

	return localctx
}

// IOC_PatternPartContext is an interface to support dynamic dispatch.
type IOC_PatternPartContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_PatternPartContext differentiates from other interfaces.
	IsOC_PatternPartContext()
}

type OC_PatternPartContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_PatternPartContext() *OC_PatternPartContext {
	var p = new(OC_PatternPartContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_PatternPart
	return p
}

func (*OC_PatternPartContext) IsOC_PatternPartContext() {}

func NewOC_PatternPartContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_PatternPartContext {
	var p = new(OC_PatternPartContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_PatternPart

	return p
}

func (s *OC_PatternPartContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_PatternPartContext) OC_Variable() IOC_VariableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_VariableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_VariableContext)
}

func (s *OC_PatternPartContext) OC_AnonymousPatternPart() IOC_AnonymousPatternPartContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_AnonymousPatternPartContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_AnonymousPatternPartContext)
}

func (s *OC_PatternPartContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_PatternPartContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_PatternPartContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_PatternPartContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_PatternPartContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_PatternPart(s)
	}
}

func (s *OC_PatternPartContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_PatternPart(s)
	}
}

func (p *CypherParser) OC_PatternPart() (localctx IOC_PatternPartContext) {
	localctx = NewOC_PatternPartContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 70, CypherParserRULE_oC_PatternPart)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(664)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CypherParserCOUNT, CypherParserANY, CypherParserNONE, CypherParserSINGLE, CypherParserHexLetter, CypherParserFILTER, CypherParserEXTRACT, CypherParserUnescapedSymbolicName, CypherParserEscapedSymbolicName:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(653)
			p.OC_Variable()
		}
		p.SetState(655)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(654)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(657)
			p.Match(CypherParserT__2)
		}
		p.SetState(659)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(658)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(661)
			p.OC_AnonymousPatternPart()
		}

	case CypherParserT__5:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(663)
			p.OC_AnonymousPatternPart()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IOC_AnonymousPatternPartContext is an interface to support dynamic dispatch.
type IOC_AnonymousPatternPartContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_AnonymousPatternPartContext differentiates from other interfaces.
	IsOC_AnonymousPatternPartContext()
}

type OC_AnonymousPatternPartContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_AnonymousPatternPartContext() *OC_AnonymousPatternPartContext {
	var p = new(OC_AnonymousPatternPartContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_AnonymousPatternPart
	return p
}

func (*OC_AnonymousPatternPartContext) IsOC_AnonymousPatternPartContext() {}

func NewOC_AnonymousPatternPartContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_AnonymousPatternPartContext {
	var p = new(OC_AnonymousPatternPartContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_AnonymousPatternPart

	return p
}

func (s *OC_AnonymousPatternPartContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_AnonymousPatternPartContext) OC_PatternElement() IOC_PatternElementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_PatternElementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_PatternElementContext)
}

func (s *OC_AnonymousPatternPartContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_AnonymousPatternPartContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_AnonymousPatternPartContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_AnonymousPatternPart(s)
	}
}

func (s *OC_AnonymousPatternPartContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_AnonymousPatternPart(s)
	}
}

func (p *CypherParser) OC_AnonymousPatternPart() (localctx IOC_AnonymousPatternPartContext) {
	localctx = NewOC_AnonymousPatternPartContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 72, CypherParserRULE_oC_AnonymousPatternPart)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(666)
		p.OC_PatternElement()
	}

	return localctx
}

// IOC_PatternElementContext is an interface to support dynamic dispatch.
type IOC_PatternElementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_PatternElementContext differentiates from other interfaces.
	IsOC_PatternElementContext()
}

type OC_PatternElementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_PatternElementContext() *OC_PatternElementContext {
	var p = new(OC_PatternElementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_PatternElement
	return p
}

func (*OC_PatternElementContext) IsOC_PatternElementContext() {}

func NewOC_PatternElementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_PatternElementContext {
	var p = new(OC_PatternElementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_PatternElement

	return p
}

func (s *OC_PatternElementContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_PatternElementContext) OC_NodePattern() IOC_NodePatternContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_NodePatternContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_NodePatternContext)
}

func (s *OC_PatternElementContext) AllOC_PatternElementChain() []IOC_PatternElementChainContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOC_PatternElementChainContext)(nil)).Elem())
	var tst = make([]IOC_PatternElementChainContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOC_PatternElementChainContext)
		}
	}

	return tst
}

func (s *OC_PatternElementContext) OC_PatternElementChain(i int) IOC_PatternElementChainContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_PatternElementChainContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOC_PatternElementChainContext)
}

func (s *OC_PatternElementContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_PatternElementContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_PatternElementContext) OC_PatternElement() IOC_PatternElementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_PatternElementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_PatternElementContext)
}

func (s *OC_PatternElementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_PatternElementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_PatternElementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_PatternElement(s)
	}
}

func (s *OC_PatternElementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_PatternElement(s)
	}
}

func (p *CypherParser) OC_PatternElement() (localctx IOC_PatternElementContext) {
	localctx = NewOC_PatternElementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 74, CypherParserRULE_oC_PatternElement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(682)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 96, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(668)
			p.OC_NodePattern()
		}
		p.SetState(675)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 95, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				p.SetState(670)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == CypherParserSP {
					{
						p.SetState(669)
						p.Match(CypherParserSP)
					}

				}
				{
					p.SetState(672)
					p.OC_PatternElementChain()
				}

			}
			p.SetState(677)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 95, p.GetParserRuleContext())
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(678)
			p.Match(CypherParserT__5)
		}
		{
			p.SetState(679)
			p.OC_PatternElement()
		}
		{
			p.SetState(680)
			p.Match(CypherParserT__6)
		}

	}

	return localctx
}

// IOC_NodePatternContext is an interface to support dynamic dispatch.
type IOC_NodePatternContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_NodePatternContext differentiates from other interfaces.
	IsOC_NodePatternContext()
}

type OC_NodePatternContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_NodePatternContext() *OC_NodePatternContext {
	var p = new(OC_NodePatternContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_NodePattern
	return p
}

func (*OC_NodePatternContext) IsOC_NodePatternContext() {}

func NewOC_NodePatternContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_NodePatternContext {
	var p = new(OC_NodePatternContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_NodePattern

	return p
}

func (s *OC_NodePatternContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_NodePatternContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_NodePatternContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_NodePatternContext) OC_Variable() IOC_VariableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_VariableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_VariableContext)
}

func (s *OC_NodePatternContext) OC_NodeLabels() IOC_NodeLabelsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_NodeLabelsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_NodeLabelsContext)
}

func (s *OC_NodePatternContext) OC_Properties() IOC_PropertiesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_PropertiesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_PropertiesContext)
}

func (s *OC_NodePatternContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_NodePatternContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_NodePatternContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_NodePattern(s)
	}
}

func (s *OC_NodePatternContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_NodePattern(s)
	}
}

func (p *CypherParser) OC_NodePattern() (localctx IOC_NodePatternContext) {
	localctx = NewOC_NodePatternContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 76, CypherParserRULE_oC_NodePattern)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(684)
		p.Match(CypherParserT__5)
	}
	p.SetState(686)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserSP {
		{
			p.SetState(685)
			p.Match(CypherParserSP)
		}

	}
	p.SetState(692)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la-83)&-(0x1f+1)) == 0 && ((1<<uint((_la-83)))&((1<<(CypherParserCOUNT-83))|(1<<(CypherParserANY-83))|(1<<(CypherParserNONE-83))|(1<<(CypherParserSINGLE-83))|(1<<(CypherParserHexLetter-83)))) != 0) || (((_la-119)&-(0x1f+1)) == 0 && ((1<<uint((_la-119)))&((1<<(CypherParserFILTER-119))|(1<<(CypherParserEXTRACT-119))|(1<<(CypherParserUnescapedSymbolicName-119))|(1<<(CypherParserEscapedSymbolicName-119)))) != 0) {
		{
			p.SetState(688)
			p.OC_Variable()
		}
		p.SetState(690)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(689)
				p.Match(CypherParserSP)
			}

		}

	}
	p.SetState(698)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserT__9 {
		{
			p.SetState(694)
			p.OC_NodeLabels()
		}
		p.SetState(696)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(695)
				p.Match(CypherParserSP)
			}

		}

	}
	p.SetState(704)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserT__23 || _la == CypherParserT__25 {
		{
			p.SetState(700)
			p.OC_Properties()
		}
		p.SetState(702)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(701)
				p.Match(CypherParserSP)
			}

		}

	}
	{
		p.SetState(706)
		p.Match(CypherParserT__6)
	}

	return localctx
}

// IOC_PatternElementChainContext is an interface to support dynamic dispatch.
type IOC_PatternElementChainContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_PatternElementChainContext differentiates from other interfaces.
	IsOC_PatternElementChainContext()
}

type OC_PatternElementChainContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_PatternElementChainContext() *OC_PatternElementChainContext {
	var p = new(OC_PatternElementChainContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_PatternElementChain
	return p
}

func (*OC_PatternElementChainContext) IsOC_PatternElementChainContext() {}

func NewOC_PatternElementChainContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_PatternElementChainContext {
	var p = new(OC_PatternElementChainContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_PatternElementChain

	return p
}

func (s *OC_PatternElementChainContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_PatternElementChainContext) OC_RelationshipPattern() IOC_RelationshipPatternContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_RelationshipPatternContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_RelationshipPatternContext)
}

func (s *OC_PatternElementChainContext) OC_NodePattern() IOC_NodePatternContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_NodePatternContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_NodePatternContext)
}

func (s *OC_PatternElementChainContext) SP() antlr.TerminalNode {
	return s.GetToken(CypherParserSP, 0)
}

func (s *OC_PatternElementChainContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_PatternElementChainContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_PatternElementChainContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_PatternElementChain(s)
	}
}

func (s *OC_PatternElementChainContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_PatternElementChain(s)
	}
}

func (p *CypherParser) OC_PatternElementChain() (localctx IOC_PatternElementChainContext) {
	localctx = NewOC_PatternElementChainContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 78, CypherParserRULE_oC_PatternElementChain)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(708)
		p.OC_RelationshipPattern()
	}
	p.SetState(710)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserSP {
		{
			p.SetState(709)
			p.Match(CypherParserSP)
		}

	}
	{
		p.SetState(712)
		p.OC_NodePattern()
	}

	return localctx
}

// IOC_RelationshipPatternContext is an interface to support dynamic dispatch.
type IOC_RelationshipPatternContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_RelationshipPatternContext differentiates from other interfaces.
	IsOC_RelationshipPatternContext()
}

type OC_RelationshipPatternContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_RelationshipPatternContext() *OC_RelationshipPatternContext {
	var p = new(OC_RelationshipPatternContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_RelationshipPattern
	return p
}

func (*OC_RelationshipPatternContext) IsOC_RelationshipPatternContext() {}

func NewOC_RelationshipPatternContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_RelationshipPatternContext {
	var p = new(OC_RelationshipPatternContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_RelationshipPattern

	return p
}

func (s *OC_RelationshipPatternContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_RelationshipPatternContext) OC_LeftArrowHead() IOC_LeftArrowHeadContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_LeftArrowHeadContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_LeftArrowHeadContext)
}

func (s *OC_RelationshipPatternContext) AllOC_Dash() []IOC_DashContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOC_DashContext)(nil)).Elem())
	var tst = make([]IOC_DashContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOC_DashContext)
		}
	}

	return tst
}

func (s *OC_RelationshipPatternContext) OC_Dash(i int) IOC_DashContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_DashContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOC_DashContext)
}

func (s *OC_RelationshipPatternContext) OC_RightArrowHead() IOC_RightArrowHeadContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_RightArrowHeadContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_RightArrowHeadContext)
}

func (s *OC_RelationshipPatternContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_RelationshipPatternContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_RelationshipPatternContext) OC_RelationshipDetail() IOC_RelationshipDetailContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_RelationshipDetailContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_RelationshipDetailContext)
}

func (s *OC_RelationshipPatternContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_RelationshipPatternContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_RelationshipPatternContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_RelationshipPattern(s)
	}
}

func (s *OC_RelationshipPatternContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_RelationshipPattern(s)
	}
}

func (p *CypherParser) OC_RelationshipPattern() (localctx IOC_RelationshipPatternContext) {
	localctx = NewOC_RelationshipPatternContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 80, CypherParserRULE_oC_RelationshipPattern)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(778)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 121, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(714)
			p.OC_LeftArrowHead()
		}
		p.SetState(716)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(715)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(718)
			p.OC_Dash()
		}
		p.SetState(720)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 106, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(719)
				p.Match(CypherParserSP)
			}

		}
		p.SetState(723)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserT__7 {
			{
				p.SetState(722)
				p.OC_RelationshipDetail()
			}

		}
		p.SetState(726)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(725)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(728)
			p.OC_Dash()
		}
		p.SetState(730)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(729)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(732)
			p.OC_RightArrowHead()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(734)
			p.OC_LeftArrowHead()
		}
		p.SetState(736)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(735)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(738)
			p.OC_Dash()
		}
		p.SetState(740)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 111, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(739)
				p.Match(CypherParserSP)
			}

		}
		p.SetState(743)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserT__7 {
			{
				p.SetState(742)
				p.OC_RelationshipDetail()
			}

		}
		p.SetState(746)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(745)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(748)
			p.OC_Dash()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(750)
			p.OC_Dash()
		}
		p.SetState(752)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 114, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(751)
				p.Match(CypherParserSP)
			}

		}
		p.SetState(755)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserT__7 {
			{
				p.SetState(754)
				p.OC_RelationshipDetail()
			}

		}
		p.SetState(758)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(757)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(760)
			p.OC_Dash()
		}
		p.SetState(762)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(761)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(764)
			p.OC_RightArrowHead()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(766)
			p.OC_Dash()
		}
		p.SetState(768)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 118, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(767)
				p.Match(CypherParserSP)
			}

		}
		p.SetState(771)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserT__7 {
			{
				p.SetState(770)
				p.OC_RelationshipDetail()
			}

		}
		p.SetState(774)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(773)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(776)
			p.OC_Dash()
		}

	}

	return localctx
}

// IOC_RelationshipDetailContext is an interface to support dynamic dispatch.
type IOC_RelationshipDetailContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_RelationshipDetailContext differentiates from other interfaces.
	IsOC_RelationshipDetailContext()
}

type OC_RelationshipDetailContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_RelationshipDetailContext() *OC_RelationshipDetailContext {
	var p = new(OC_RelationshipDetailContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_RelationshipDetail
	return p
}

func (*OC_RelationshipDetailContext) IsOC_RelationshipDetailContext() {}

func NewOC_RelationshipDetailContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_RelationshipDetailContext {
	var p = new(OC_RelationshipDetailContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_RelationshipDetail

	return p
}

func (s *OC_RelationshipDetailContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_RelationshipDetailContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_RelationshipDetailContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_RelationshipDetailContext) OC_Variable() IOC_VariableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_VariableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_VariableContext)
}

func (s *OC_RelationshipDetailContext) OC_RelationshipTypes() IOC_RelationshipTypesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_RelationshipTypesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_RelationshipTypesContext)
}

func (s *OC_RelationshipDetailContext) OC_RangeLiteral() IOC_RangeLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_RangeLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_RangeLiteralContext)
}

func (s *OC_RelationshipDetailContext) OC_Properties() IOC_PropertiesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_PropertiesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_PropertiesContext)
}

func (s *OC_RelationshipDetailContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_RelationshipDetailContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_RelationshipDetailContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_RelationshipDetail(s)
	}
}

func (s *OC_RelationshipDetailContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_RelationshipDetail(s)
	}
}

func (p *CypherParser) OC_RelationshipDetail() (localctx IOC_RelationshipDetailContext) {
	localctx = NewOC_RelationshipDetailContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 82, CypherParserRULE_oC_RelationshipDetail)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(780)
		p.Match(CypherParserT__7)
	}
	p.SetState(782)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserSP {
		{
			p.SetState(781)
			p.Match(CypherParserSP)
		}

	}
	p.SetState(788)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la-83)&-(0x1f+1)) == 0 && ((1<<uint((_la-83)))&((1<<(CypherParserCOUNT-83))|(1<<(CypherParserANY-83))|(1<<(CypherParserNONE-83))|(1<<(CypherParserSINGLE-83))|(1<<(CypherParserHexLetter-83)))) != 0) || (((_la-119)&-(0x1f+1)) == 0 && ((1<<uint((_la-119)))&((1<<(CypherParserFILTER-119))|(1<<(CypherParserEXTRACT-119))|(1<<(CypherParserUnescapedSymbolicName-119))|(1<<(CypherParserEscapedSymbolicName-119)))) != 0) {
		{
			p.SetState(784)
			p.OC_Variable()
		}
		p.SetState(786)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(785)
				p.Match(CypherParserSP)
			}

		}

	}
	p.SetState(794)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserT__9 {
		{
			p.SetState(790)
			p.OC_RelationshipTypes()
		}
		p.SetState(792)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(791)
				p.Match(CypherParserSP)
			}

		}

	}
	p.SetState(797)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserT__4 {
		{
			p.SetState(796)
			p.OC_RangeLiteral()
		}

	}
	p.SetState(803)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserT__23 || _la == CypherParserT__25 {
		{
			p.SetState(799)
			p.OC_Properties()
		}
		p.SetState(801)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(800)
				p.Match(CypherParserSP)
			}

		}

	}
	{
		p.SetState(805)
		p.Match(CypherParserT__8)
	}

	return localctx
}

// IOC_PropertiesContext is an interface to support dynamic dispatch.
type IOC_PropertiesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_PropertiesContext differentiates from other interfaces.
	IsOC_PropertiesContext()
}

type OC_PropertiesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_PropertiesContext() *OC_PropertiesContext {
	var p = new(OC_PropertiesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_Properties
	return p
}

func (*OC_PropertiesContext) IsOC_PropertiesContext() {}

func NewOC_PropertiesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_PropertiesContext {
	var p = new(OC_PropertiesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_Properties

	return p
}

func (s *OC_PropertiesContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_PropertiesContext) OC_MapLiteral() IOC_MapLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_MapLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_MapLiteralContext)
}

func (s *OC_PropertiesContext) OC_Parameter() IOC_ParameterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_ParameterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_ParameterContext)
}

func (s *OC_PropertiesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_PropertiesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_PropertiesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_Properties(s)
	}
}

func (s *OC_PropertiesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_Properties(s)
	}
}

func (p *CypherParser) OC_Properties() (localctx IOC_PropertiesContext) {
	localctx = NewOC_PropertiesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 84, CypherParserRULE_oC_Properties)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(809)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CypherParserT__23:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(807)
			p.OC_MapLiteral()
		}

	case CypherParserT__25:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(808)
			p.OC_Parameter()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IOC_RelationshipTypesContext is an interface to support dynamic dispatch.
type IOC_RelationshipTypesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_RelationshipTypesContext differentiates from other interfaces.
	IsOC_RelationshipTypesContext()
}

type OC_RelationshipTypesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_RelationshipTypesContext() *OC_RelationshipTypesContext {
	var p = new(OC_RelationshipTypesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_RelationshipTypes
	return p
}

func (*OC_RelationshipTypesContext) IsOC_RelationshipTypesContext() {}

func NewOC_RelationshipTypesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_RelationshipTypesContext {
	var p = new(OC_RelationshipTypesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_RelationshipTypes

	return p
}

func (s *OC_RelationshipTypesContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_RelationshipTypesContext) AllOC_RelTypeName() []IOC_RelTypeNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOC_RelTypeNameContext)(nil)).Elem())
	var tst = make([]IOC_RelTypeNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOC_RelTypeNameContext)
		}
	}

	return tst
}

func (s *OC_RelationshipTypesContext) OC_RelTypeName(i int) IOC_RelTypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_RelTypeNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOC_RelTypeNameContext)
}

func (s *OC_RelationshipTypesContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_RelationshipTypesContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_RelationshipTypesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_RelationshipTypesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_RelationshipTypesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_RelationshipTypes(s)
	}
}

func (s *OC_RelationshipTypesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_RelationshipTypes(s)
	}
}

func (p *CypherParser) OC_RelationshipTypes() (localctx IOC_RelationshipTypesContext) {
	localctx = NewOC_RelationshipTypesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 86, CypherParserRULE_oC_RelationshipTypes)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(811)
		p.Match(CypherParserT__9)
	}
	p.SetState(813)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserSP {
		{
			p.SetState(812)
			p.Match(CypherParserSP)
		}

	}
	{
		p.SetState(815)
		p.OC_RelTypeName()
	}
	p.SetState(829)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 135, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(817)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == CypherParserSP {
				{
					p.SetState(816)
					p.Match(CypherParserSP)
				}

			}
			{
				p.SetState(819)
				p.Match(CypherParserT__10)
			}
			p.SetState(821)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == CypherParserT__9 {
				{
					p.SetState(820)
					p.Match(CypherParserT__9)
				}

			}
			p.SetState(824)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == CypherParserSP {
				{
					p.SetState(823)
					p.Match(CypherParserSP)
				}

			}
			{
				p.SetState(826)
				p.OC_RelTypeName()
			}

		}
		p.SetState(831)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 135, p.GetParserRuleContext())
	}

	return localctx
}

// IOC_NodeLabelsContext is an interface to support dynamic dispatch.
type IOC_NodeLabelsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_NodeLabelsContext differentiates from other interfaces.
	IsOC_NodeLabelsContext()
}

type OC_NodeLabelsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_NodeLabelsContext() *OC_NodeLabelsContext {
	var p = new(OC_NodeLabelsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_NodeLabels
	return p
}

func (*OC_NodeLabelsContext) IsOC_NodeLabelsContext() {}

func NewOC_NodeLabelsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_NodeLabelsContext {
	var p = new(OC_NodeLabelsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_NodeLabels

	return p
}

func (s *OC_NodeLabelsContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_NodeLabelsContext) AllOC_NodeLabel() []IOC_NodeLabelContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOC_NodeLabelContext)(nil)).Elem())
	var tst = make([]IOC_NodeLabelContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOC_NodeLabelContext)
		}
	}

	return tst
}

func (s *OC_NodeLabelsContext) OC_NodeLabel(i int) IOC_NodeLabelContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_NodeLabelContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOC_NodeLabelContext)
}

func (s *OC_NodeLabelsContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_NodeLabelsContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_NodeLabelsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_NodeLabelsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_NodeLabelsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_NodeLabels(s)
	}
}

func (s *OC_NodeLabelsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_NodeLabels(s)
	}
}

func (p *CypherParser) OC_NodeLabels() (localctx IOC_NodeLabelsContext) {
	localctx = NewOC_NodeLabelsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 88, CypherParserRULE_oC_NodeLabels)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(832)
		p.OC_NodeLabel()
	}
	p.SetState(839)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 137, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(834)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == CypherParserSP {
				{
					p.SetState(833)
					p.Match(CypherParserSP)
				}

			}
			{
				p.SetState(836)
				p.OC_NodeLabel()
			}

		}
		p.SetState(841)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 137, p.GetParserRuleContext())
	}

	return localctx
}

// IOC_NodeLabelContext is an interface to support dynamic dispatch.
type IOC_NodeLabelContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_NodeLabelContext differentiates from other interfaces.
	IsOC_NodeLabelContext()
}

type OC_NodeLabelContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_NodeLabelContext() *OC_NodeLabelContext {
	var p = new(OC_NodeLabelContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_NodeLabel
	return p
}

func (*OC_NodeLabelContext) IsOC_NodeLabelContext() {}

func NewOC_NodeLabelContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_NodeLabelContext {
	var p = new(OC_NodeLabelContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_NodeLabel

	return p
}

func (s *OC_NodeLabelContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_NodeLabelContext) OC_LabelName() IOC_LabelNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_LabelNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_LabelNameContext)
}

func (s *OC_NodeLabelContext) SP() antlr.TerminalNode {
	return s.GetToken(CypherParserSP, 0)
}

func (s *OC_NodeLabelContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_NodeLabelContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_NodeLabelContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_NodeLabel(s)
	}
}

func (s *OC_NodeLabelContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_NodeLabel(s)
	}
}

func (p *CypherParser) OC_NodeLabel() (localctx IOC_NodeLabelContext) {
	localctx = NewOC_NodeLabelContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 90, CypherParserRULE_oC_NodeLabel)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(842)
		p.Match(CypherParserT__9)
	}
	p.SetState(844)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserSP {
		{
			p.SetState(843)
			p.Match(CypherParserSP)
		}

	}
	{
		p.SetState(846)
		p.OC_LabelName()
	}

	return localctx
}

// IOC_RangeLiteralContext is an interface to support dynamic dispatch.
type IOC_RangeLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_RangeLiteralContext differentiates from other interfaces.
	IsOC_RangeLiteralContext()
}

type OC_RangeLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_RangeLiteralContext() *OC_RangeLiteralContext {
	var p = new(OC_RangeLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_RangeLiteral
	return p
}

func (*OC_RangeLiteralContext) IsOC_RangeLiteralContext() {}

func NewOC_RangeLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_RangeLiteralContext {
	var p = new(OC_RangeLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_RangeLiteral

	return p
}

func (s *OC_RangeLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_RangeLiteralContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_RangeLiteralContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_RangeLiteralContext) AllOC_IntegerLiteral() []IOC_IntegerLiteralContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOC_IntegerLiteralContext)(nil)).Elem())
	var tst = make([]IOC_IntegerLiteralContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOC_IntegerLiteralContext)
		}
	}

	return tst
}

func (s *OC_RangeLiteralContext) OC_IntegerLiteral(i int) IOC_IntegerLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_IntegerLiteralContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOC_IntegerLiteralContext)
}

func (s *OC_RangeLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_RangeLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_RangeLiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_RangeLiteral(s)
	}
}

func (s *OC_RangeLiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_RangeLiteral(s)
	}
}

func (p *CypherParser) OC_RangeLiteral() (localctx IOC_RangeLiteralContext) {
	localctx = NewOC_RangeLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 92, CypherParserRULE_oC_RangeLiteral)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(848)
		p.Match(CypherParserT__4)
	}
	p.SetState(850)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserSP {
		{
			p.SetState(849)
			p.Match(CypherParserSP)
		}

	}
	p.SetState(856)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if ((_la-97)&-(0x1f+1)) == 0 && ((1<<uint((_la-97)))&((1<<(CypherParserHexInteger-97))|(1<<(CypherParserDecimalInteger-97))|(1<<(CypherParserOctalInteger-97)))) != 0 {
		{
			p.SetState(852)
			p.OC_IntegerLiteral()
		}
		p.SetState(854)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(853)
				p.Match(CypherParserSP)
			}

		}

	}
	p.SetState(868)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserT__11 {
		{
			p.SetState(858)
			p.Match(CypherParserT__11)
		}
		p.SetState(860)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(859)
				p.Match(CypherParserSP)
			}

		}
		p.SetState(866)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if ((_la-97)&-(0x1f+1)) == 0 && ((1<<uint((_la-97)))&((1<<(CypherParserHexInteger-97))|(1<<(CypherParserDecimalInteger-97))|(1<<(CypherParserOctalInteger-97)))) != 0 {
			{
				p.SetState(862)
				p.OC_IntegerLiteral()
			}
			p.SetState(864)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == CypherParserSP {
				{
					p.SetState(863)
					p.Match(CypherParserSP)
				}

			}

		}

	}

	return localctx
}

// IOC_LabelNameContext is an interface to support dynamic dispatch.
type IOC_LabelNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_LabelNameContext differentiates from other interfaces.
	IsOC_LabelNameContext()
}

type OC_LabelNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_LabelNameContext() *OC_LabelNameContext {
	var p = new(OC_LabelNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_LabelName
	return p
}

func (*OC_LabelNameContext) IsOC_LabelNameContext() {}

func NewOC_LabelNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_LabelNameContext {
	var p = new(OC_LabelNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_LabelName

	return p
}

func (s *OC_LabelNameContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_LabelNameContext) OC_SchemaName() IOC_SchemaNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_SchemaNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_SchemaNameContext)
}

func (s *OC_LabelNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_LabelNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_LabelNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_LabelName(s)
	}
}

func (s *OC_LabelNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_LabelName(s)
	}
}

func (p *CypherParser) OC_LabelName() (localctx IOC_LabelNameContext) {
	localctx = NewOC_LabelNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 94, CypherParserRULE_oC_LabelName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(870)
		p.OC_SchemaName()
	}

	return localctx
}

// IOC_RelTypeNameContext is an interface to support dynamic dispatch.
type IOC_RelTypeNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_RelTypeNameContext differentiates from other interfaces.
	IsOC_RelTypeNameContext()
}

type OC_RelTypeNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_RelTypeNameContext() *OC_RelTypeNameContext {
	var p = new(OC_RelTypeNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_RelTypeName
	return p
}

func (*OC_RelTypeNameContext) IsOC_RelTypeNameContext() {}

func NewOC_RelTypeNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_RelTypeNameContext {
	var p = new(OC_RelTypeNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_RelTypeName

	return p
}

func (s *OC_RelTypeNameContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_RelTypeNameContext) OC_SchemaName() IOC_SchemaNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_SchemaNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_SchemaNameContext)
}

func (s *OC_RelTypeNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_RelTypeNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_RelTypeNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_RelTypeName(s)
	}
}

func (s *OC_RelTypeNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_RelTypeName(s)
	}
}

func (p *CypherParser) OC_RelTypeName() (localctx IOC_RelTypeNameContext) {
	localctx = NewOC_RelTypeNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 96, CypherParserRULE_oC_RelTypeName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(872)
		p.OC_SchemaName()
	}

	return localctx
}

// IOC_ExpressionContext is an interface to support dynamic dispatch.
type IOC_ExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_ExpressionContext differentiates from other interfaces.
	IsOC_ExpressionContext()
}

type OC_ExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_ExpressionContext() *OC_ExpressionContext {
	var p = new(OC_ExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_Expression
	return p
}

func (*OC_ExpressionContext) IsOC_ExpressionContext() {}

func NewOC_ExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_ExpressionContext {
	var p = new(OC_ExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_Expression

	return p
}

func (s *OC_ExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_ExpressionContext) OC_OrExpression() IOC_OrExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_OrExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_OrExpressionContext)
}

func (s *OC_ExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_ExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_ExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_Expression(s)
	}
}

func (s *OC_ExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_Expression(s)
	}
}

func (p *CypherParser) OC_Expression() (localctx IOC_ExpressionContext) {
	localctx = NewOC_ExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 98, CypherParserRULE_oC_Expression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(874)
		p.OC_OrExpression()
	}

	return localctx
}

// IOC_OrExpressionContext is an interface to support dynamic dispatch.
type IOC_OrExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_OrExpressionContext differentiates from other interfaces.
	IsOC_OrExpressionContext()
}

type OC_OrExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_OrExpressionContext() *OC_OrExpressionContext {
	var p = new(OC_OrExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_OrExpression
	return p
}

func (*OC_OrExpressionContext) IsOC_OrExpressionContext() {}

func NewOC_OrExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_OrExpressionContext {
	var p = new(OC_OrExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_OrExpression

	return p
}

func (s *OC_OrExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_OrExpressionContext) AllOC_XorExpression() []IOC_XorExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOC_XorExpressionContext)(nil)).Elem())
	var tst = make([]IOC_XorExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOC_XorExpressionContext)
		}
	}

	return tst
}

func (s *OC_OrExpressionContext) OC_XorExpression(i int) IOC_XorExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_XorExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOC_XorExpressionContext)
}

func (s *OC_OrExpressionContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_OrExpressionContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_OrExpressionContext) AllOR() []antlr.TerminalNode {
	return s.GetTokens(CypherParserOR)
}

func (s *OC_OrExpressionContext) OR(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserOR, i)
}

func (s *OC_OrExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_OrExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_OrExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_OrExpression(s)
	}
}

func (s *OC_OrExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_OrExpression(s)
	}
}

func (p *CypherParser) OC_OrExpression() (localctx IOC_OrExpressionContext) {
	localctx = NewOC_OrExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 100, CypherParserRULE_oC_OrExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(876)
		p.OC_XorExpression()
	}
	p.SetState(883)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 146, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(877)
				p.Match(CypherParserSP)
			}
			{
				p.SetState(878)
				p.Match(CypherParserOR)
			}
			{
				p.SetState(879)
				p.Match(CypherParserSP)
			}
			{
				p.SetState(880)
				p.OC_XorExpression()
			}

		}
		p.SetState(885)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 146, p.GetParserRuleContext())
	}

	return localctx
}

// IOC_XorExpressionContext is an interface to support dynamic dispatch.
type IOC_XorExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_XorExpressionContext differentiates from other interfaces.
	IsOC_XorExpressionContext()
}

type OC_XorExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_XorExpressionContext() *OC_XorExpressionContext {
	var p = new(OC_XorExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_XorExpression
	return p
}

func (*OC_XorExpressionContext) IsOC_XorExpressionContext() {}

func NewOC_XorExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_XorExpressionContext {
	var p = new(OC_XorExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_XorExpression

	return p
}

func (s *OC_XorExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_XorExpressionContext) AllOC_AndExpression() []IOC_AndExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOC_AndExpressionContext)(nil)).Elem())
	var tst = make([]IOC_AndExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOC_AndExpressionContext)
		}
	}

	return tst
}

func (s *OC_XorExpressionContext) OC_AndExpression(i int) IOC_AndExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_AndExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOC_AndExpressionContext)
}

func (s *OC_XorExpressionContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_XorExpressionContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_XorExpressionContext) AllXOR() []antlr.TerminalNode {
	return s.GetTokens(CypherParserXOR)
}

func (s *OC_XorExpressionContext) XOR(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserXOR, i)
}

func (s *OC_XorExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_XorExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_XorExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_XorExpression(s)
	}
}

func (s *OC_XorExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_XorExpression(s)
	}
}

func (p *CypherParser) OC_XorExpression() (localctx IOC_XorExpressionContext) {
	localctx = NewOC_XorExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 102, CypherParserRULE_oC_XorExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(886)
		p.OC_AndExpression()
	}
	p.SetState(893)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 147, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(887)
				p.Match(CypherParserSP)
			}
			{
				p.SetState(888)
				p.Match(CypherParserXOR)
			}
			{
				p.SetState(889)
				p.Match(CypherParserSP)
			}
			{
				p.SetState(890)
				p.OC_AndExpression()
			}

		}
		p.SetState(895)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 147, p.GetParserRuleContext())
	}

	return localctx
}

// IOC_AndExpressionContext is an interface to support dynamic dispatch.
type IOC_AndExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_AndExpressionContext differentiates from other interfaces.
	IsOC_AndExpressionContext()
}

type OC_AndExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_AndExpressionContext() *OC_AndExpressionContext {
	var p = new(OC_AndExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_AndExpression
	return p
}

func (*OC_AndExpressionContext) IsOC_AndExpressionContext() {}

func NewOC_AndExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_AndExpressionContext {
	var p = new(OC_AndExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_AndExpression

	return p
}

func (s *OC_AndExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_AndExpressionContext) AllOC_NotExpression() []IOC_NotExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOC_NotExpressionContext)(nil)).Elem())
	var tst = make([]IOC_NotExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOC_NotExpressionContext)
		}
	}

	return tst
}

func (s *OC_AndExpressionContext) OC_NotExpression(i int) IOC_NotExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_NotExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOC_NotExpressionContext)
}

func (s *OC_AndExpressionContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_AndExpressionContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_AndExpressionContext) AllAND() []antlr.TerminalNode {
	return s.GetTokens(CypherParserAND)
}

func (s *OC_AndExpressionContext) AND(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserAND, i)
}

func (s *OC_AndExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_AndExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_AndExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_AndExpression(s)
	}
}

func (s *OC_AndExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_AndExpression(s)
	}
}

func (p *CypherParser) OC_AndExpression() (localctx IOC_AndExpressionContext) {
	localctx = NewOC_AndExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 104, CypherParserRULE_oC_AndExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(896)
		p.OC_NotExpression()
	}
	p.SetState(903)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 148, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(897)
				p.Match(CypherParserSP)
			}
			{
				p.SetState(898)
				p.Match(CypherParserAND)
			}
			{
				p.SetState(899)
				p.Match(CypherParserSP)
			}
			{
				p.SetState(900)
				p.OC_NotExpression()
			}

		}
		p.SetState(905)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 148, p.GetParserRuleContext())
	}

	return localctx
}

// IOC_NotExpressionContext is an interface to support dynamic dispatch.
type IOC_NotExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_NotExpressionContext differentiates from other interfaces.
	IsOC_NotExpressionContext()
}

type OC_NotExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_NotExpressionContext() *OC_NotExpressionContext {
	var p = new(OC_NotExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_NotExpression
	return p
}

func (*OC_NotExpressionContext) IsOC_NotExpressionContext() {}

func NewOC_NotExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_NotExpressionContext {
	var p = new(OC_NotExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_NotExpression

	return p
}

func (s *OC_NotExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_NotExpressionContext) OC_ComparisonExpression() IOC_ComparisonExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_ComparisonExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_ComparisonExpressionContext)
}

func (s *OC_NotExpressionContext) AllNOT() []antlr.TerminalNode {
	return s.GetTokens(CypherParserNOT)
}

func (s *OC_NotExpressionContext) NOT(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserNOT, i)
}

func (s *OC_NotExpressionContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_NotExpressionContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_NotExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_NotExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_NotExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_NotExpression(s)
	}
}

func (s *OC_NotExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_NotExpression(s)
	}
}

func (p *CypherParser) OC_NotExpression() (localctx IOC_NotExpressionContext) {
	localctx = NewOC_NotExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 106, CypherParserRULE_oC_NotExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(912)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == CypherParserNOT {
		{
			p.SetState(906)
			p.Match(CypherParserNOT)
		}
		p.SetState(908)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(907)
				p.Match(CypherParserSP)
			}

		}

		p.SetState(914)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(915)
		p.OC_ComparisonExpression()
	}

	return localctx
}

// IOC_ComparisonExpressionContext is an interface to support dynamic dispatch.
type IOC_ComparisonExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_ComparisonExpressionContext differentiates from other interfaces.
	IsOC_ComparisonExpressionContext()
}

type OC_ComparisonExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_ComparisonExpressionContext() *OC_ComparisonExpressionContext {
	var p = new(OC_ComparisonExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_ComparisonExpression
	return p
}

func (*OC_ComparisonExpressionContext) IsOC_ComparisonExpressionContext() {}

func NewOC_ComparisonExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_ComparisonExpressionContext {
	var p = new(OC_ComparisonExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_ComparisonExpression

	return p
}

func (s *OC_ComparisonExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_ComparisonExpressionContext) OC_AddOrSubtractExpression() IOC_AddOrSubtractExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_AddOrSubtractExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_AddOrSubtractExpressionContext)
}

func (s *OC_ComparisonExpressionContext) AllOC_PartialComparisonExpression() []IOC_PartialComparisonExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOC_PartialComparisonExpressionContext)(nil)).Elem())
	var tst = make([]IOC_PartialComparisonExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOC_PartialComparisonExpressionContext)
		}
	}

	return tst
}

func (s *OC_ComparisonExpressionContext) OC_PartialComparisonExpression(i int) IOC_PartialComparisonExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_PartialComparisonExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOC_PartialComparisonExpressionContext)
}

func (s *OC_ComparisonExpressionContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_ComparisonExpressionContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_ComparisonExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_ComparisonExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_ComparisonExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_ComparisonExpression(s)
	}
}

func (s *OC_ComparisonExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_ComparisonExpression(s)
	}
}

func (p *CypherParser) OC_ComparisonExpression() (localctx IOC_ComparisonExpressionContext) {
	localctx = NewOC_ComparisonExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 108, CypherParserRULE_oC_ComparisonExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(917)
		p.OC_AddOrSubtractExpression()
	}
	p.SetState(924)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 152, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(919)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == CypherParserSP {
				{
					p.SetState(918)
					p.Match(CypherParserSP)
				}

			}
			{
				p.SetState(921)
				p.OC_PartialComparisonExpression()
			}

		}
		p.SetState(926)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 152, p.GetParserRuleContext())
	}

	return localctx
}

// IOC_AddOrSubtractExpressionContext is an interface to support dynamic dispatch.
type IOC_AddOrSubtractExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_AddOrSubtractExpressionContext differentiates from other interfaces.
	IsOC_AddOrSubtractExpressionContext()
}

type OC_AddOrSubtractExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_AddOrSubtractExpressionContext() *OC_AddOrSubtractExpressionContext {
	var p = new(OC_AddOrSubtractExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_AddOrSubtractExpression
	return p
}

func (*OC_AddOrSubtractExpressionContext) IsOC_AddOrSubtractExpressionContext() {}

func NewOC_AddOrSubtractExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_AddOrSubtractExpressionContext {
	var p = new(OC_AddOrSubtractExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_AddOrSubtractExpression

	return p
}

func (s *OC_AddOrSubtractExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_AddOrSubtractExpressionContext) AllOC_MultiplyDivideModuloExpression() []IOC_MultiplyDivideModuloExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOC_MultiplyDivideModuloExpressionContext)(nil)).Elem())
	var tst = make([]IOC_MultiplyDivideModuloExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOC_MultiplyDivideModuloExpressionContext)
		}
	}

	return tst
}

func (s *OC_AddOrSubtractExpressionContext) OC_MultiplyDivideModuloExpression(i int) IOC_MultiplyDivideModuloExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_MultiplyDivideModuloExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOC_MultiplyDivideModuloExpressionContext)
}

func (s *OC_AddOrSubtractExpressionContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_AddOrSubtractExpressionContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_AddOrSubtractExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_AddOrSubtractExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_AddOrSubtractExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_AddOrSubtractExpression(s)
	}
}

func (s *OC_AddOrSubtractExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_AddOrSubtractExpression(s)
	}
}

func (p *CypherParser) OC_AddOrSubtractExpression() (localctx IOC_AddOrSubtractExpressionContext) {
	localctx = NewOC_AddOrSubtractExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 110, CypherParserRULE_oC_AddOrSubtractExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(927)
		p.OC_MultiplyDivideModuloExpression()
	}
	p.SetState(946)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 158, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(944)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 157, p.GetParserRuleContext()) {
			case 1:
				p.SetState(929)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == CypherParserSP {
					{
						p.SetState(928)
						p.Match(CypherParserSP)
					}

				}
				{
					p.SetState(931)
					p.Match(CypherParserT__12)
				}
				p.SetState(933)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == CypherParserSP {
					{
						p.SetState(932)
						p.Match(CypherParserSP)
					}

				}
				{
					p.SetState(935)
					p.OC_MultiplyDivideModuloExpression()
				}

			case 2:
				p.SetState(937)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == CypherParserSP {
					{
						p.SetState(936)
						p.Match(CypherParserSP)
					}

				}
				{
					p.SetState(939)
					p.Match(CypherParserT__13)
				}
				p.SetState(941)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == CypherParserSP {
					{
						p.SetState(940)
						p.Match(CypherParserSP)
					}

				}
				{
					p.SetState(943)
					p.OC_MultiplyDivideModuloExpression()
				}

			}

		}
		p.SetState(948)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 158, p.GetParserRuleContext())
	}

	return localctx
}

// IOC_MultiplyDivideModuloExpressionContext is an interface to support dynamic dispatch.
type IOC_MultiplyDivideModuloExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_MultiplyDivideModuloExpressionContext differentiates from other interfaces.
	IsOC_MultiplyDivideModuloExpressionContext()
}

type OC_MultiplyDivideModuloExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_MultiplyDivideModuloExpressionContext() *OC_MultiplyDivideModuloExpressionContext {
	var p = new(OC_MultiplyDivideModuloExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_MultiplyDivideModuloExpression
	return p
}

func (*OC_MultiplyDivideModuloExpressionContext) IsOC_MultiplyDivideModuloExpressionContext() {}

func NewOC_MultiplyDivideModuloExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_MultiplyDivideModuloExpressionContext {
	var p = new(OC_MultiplyDivideModuloExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_MultiplyDivideModuloExpression

	return p
}

func (s *OC_MultiplyDivideModuloExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_MultiplyDivideModuloExpressionContext) AllOC_PowerOfExpression() []IOC_PowerOfExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOC_PowerOfExpressionContext)(nil)).Elem())
	var tst = make([]IOC_PowerOfExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOC_PowerOfExpressionContext)
		}
	}

	return tst
}

func (s *OC_MultiplyDivideModuloExpressionContext) OC_PowerOfExpression(i int) IOC_PowerOfExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_PowerOfExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOC_PowerOfExpressionContext)
}

func (s *OC_MultiplyDivideModuloExpressionContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_MultiplyDivideModuloExpressionContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_MultiplyDivideModuloExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_MultiplyDivideModuloExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_MultiplyDivideModuloExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_MultiplyDivideModuloExpression(s)
	}
}

func (s *OC_MultiplyDivideModuloExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_MultiplyDivideModuloExpression(s)
	}
}

func (p *CypherParser) OC_MultiplyDivideModuloExpression() (localctx IOC_MultiplyDivideModuloExpressionContext) {
	localctx = NewOC_MultiplyDivideModuloExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 112, CypherParserRULE_oC_MultiplyDivideModuloExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(949)
		p.OC_PowerOfExpression()
	}
	p.SetState(976)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 166, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(974)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 165, p.GetParserRuleContext()) {
			case 1:
				p.SetState(951)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == CypherParserSP {
					{
						p.SetState(950)
						p.Match(CypherParserSP)
					}

				}
				{
					p.SetState(953)
					p.Match(CypherParserT__4)
				}
				p.SetState(955)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == CypherParserSP {
					{
						p.SetState(954)
						p.Match(CypherParserSP)
					}

				}
				{
					p.SetState(957)
					p.OC_PowerOfExpression()
				}

			case 2:
				p.SetState(959)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == CypherParserSP {
					{
						p.SetState(958)
						p.Match(CypherParserSP)
					}

				}
				{
					p.SetState(961)
					p.Match(CypherParserT__14)
				}
				p.SetState(963)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == CypherParserSP {
					{
						p.SetState(962)
						p.Match(CypherParserSP)
					}

				}
				{
					p.SetState(965)
					p.OC_PowerOfExpression()
				}

			case 3:
				p.SetState(967)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == CypherParserSP {
					{
						p.SetState(966)
						p.Match(CypherParserSP)
					}

				}
				{
					p.SetState(969)
					p.Match(CypherParserT__15)
				}
				p.SetState(971)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == CypherParserSP {
					{
						p.SetState(970)
						p.Match(CypherParserSP)
					}

				}
				{
					p.SetState(973)
					p.OC_PowerOfExpression()
				}

			}

		}
		p.SetState(978)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 166, p.GetParserRuleContext())
	}

	return localctx
}

// IOC_PowerOfExpressionContext is an interface to support dynamic dispatch.
type IOC_PowerOfExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_PowerOfExpressionContext differentiates from other interfaces.
	IsOC_PowerOfExpressionContext()
}

type OC_PowerOfExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_PowerOfExpressionContext() *OC_PowerOfExpressionContext {
	var p = new(OC_PowerOfExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_PowerOfExpression
	return p
}

func (*OC_PowerOfExpressionContext) IsOC_PowerOfExpressionContext() {}

func NewOC_PowerOfExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_PowerOfExpressionContext {
	var p = new(OC_PowerOfExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_PowerOfExpression

	return p
}

func (s *OC_PowerOfExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_PowerOfExpressionContext) AllOC_UnaryAddOrSubtractExpression() []IOC_UnaryAddOrSubtractExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOC_UnaryAddOrSubtractExpressionContext)(nil)).Elem())
	var tst = make([]IOC_UnaryAddOrSubtractExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOC_UnaryAddOrSubtractExpressionContext)
		}
	}

	return tst
}

func (s *OC_PowerOfExpressionContext) OC_UnaryAddOrSubtractExpression(i int) IOC_UnaryAddOrSubtractExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_UnaryAddOrSubtractExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOC_UnaryAddOrSubtractExpressionContext)
}

func (s *OC_PowerOfExpressionContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_PowerOfExpressionContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_PowerOfExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_PowerOfExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_PowerOfExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_PowerOfExpression(s)
	}
}

func (s *OC_PowerOfExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_PowerOfExpression(s)
	}
}

func (p *CypherParser) OC_PowerOfExpression() (localctx IOC_PowerOfExpressionContext) {
	localctx = NewOC_PowerOfExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 114, CypherParserRULE_oC_PowerOfExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(979)
		p.OC_UnaryAddOrSubtractExpression()
	}
	p.SetState(990)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 169, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(981)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == CypherParserSP {
				{
					p.SetState(980)
					p.Match(CypherParserSP)
				}

			}
			{
				p.SetState(983)
				p.Match(CypherParserT__16)
			}
			p.SetState(985)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == CypherParserSP {
				{
					p.SetState(984)
					p.Match(CypherParserSP)
				}

			}
			{
				p.SetState(987)
				p.OC_UnaryAddOrSubtractExpression()
			}

		}
		p.SetState(992)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 169, p.GetParserRuleContext())
	}

	return localctx
}

// IOC_UnaryAddOrSubtractExpressionContext is an interface to support dynamic dispatch.
type IOC_UnaryAddOrSubtractExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_UnaryAddOrSubtractExpressionContext differentiates from other interfaces.
	IsOC_UnaryAddOrSubtractExpressionContext()
}

type OC_UnaryAddOrSubtractExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_UnaryAddOrSubtractExpressionContext() *OC_UnaryAddOrSubtractExpressionContext {
	var p = new(OC_UnaryAddOrSubtractExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_UnaryAddOrSubtractExpression
	return p
}

func (*OC_UnaryAddOrSubtractExpressionContext) IsOC_UnaryAddOrSubtractExpressionContext() {}

func NewOC_UnaryAddOrSubtractExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_UnaryAddOrSubtractExpressionContext {
	var p = new(OC_UnaryAddOrSubtractExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_UnaryAddOrSubtractExpression

	return p
}

func (s *OC_UnaryAddOrSubtractExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_UnaryAddOrSubtractExpressionContext) OC_StringListNullOperatorExpression() IOC_StringListNullOperatorExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_StringListNullOperatorExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_StringListNullOperatorExpressionContext)
}

func (s *OC_UnaryAddOrSubtractExpressionContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_UnaryAddOrSubtractExpressionContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_UnaryAddOrSubtractExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_UnaryAddOrSubtractExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_UnaryAddOrSubtractExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_UnaryAddOrSubtractExpression(s)
	}
}

func (s *OC_UnaryAddOrSubtractExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_UnaryAddOrSubtractExpression(s)
	}
}

func (p *CypherParser) OC_UnaryAddOrSubtractExpression() (localctx IOC_UnaryAddOrSubtractExpressionContext) {
	localctx = NewOC_UnaryAddOrSubtractExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 116, CypherParserRULE_oC_UnaryAddOrSubtractExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(999)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == CypherParserT__12 || _la == CypherParserT__13 {
		{
			p.SetState(993)
			_la = p.GetTokenStream().LA(1)

			if !(_la == CypherParserT__12 || _la == CypherParserT__13) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(995)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(994)
				p.Match(CypherParserSP)
			}

		}

		p.SetState(1001)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1002)
		p.OC_StringListNullOperatorExpression()
	}

	return localctx
}

// IOC_StringListNullOperatorExpressionContext is an interface to support dynamic dispatch.
type IOC_StringListNullOperatorExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_StringListNullOperatorExpressionContext differentiates from other interfaces.
	IsOC_StringListNullOperatorExpressionContext()
}

type OC_StringListNullOperatorExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_StringListNullOperatorExpressionContext() *OC_StringListNullOperatorExpressionContext {
	var p = new(OC_StringListNullOperatorExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_StringListNullOperatorExpression
	return p
}

func (*OC_StringListNullOperatorExpressionContext) IsOC_StringListNullOperatorExpressionContext() {}

func NewOC_StringListNullOperatorExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_StringListNullOperatorExpressionContext {
	var p = new(OC_StringListNullOperatorExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_StringListNullOperatorExpression

	return p
}

func (s *OC_StringListNullOperatorExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_StringListNullOperatorExpressionContext) OC_PropertyOrLabelsExpression() IOC_PropertyOrLabelsExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_PropertyOrLabelsExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_PropertyOrLabelsExpressionContext)
}

func (s *OC_StringListNullOperatorExpressionContext) AllOC_StringOperatorExpression() []IOC_StringOperatorExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOC_StringOperatorExpressionContext)(nil)).Elem())
	var tst = make([]IOC_StringOperatorExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOC_StringOperatorExpressionContext)
		}
	}

	return tst
}

func (s *OC_StringListNullOperatorExpressionContext) OC_StringOperatorExpression(i int) IOC_StringOperatorExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_StringOperatorExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOC_StringOperatorExpressionContext)
}

func (s *OC_StringListNullOperatorExpressionContext) AllOC_ListOperatorExpression() []IOC_ListOperatorExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOC_ListOperatorExpressionContext)(nil)).Elem())
	var tst = make([]IOC_ListOperatorExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOC_ListOperatorExpressionContext)
		}
	}

	return tst
}

func (s *OC_StringListNullOperatorExpressionContext) OC_ListOperatorExpression(i int) IOC_ListOperatorExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_ListOperatorExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOC_ListOperatorExpressionContext)
}

func (s *OC_StringListNullOperatorExpressionContext) AllOC_NullOperatorExpression() []IOC_NullOperatorExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOC_NullOperatorExpressionContext)(nil)).Elem())
	var tst = make([]IOC_NullOperatorExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOC_NullOperatorExpressionContext)
		}
	}

	return tst
}

func (s *OC_StringListNullOperatorExpressionContext) OC_NullOperatorExpression(i int) IOC_NullOperatorExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_NullOperatorExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOC_NullOperatorExpressionContext)
}

func (s *OC_StringListNullOperatorExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_StringListNullOperatorExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_StringListNullOperatorExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_StringListNullOperatorExpression(s)
	}
}

func (s *OC_StringListNullOperatorExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_StringListNullOperatorExpression(s)
	}
}

func (p *CypherParser) OC_StringListNullOperatorExpression() (localctx IOC_StringListNullOperatorExpressionContext) {
	localctx = NewOC_StringListNullOperatorExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 118, CypherParserRULE_oC_StringListNullOperatorExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1004)
		p.OC_PropertyOrLabelsExpression()
	}
	p.SetState(1010)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 173, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(1008)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 172, p.GetParserRuleContext()) {
			case 1:
				{
					p.SetState(1005)
					p.OC_StringOperatorExpression()
				}

			case 2:
				{
					p.SetState(1006)
					p.OC_ListOperatorExpression()
				}

			case 3:
				{
					p.SetState(1007)
					p.OC_NullOperatorExpression()
				}

			}

		}
		p.SetState(1012)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 173, p.GetParserRuleContext())
	}

	return localctx
}

// IOC_ListOperatorExpressionContext is an interface to support dynamic dispatch.
type IOC_ListOperatorExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_ListOperatorExpressionContext differentiates from other interfaces.
	IsOC_ListOperatorExpressionContext()
}

type OC_ListOperatorExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_ListOperatorExpressionContext() *OC_ListOperatorExpressionContext {
	var p = new(OC_ListOperatorExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_ListOperatorExpression
	return p
}

func (*OC_ListOperatorExpressionContext) IsOC_ListOperatorExpressionContext() {}

func NewOC_ListOperatorExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_ListOperatorExpressionContext {
	var p = new(OC_ListOperatorExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_ListOperatorExpression

	return p
}

func (s *OC_ListOperatorExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_ListOperatorExpressionContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_ListOperatorExpressionContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_ListOperatorExpressionContext) IN() antlr.TerminalNode {
	return s.GetToken(CypherParserIN, 0)
}

func (s *OC_ListOperatorExpressionContext) OC_PropertyOrLabelsExpression() IOC_PropertyOrLabelsExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_PropertyOrLabelsExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_PropertyOrLabelsExpressionContext)
}

func (s *OC_ListOperatorExpressionContext) AllOC_Expression() []IOC_ExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOC_ExpressionContext)(nil)).Elem())
	var tst = make([]IOC_ExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOC_ExpressionContext)
		}
	}

	return tst
}

func (s *OC_ListOperatorExpressionContext) OC_Expression(i int) IOC_ExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_ExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOC_ExpressionContext)
}

func (s *OC_ListOperatorExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_ListOperatorExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_ListOperatorExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_ListOperatorExpression(s)
	}
}

func (s *OC_ListOperatorExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_ListOperatorExpression(s)
	}
}

func (p *CypherParser) OC_ListOperatorExpression() (localctx IOC_ListOperatorExpressionContext) {
	localctx = NewOC_ListOperatorExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 120, CypherParserRULE_oC_ListOperatorExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1038)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 179, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1013)
			p.Match(CypherParserSP)
		}
		{
			p.SetState(1014)
			p.Match(CypherParserIN)
		}
		p.SetState(1016)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(1015)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(1018)
			p.OC_PropertyOrLabelsExpression()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(1020)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(1019)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(1022)
			p.Match(CypherParserT__7)
		}
		{
			p.SetState(1023)
			p.OC_Expression()
		}
		{
			p.SetState(1024)
			p.Match(CypherParserT__8)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		p.SetState(1027)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(1026)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(1029)
			p.Match(CypherParserT__7)
		}
		p.SetState(1031)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<CypherParserT__5)|(1<<CypherParserT__7)|(1<<CypherParserT__12)|(1<<CypherParserT__13)|(1<<CypherParserT__23)|(1<<CypherParserT__25))) != 0) || _la == CypherParserALL || _la == CypherParserNOT || (((_la-82)&-(0x1f+1)) == 0 && ((1<<uint((_la-82)))&((1<<(CypherParserNULL-82))|(1<<(CypherParserCOUNT-82))|(1<<(CypherParserANY-82))|(1<<(CypherParserNONE-82))|(1<<(CypherParserSINGLE-82))|(1<<(CypherParserTRUE-82))|(1<<(CypherParserFALSE-82))|(1<<(CypherParserEXISTS-82))|(1<<(CypherParserCASE-82))|(1<<(CypherParserStringLiteral-82))|(1<<(CypherParserHexInteger-82))|(1<<(CypherParserDecimalInteger-82))|(1<<(CypherParserOctalInteger-82))|(1<<(CypherParserHexLetter-82))|(1<<(CypherParserExponentDecimalReal-82))|(1<<(CypherParserRegularDecimalReal-82)))) != 0) || (((_la-119)&-(0x1f+1)) == 0 && ((1<<uint((_la-119)))&((1<<(CypherParserFILTER-119))|(1<<(CypherParserEXTRACT-119))|(1<<(CypherParserUnescapedSymbolicName-119))|(1<<(CypherParserEscapedSymbolicName-119)))) != 0) {
			{
				p.SetState(1030)
				p.OC_Expression()
			}

		}
		{
			p.SetState(1033)
			p.Match(CypherParserT__11)
		}
		p.SetState(1035)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<CypherParserT__5)|(1<<CypherParserT__7)|(1<<CypherParserT__12)|(1<<CypherParserT__13)|(1<<CypherParserT__23)|(1<<CypherParserT__25))) != 0) || _la == CypherParserALL || _la == CypherParserNOT || (((_la-82)&-(0x1f+1)) == 0 && ((1<<uint((_la-82)))&((1<<(CypherParserNULL-82))|(1<<(CypherParserCOUNT-82))|(1<<(CypherParserANY-82))|(1<<(CypherParserNONE-82))|(1<<(CypherParserSINGLE-82))|(1<<(CypherParserTRUE-82))|(1<<(CypherParserFALSE-82))|(1<<(CypherParserEXISTS-82))|(1<<(CypherParserCASE-82))|(1<<(CypherParserStringLiteral-82))|(1<<(CypherParserHexInteger-82))|(1<<(CypherParserDecimalInteger-82))|(1<<(CypherParserOctalInteger-82))|(1<<(CypherParserHexLetter-82))|(1<<(CypherParserExponentDecimalReal-82))|(1<<(CypherParserRegularDecimalReal-82)))) != 0) || (((_la-119)&-(0x1f+1)) == 0 && ((1<<uint((_la-119)))&((1<<(CypherParserFILTER-119))|(1<<(CypherParserEXTRACT-119))|(1<<(CypherParserUnescapedSymbolicName-119))|(1<<(CypherParserEscapedSymbolicName-119)))) != 0) {
			{
				p.SetState(1034)
				p.OC_Expression()
			}

		}
		{
			p.SetState(1037)
			p.Match(CypherParserT__8)
		}

	}

	return localctx
}

// IOC_StringOperatorExpressionContext is an interface to support dynamic dispatch.
type IOC_StringOperatorExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_StringOperatorExpressionContext differentiates from other interfaces.
	IsOC_StringOperatorExpressionContext()
}

type OC_StringOperatorExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_StringOperatorExpressionContext() *OC_StringOperatorExpressionContext {
	var p = new(OC_StringOperatorExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_StringOperatorExpression
	return p
}

func (*OC_StringOperatorExpressionContext) IsOC_StringOperatorExpressionContext() {}

func NewOC_StringOperatorExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_StringOperatorExpressionContext {
	var p = new(OC_StringOperatorExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_StringOperatorExpression

	return p
}

func (s *OC_StringOperatorExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_StringOperatorExpressionContext) OC_PropertyOrLabelsExpression() IOC_PropertyOrLabelsExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_PropertyOrLabelsExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_PropertyOrLabelsExpressionContext)
}

func (s *OC_StringOperatorExpressionContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_StringOperatorExpressionContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_StringOperatorExpressionContext) STARTS() antlr.TerminalNode {
	return s.GetToken(CypherParserSTARTS, 0)
}

func (s *OC_StringOperatorExpressionContext) WITH() antlr.TerminalNode {
	return s.GetToken(CypherParserWITH, 0)
}

func (s *OC_StringOperatorExpressionContext) ENDS() antlr.TerminalNode {
	return s.GetToken(CypherParserENDS, 0)
}

func (s *OC_StringOperatorExpressionContext) CONTAINS() antlr.TerminalNode {
	return s.GetToken(CypherParserCONTAINS, 0)
}

func (s *OC_StringOperatorExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_StringOperatorExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_StringOperatorExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_StringOperatorExpression(s)
	}
}

func (s *OC_StringOperatorExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_StringOperatorExpression(s)
	}
}

func (p *CypherParser) OC_StringOperatorExpression() (localctx IOC_StringOperatorExpressionContext) {
	localctx = NewOC_StringOperatorExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 122, CypherParserRULE_oC_StringOperatorExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1050)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 180, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1040)
			p.Match(CypherParserSP)
		}
		{
			p.SetState(1041)
			p.Match(CypherParserSTARTS)
		}
		{
			p.SetState(1042)
			p.Match(CypherParserSP)
		}
		{
			p.SetState(1043)
			p.Match(CypherParserWITH)
		}

	case 2:
		{
			p.SetState(1044)
			p.Match(CypherParserSP)
		}
		{
			p.SetState(1045)
			p.Match(CypherParserENDS)
		}
		{
			p.SetState(1046)
			p.Match(CypherParserSP)
		}
		{
			p.SetState(1047)
			p.Match(CypherParserWITH)
		}

	case 3:
		{
			p.SetState(1048)
			p.Match(CypherParserSP)
		}
		{
			p.SetState(1049)
			p.Match(CypherParserCONTAINS)
		}

	}
	p.SetState(1053)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserSP {
		{
			p.SetState(1052)
			p.Match(CypherParserSP)
		}

	}
	{
		p.SetState(1055)
		p.OC_PropertyOrLabelsExpression()
	}

	return localctx
}

// IOC_NullOperatorExpressionContext is an interface to support dynamic dispatch.
type IOC_NullOperatorExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_NullOperatorExpressionContext differentiates from other interfaces.
	IsOC_NullOperatorExpressionContext()
}

type OC_NullOperatorExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_NullOperatorExpressionContext() *OC_NullOperatorExpressionContext {
	var p = new(OC_NullOperatorExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_NullOperatorExpression
	return p
}

func (*OC_NullOperatorExpressionContext) IsOC_NullOperatorExpressionContext() {}

func NewOC_NullOperatorExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_NullOperatorExpressionContext {
	var p = new(OC_NullOperatorExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_NullOperatorExpression

	return p
}

func (s *OC_NullOperatorExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_NullOperatorExpressionContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_NullOperatorExpressionContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_NullOperatorExpressionContext) IS() antlr.TerminalNode {
	return s.GetToken(CypherParserIS, 0)
}

func (s *OC_NullOperatorExpressionContext) NULL() antlr.TerminalNode {
	return s.GetToken(CypherParserNULL, 0)
}

func (s *OC_NullOperatorExpressionContext) NOT() antlr.TerminalNode {
	return s.GetToken(CypherParserNOT, 0)
}

func (s *OC_NullOperatorExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_NullOperatorExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_NullOperatorExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_NullOperatorExpression(s)
	}
}

func (s *OC_NullOperatorExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_NullOperatorExpression(s)
	}
}

func (p *CypherParser) OC_NullOperatorExpression() (localctx IOC_NullOperatorExpressionContext) {
	localctx = NewOC_NullOperatorExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 124, CypherParserRULE_oC_NullOperatorExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1067)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 182, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1057)
			p.Match(CypherParserSP)
		}
		{
			p.SetState(1058)
			p.Match(CypherParserIS)
		}
		{
			p.SetState(1059)
			p.Match(CypherParserSP)
		}
		{
			p.SetState(1060)
			p.Match(CypherParserNULL)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1061)
			p.Match(CypherParserSP)
		}
		{
			p.SetState(1062)
			p.Match(CypherParserIS)
		}
		{
			p.SetState(1063)
			p.Match(CypherParserSP)
		}
		{
			p.SetState(1064)
			p.Match(CypherParserNOT)
		}
		{
			p.SetState(1065)
			p.Match(CypherParserSP)
		}
		{
			p.SetState(1066)
			p.Match(CypherParserNULL)
		}

	}

	return localctx
}

// IOC_PropertyOrLabelsExpressionContext is an interface to support dynamic dispatch.
type IOC_PropertyOrLabelsExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_PropertyOrLabelsExpressionContext differentiates from other interfaces.
	IsOC_PropertyOrLabelsExpressionContext()
}

type OC_PropertyOrLabelsExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_PropertyOrLabelsExpressionContext() *OC_PropertyOrLabelsExpressionContext {
	var p = new(OC_PropertyOrLabelsExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_PropertyOrLabelsExpression
	return p
}

func (*OC_PropertyOrLabelsExpressionContext) IsOC_PropertyOrLabelsExpressionContext() {}

func NewOC_PropertyOrLabelsExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_PropertyOrLabelsExpressionContext {
	var p = new(OC_PropertyOrLabelsExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_PropertyOrLabelsExpression

	return p
}

func (s *OC_PropertyOrLabelsExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_PropertyOrLabelsExpressionContext) OC_Atom() IOC_AtomContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_AtomContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_AtomContext)
}

func (s *OC_PropertyOrLabelsExpressionContext) AllOC_PropertyLookup() []IOC_PropertyLookupContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOC_PropertyLookupContext)(nil)).Elem())
	var tst = make([]IOC_PropertyLookupContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOC_PropertyLookupContext)
		}
	}

	return tst
}

func (s *OC_PropertyOrLabelsExpressionContext) OC_PropertyLookup(i int) IOC_PropertyLookupContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_PropertyLookupContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOC_PropertyLookupContext)
}

func (s *OC_PropertyOrLabelsExpressionContext) OC_NodeLabels() IOC_NodeLabelsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_NodeLabelsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_NodeLabelsContext)
}

func (s *OC_PropertyOrLabelsExpressionContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_PropertyOrLabelsExpressionContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_PropertyOrLabelsExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_PropertyOrLabelsExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_PropertyOrLabelsExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_PropertyOrLabelsExpression(s)
	}
}

func (s *OC_PropertyOrLabelsExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_PropertyOrLabelsExpression(s)
	}
}

func (p *CypherParser) OC_PropertyOrLabelsExpression() (localctx IOC_PropertyOrLabelsExpressionContext) {
	localctx = NewOC_PropertyOrLabelsExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 126, CypherParserRULE_oC_PropertyOrLabelsExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1069)
		p.OC_Atom()
	}
	p.SetState(1076)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 184, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(1071)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == CypherParserSP {
				{
					p.SetState(1070)
					p.Match(CypherParserSP)
				}

			}
			{
				p.SetState(1073)
				p.OC_PropertyLookup()
			}

		}
		p.SetState(1078)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 184, p.GetParserRuleContext())
	}
	p.SetState(1083)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 186, p.GetParserRuleContext()) == 1 {
		p.SetState(1080)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(1079)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(1082)
			p.OC_NodeLabels()
		}

	}

	return localctx
}

// IOC_AtomContext is an interface to support dynamic dispatch.
type IOC_AtomContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_AtomContext differentiates from other interfaces.
	IsOC_AtomContext()
}

type OC_AtomContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_AtomContext() *OC_AtomContext {
	var p = new(OC_AtomContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_Atom
	return p
}

func (*OC_AtomContext) IsOC_AtomContext() {}

func NewOC_AtomContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_AtomContext {
	var p = new(OC_AtomContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_Atom

	return p
}

func (s *OC_AtomContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_AtomContext) OC_Literal() IOC_LiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_LiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_LiteralContext)
}

func (s *OC_AtomContext) OC_Parameter() IOC_ParameterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_ParameterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_ParameterContext)
}

func (s *OC_AtomContext) OC_CaseExpression() IOC_CaseExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_CaseExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_CaseExpressionContext)
}

func (s *OC_AtomContext) COUNT() antlr.TerminalNode {
	return s.GetToken(CypherParserCOUNT, 0)
}

func (s *OC_AtomContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_AtomContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_AtomContext) OC_ListComprehension() IOC_ListComprehensionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_ListComprehensionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_ListComprehensionContext)
}

func (s *OC_AtomContext) OC_PatternComprehension() IOC_PatternComprehensionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_PatternComprehensionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_PatternComprehensionContext)
}

func (s *OC_AtomContext) ALL() antlr.TerminalNode {
	return s.GetToken(CypherParserALL, 0)
}

func (s *OC_AtomContext) OC_FilterExpression() IOC_FilterExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_FilterExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_FilterExpressionContext)
}

func (s *OC_AtomContext) ANY() antlr.TerminalNode {
	return s.GetToken(CypherParserANY, 0)
}

func (s *OC_AtomContext) NONE() antlr.TerminalNode {
	return s.GetToken(CypherParserNONE, 0)
}

func (s *OC_AtomContext) SINGLE() antlr.TerminalNode {
	return s.GetToken(CypherParserSINGLE, 0)
}

func (s *OC_AtomContext) OC_RelationshipsPattern() IOC_RelationshipsPatternContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_RelationshipsPatternContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_RelationshipsPatternContext)
}

func (s *OC_AtomContext) OC_ParenthesizedExpression() IOC_ParenthesizedExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_ParenthesizedExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_ParenthesizedExpressionContext)
}

func (s *OC_AtomContext) OC_FunctionInvocation() IOC_FunctionInvocationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_FunctionInvocationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_FunctionInvocationContext)
}

func (s *OC_AtomContext) OC_Variable() IOC_VariableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_VariableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_VariableContext)
}

func (s *OC_AtomContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_AtomContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_AtomContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_Atom(s)
	}
}

func (s *OC_AtomContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_Atom(s)
	}
}

func (p *CypherParser) OC_Atom() (localctx IOC_AtomContext) {
	localctx = NewOC_AtomContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 128, CypherParserRULE_oC_Atom)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1163)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 202, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1085)
			p.OC_Literal()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1086)
			p.OC_Parameter()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1087)
			p.OC_CaseExpression()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1088)
			p.Match(CypherParserCOUNT)
		}
		p.SetState(1090)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(1089)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(1092)
			p.Match(CypherParserT__5)
		}
		p.SetState(1094)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(1093)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(1096)
			p.Match(CypherParserT__4)
		}
		p.SetState(1098)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(1097)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(1100)
			p.Match(CypherParserT__6)
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1101)
			p.OC_ListComprehension()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1102)
			p.OC_PatternComprehension()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1103)
			p.Match(CypherParserALL)
		}
		p.SetState(1105)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(1104)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(1107)
			p.Match(CypherParserT__5)
		}
		p.SetState(1109)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(1108)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(1111)
			p.OC_FilterExpression()
		}
		p.SetState(1113)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(1112)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(1115)
			p.Match(CypherParserT__6)
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(1117)
			p.Match(CypherParserANY)
		}
		p.SetState(1119)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(1118)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(1121)
			p.Match(CypherParserT__5)
		}
		p.SetState(1123)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(1122)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(1125)
			p.OC_FilterExpression()
		}
		p.SetState(1127)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(1126)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(1129)
			p.Match(CypherParserT__6)
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(1131)
			p.Match(CypherParserNONE)
		}
		p.SetState(1133)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(1132)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(1135)
			p.Match(CypherParserT__5)
		}
		p.SetState(1137)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(1136)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(1139)
			p.OC_FilterExpression()
		}
		p.SetState(1141)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(1140)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(1143)
			p.Match(CypherParserT__6)
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(1145)
			p.Match(CypherParserSINGLE)
		}
		p.SetState(1147)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(1146)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(1149)
			p.Match(CypherParserT__5)
		}
		p.SetState(1151)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(1150)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(1153)
			p.OC_FilterExpression()
		}
		p.SetState(1155)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(1154)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(1157)
			p.Match(CypherParserT__6)
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(1159)
			p.OC_RelationshipsPattern()
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(1160)
			p.OC_ParenthesizedExpression()
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(1161)
			p.OC_FunctionInvocation()
		}

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(1162)
			p.OC_Variable()
		}

	}

	return localctx
}

// IOC_LiteralContext is an interface to support dynamic dispatch.
type IOC_LiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_LiteralContext differentiates from other interfaces.
	IsOC_LiteralContext()
}

type OC_LiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_LiteralContext() *OC_LiteralContext {
	var p = new(OC_LiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_Literal
	return p
}

func (*OC_LiteralContext) IsOC_LiteralContext() {}

func NewOC_LiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_LiteralContext {
	var p = new(OC_LiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_Literal

	return p
}

func (s *OC_LiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_LiteralContext) OC_NumberLiteral() IOC_NumberLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_NumberLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_NumberLiteralContext)
}

func (s *OC_LiteralContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(CypherParserStringLiteral, 0)
}

func (s *OC_LiteralContext) OC_BooleanLiteral() IOC_BooleanLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_BooleanLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_BooleanLiteralContext)
}

func (s *OC_LiteralContext) NULL() antlr.TerminalNode {
	return s.GetToken(CypherParserNULL, 0)
}

func (s *OC_LiteralContext) OC_MapLiteral() IOC_MapLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_MapLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_MapLiteralContext)
}

func (s *OC_LiteralContext) OC_ListLiteral() IOC_ListLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_ListLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_ListLiteralContext)
}

func (s *OC_LiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_LiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_LiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_Literal(s)
	}
}

func (s *OC_LiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_Literal(s)
	}
}

func (p *CypherParser) OC_Literal() (localctx IOC_LiteralContext) {
	localctx = NewOC_LiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 130, CypherParserRULE_oC_Literal)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1171)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CypherParserHexInteger, CypherParserDecimalInteger, CypherParserOctalInteger, CypherParserExponentDecimalReal, CypherParserRegularDecimalReal:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1165)
			p.OC_NumberLiteral()
		}

	case CypherParserStringLiteral:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1166)
			p.Match(CypherParserStringLiteral)
		}

	case CypherParserTRUE, CypherParserFALSE:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1167)
			p.OC_BooleanLiteral()
		}

	case CypherParserNULL:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1168)
			p.Match(CypherParserNULL)
		}

	case CypherParserT__23:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1169)
			p.OC_MapLiteral()
		}

	case CypherParserT__7:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1170)
			p.OC_ListLiteral()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IOC_BooleanLiteralContext is an interface to support dynamic dispatch.
type IOC_BooleanLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_BooleanLiteralContext differentiates from other interfaces.
	IsOC_BooleanLiteralContext()
}

type OC_BooleanLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_BooleanLiteralContext() *OC_BooleanLiteralContext {
	var p = new(OC_BooleanLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_BooleanLiteral
	return p
}

func (*OC_BooleanLiteralContext) IsOC_BooleanLiteralContext() {}

func NewOC_BooleanLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_BooleanLiteralContext {
	var p = new(OC_BooleanLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_BooleanLiteral

	return p
}

func (s *OC_BooleanLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_BooleanLiteralContext) TRUE() antlr.TerminalNode {
	return s.GetToken(CypherParserTRUE, 0)
}

func (s *OC_BooleanLiteralContext) FALSE() antlr.TerminalNode {
	return s.GetToken(CypherParserFALSE, 0)
}

func (s *OC_BooleanLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_BooleanLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_BooleanLiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_BooleanLiteral(s)
	}
}

func (s *OC_BooleanLiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_BooleanLiteral(s)
	}
}

func (p *CypherParser) OC_BooleanLiteral() (localctx IOC_BooleanLiteralContext) {
	localctx = NewOC_BooleanLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 132, CypherParserRULE_oC_BooleanLiteral)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1173)
		_la = p.GetTokenStream().LA(1)

		if !(_la == CypherParserTRUE || _la == CypherParserFALSE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IOC_ListLiteralContext is an interface to support dynamic dispatch.
type IOC_ListLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_ListLiteralContext differentiates from other interfaces.
	IsOC_ListLiteralContext()
}

type OC_ListLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_ListLiteralContext() *OC_ListLiteralContext {
	var p = new(OC_ListLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_ListLiteral
	return p
}

func (*OC_ListLiteralContext) IsOC_ListLiteralContext() {}

func NewOC_ListLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_ListLiteralContext {
	var p = new(OC_ListLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_ListLiteral

	return p
}

func (s *OC_ListLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_ListLiteralContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_ListLiteralContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_ListLiteralContext) AllOC_Expression() []IOC_ExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOC_ExpressionContext)(nil)).Elem())
	var tst = make([]IOC_ExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOC_ExpressionContext)
		}
	}

	return tst
}

func (s *OC_ListLiteralContext) OC_Expression(i int) IOC_ExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_ExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOC_ExpressionContext)
}

func (s *OC_ListLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_ListLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_ListLiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_ListLiteral(s)
	}
}

func (s *OC_ListLiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_ListLiteral(s)
	}
}

func (p *CypherParser) OC_ListLiteral() (localctx IOC_ListLiteralContext) {
	localctx = NewOC_ListLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 134, CypherParserRULE_oC_ListLiteral)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1175)
		p.Match(CypherParserT__7)
	}
	p.SetState(1177)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserSP {
		{
			p.SetState(1176)
			p.Match(CypherParserSP)
		}

	}
	p.SetState(1196)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<CypherParserT__5)|(1<<CypherParserT__7)|(1<<CypherParserT__12)|(1<<CypherParserT__13)|(1<<CypherParserT__23)|(1<<CypherParserT__25))) != 0) || _la == CypherParserALL || _la == CypherParserNOT || (((_la-82)&-(0x1f+1)) == 0 && ((1<<uint((_la-82)))&((1<<(CypherParserNULL-82))|(1<<(CypherParserCOUNT-82))|(1<<(CypherParserANY-82))|(1<<(CypherParserNONE-82))|(1<<(CypherParserSINGLE-82))|(1<<(CypherParserTRUE-82))|(1<<(CypherParserFALSE-82))|(1<<(CypherParserEXISTS-82))|(1<<(CypherParserCASE-82))|(1<<(CypherParserStringLiteral-82))|(1<<(CypherParserHexInteger-82))|(1<<(CypherParserDecimalInteger-82))|(1<<(CypherParserOctalInteger-82))|(1<<(CypherParserHexLetter-82))|(1<<(CypherParserExponentDecimalReal-82))|(1<<(CypherParserRegularDecimalReal-82)))) != 0) || (((_la-119)&-(0x1f+1)) == 0 && ((1<<uint((_la-119)))&((1<<(CypherParserFILTER-119))|(1<<(CypherParserEXTRACT-119))|(1<<(CypherParserUnescapedSymbolicName-119))|(1<<(CypherParserEscapedSymbolicName-119)))) != 0) {
		{
			p.SetState(1179)
			p.OC_Expression()
		}
		p.SetState(1181)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(1180)
				p.Match(CypherParserSP)
			}

		}
		p.SetState(1193)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == CypherParserT__1 {
			{
				p.SetState(1183)
				p.Match(CypherParserT__1)
			}
			p.SetState(1185)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == CypherParserSP {
				{
					p.SetState(1184)
					p.Match(CypherParserSP)
				}

			}
			{
				p.SetState(1187)
				p.OC_Expression()
			}
			p.SetState(1189)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == CypherParserSP {
				{
					p.SetState(1188)
					p.Match(CypherParserSP)
				}

			}

			p.SetState(1195)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(1198)
		p.Match(CypherParserT__8)
	}

	return localctx
}

// IOC_PartialComparisonExpressionContext is an interface to support dynamic dispatch.
type IOC_PartialComparisonExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_PartialComparisonExpressionContext differentiates from other interfaces.
	IsOC_PartialComparisonExpressionContext()
}

type OC_PartialComparisonExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_PartialComparisonExpressionContext() *OC_PartialComparisonExpressionContext {
	var p = new(OC_PartialComparisonExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_PartialComparisonExpression
	return p
}

func (*OC_PartialComparisonExpressionContext) IsOC_PartialComparisonExpressionContext() {}

func NewOC_PartialComparisonExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_PartialComparisonExpressionContext {
	var p = new(OC_PartialComparisonExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_PartialComparisonExpression

	return p
}

func (s *OC_PartialComparisonExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_PartialComparisonExpressionContext) OC_AddOrSubtractExpression() IOC_AddOrSubtractExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_AddOrSubtractExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_AddOrSubtractExpressionContext)
}

func (s *OC_PartialComparisonExpressionContext) SP() antlr.TerminalNode {
	return s.GetToken(CypherParserSP, 0)
}

func (s *OC_PartialComparisonExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_PartialComparisonExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_PartialComparisonExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_PartialComparisonExpression(s)
	}
}

func (s *OC_PartialComparisonExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_PartialComparisonExpression(s)
	}
}

func (p *CypherParser) OC_PartialComparisonExpression() (localctx IOC_PartialComparisonExpressionContext) {
	localctx = NewOC_PartialComparisonExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 136, CypherParserRULE_oC_PartialComparisonExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1230)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CypherParserT__2:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1200)
			p.Match(CypherParserT__2)
		}
		p.SetState(1202)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(1201)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(1204)
			p.OC_AddOrSubtractExpression()
		}

	case CypherParserT__17:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1205)
			p.Match(CypherParserT__17)
		}
		p.SetState(1207)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(1206)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(1209)
			p.OC_AddOrSubtractExpression()
		}

	case CypherParserT__18:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1210)
			p.Match(CypherParserT__18)
		}
		p.SetState(1212)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(1211)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(1214)
			p.OC_AddOrSubtractExpression()
		}

	case CypherParserT__19:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1215)
			p.Match(CypherParserT__19)
		}
		p.SetState(1217)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(1216)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(1219)
			p.OC_AddOrSubtractExpression()
		}

	case CypherParserT__20:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1220)
			p.Match(CypherParserT__20)
		}
		p.SetState(1222)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(1221)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(1224)
			p.OC_AddOrSubtractExpression()
		}

	case CypherParserT__21:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1225)
			p.Match(CypherParserT__21)
		}
		p.SetState(1227)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(1226)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(1229)
			p.OC_AddOrSubtractExpression()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IOC_ParenthesizedExpressionContext is an interface to support dynamic dispatch.
type IOC_ParenthesizedExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_ParenthesizedExpressionContext differentiates from other interfaces.
	IsOC_ParenthesizedExpressionContext()
}

type OC_ParenthesizedExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_ParenthesizedExpressionContext() *OC_ParenthesizedExpressionContext {
	var p = new(OC_ParenthesizedExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_ParenthesizedExpression
	return p
}

func (*OC_ParenthesizedExpressionContext) IsOC_ParenthesizedExpressionContext() {}

func NewOC_ParenthesizedExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_ParenthesizedExpressionContext {
	var p = new(OC_ParenthesizedExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_ParenthesizedExpression

	return p
}

func (s *OC_ParenthesizedExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_ParenthesizedExpressionContext) OC_Expression() IOC_ExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_ExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_ExpressionContext)
}

func (s *OC_ParenthesizedExpressionContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_ParenthesizedExpressionContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_ParenthesizedExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_ParenthesizedExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_ParenthesizedExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_ParenthesizedExpression(s)
	}
}

func (s *OC_ParenthesizedExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_ParenthesizedExpression(s)
	}
}

func (p *CypherParser) OC_ParenthesizedExpression() (localctx IOC_ParenthesizedExpressionContext) {
	localctx = NewOC_ParenthesizedExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 138, CypherParserRULE_oC_ParenthesizedExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1232)
		p.Match(CypherParserT__5)
	}
	p.SetState(1234)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserSP {
		{
			p.SetState(1233)
			p.Match(CypherParserSP)
		}

	}
	{
		p.SetState(1236)
		p.OC_Expression()
	}
	p.SetState(1238)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserSP {
		{
			p.SetState(1237)
			p.Match(CypherParserSP)
		}

	}
	{
		p.SetState(1240)
		p.Match(CypherParserT__6)
	}

	return localctx
}

// IOC_RelationshipsPatternContext is an interface to support dynamic dispatch.
type IOC_RelationshipsPatternContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_RelationshipsPatternContext differentiates from other interfaces.
	IsOC_RelationshipsPatternContext()
}

type OC_RelationshipsPatternContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_RelationshipsPatternContext() *OC_RelationshipsPatternContext {
	var p = new(OC_RelationshipsPatternContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_RelationshipsPattern
	return p
}

func (*OC_RelationshipsPatternContext) IsOC_RelationshipsPatternContext() {}

func NewOC_RelationshipsPatternContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_RelationshipsPatternContext {
	var p = new(OC_RelationshipsPatternContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_RelationshipsPattern

	return p
}

func (s *OC_RelationshipsPatternContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_RelationshipsPatternContext) OC_NodePattern() IOC_NodePatternContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_NodePatternContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_NodePatternContext)
}

func (s *OC_RelationshipsPatternContext) AllOC_PatternElementChain() []IOC_PatternElementChainContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOC_PatternElementChainContext)(nil)).Elem())
	var tst = make([]IOC_PatternElementChainContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOC_PatternElementChainContext)
		}
	}

	return tst
}

func (s *OC_RelationshipsPatternContext) OC_PatternElementChain(i int) IOC_PatternElementChainContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_PatternElementChainContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOC_PatternElementChainContext)
}

func (s *OC_RelationshipsPatternContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_RelationshipsPatternContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_RelationshipsPatternContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_RelationshipsPatternContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_RelationshipsPatternContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_RelationshipsPattern(s)
	}
}

func (s *OC_RelationshipsPatternContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_RelationshipsPattern(s)
	}
}

func (p *CypherParser) OC_RelationshipsPattern() (localctx IOC_RelationshipsPatternContext) {
	localctx = NewOC_RelationshipsPatternContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 140, CypherParserRULE_oC_RelationshipsPattern)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1242)
		p.OC_NodePattern()
	}
	p.SetState(1247)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			p.SetState(1244)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == CypherParserSP {
				{
					p.SetState(1243)
					p.Match(CypherParserSP)
				}

			}
			{
				p.SetState(1246)
				p.OC_PatternElementChain()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(1249)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 220, p.GetParserRuleContext())
	}

	return localctx
}

// IOC_FilterExpressionContext is an interface to support dynamic dispatch.
type IOC_FilterExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_FilterExpressionContext differentiates from other interfaces.
	IsOC_FilterExpressionContext()
}

type OC_FilterExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_FilterExpressionContext() *OC_FilterExpressionContext {
	var p = new(OC_FilterExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_FilterExpression
	return p
}

func (*OC_FilterExpressionContext) IsOC_FilterExpressionContext() {}

func NewOC_FilterExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_FilterExpressionContext {
	var p = new(OC_FilterExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_FilterExpression

	return p
}

func (s *OC_FilterExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_FilterExpressionContext) OC_IdInColl() IOC_IdInCollContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_IdInCollContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_IdInCollContext)
}

func (s *OC_FilterExpressionContext) OC_Where() IOC_WhereContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_WhereContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_WhereContext)
}

func (s *OC_FilterExpressionContext) SP() antlr.TerminalNode {
	return s.GetToken(CypherParserSP, 0)
}

func (s *OC_FilterExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_FilterExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_FilterExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_FilterExpression(s)
	}
}

func (s *OC_FilterExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_FilterExpression(s)
	}
}

func (p *CypherParser) OC_FilterExpression() (localctx IOC_FilterExpressionContext) {
	localctx = NewOC_FilterExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 142, CypherParserRULE_oC_FilterExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1251)
		p.OC_IdInColl()
	}
	p.SetState(1256)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 222, p.GetParserRuleContext()) == 1 {
		p.SetState(1253)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(1252)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(1255)
			p.OC_Where()
		}

	}

	return localctx
}

// IOC_IdInCollContext is an interface to support dynamic dispatch.
type IOC_IdInCollContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_IdInCollContext differentiates from other interfaces.
	IsOC_IdInCollContext()
}

type OC_IdInCollContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_IdInCollContext() *OC_IdInCollContext {
	var p = new(OC_IdInCollContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_IdInColl
	return p
}

func (*OC_IdInCollContext) IsOC_IdInCollContext() {}

func NewOC_IdInCollContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_IdInCollContext {
	var p = new(OC_IdInCollContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_IdInColl

	return p
}

func (s *OC_IdInCollContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_IdInCollContext) OC_Variable() IOC_VariableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_VariableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_VariableContext)
}

func (s *OC_IdInCollContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_IdInCollContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_IdInCollContext) IN() antlr.TerminalNode {
	return s.GetToken(CypherParserIN, 0)
}

func (s *OC_IdInCollContext) OC_Expression() IOC_ExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_ExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_ExpressionContext)
}

func (s *OC_IdInCollContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_IdInCollContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_IdInCollContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_IdInColl(s)
	}
}

func (s *OC_IdInCollContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_IdInColl(s)
	}
}

func (p *CypherParser) OC_IdInColl() (localctx IOC_IdInCollContext) {
	localctx = NewOC_IdInCollContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 144, CypherParserRULE_oC_IdInColl)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1258)
		p.OC_Variable()
	}
	{
		p.SetState(1259)
		p.Match(CypherParserSP)
	}
	{
		p.SetState(1260)
		p.Match(CypherParserIN)
	}
	{
		p.SetState(1261)
		p.Match(CypherParserSP)
	}
	{
		p.SetState(1262)
		p.OC_Expression()
	}

	return localctx
}

// IOC_FunctionInvocationContext is an interface to support dynamic dispatch.
type IOC_FunctionInvocationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_FunctionInvocationContext differentiates from other interfaces.
	IsOC_FunctionInvocationContext()
}

type OC_FunctionInvocationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_FunctionInvocationContext() *OC_FunctionInvocationContext {
	var p = new(OC_FunctionInvocationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_FunctionInvocation
	return p
}

func (*OC_FunctionInvocationContext) IsOC_FunctionInvocationContext() {}

func NewOC_FunctionInvocationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_FunctionInvocationContext {
	var p = new(OC_FunctionInvocationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_FunctionInvocation

	return p
}

func (s *OC_FunctionInvocationContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_FunctionInvocationContext) OC_FunctionName() IOC_FunctionNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_FunctionNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_FunctionNameContext)
}

func (s *OC_FunctionInvocationContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_FunctionInvocationContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_FunctionInvocationContext) DISTINCT() antlr.TerminalNode {
	return s.GetToken(CypherParserDISTINCT, 0)
}

func (s *OC_FunctionInvocationContext) AllOC_Expression() []IOC_ExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOC_ExpressionContext)(nil)).Elem())
	var tst = make([]IOC_ExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOC_ExpressionContext)
		}
	}

	return tst
}

func (s *OC_FunctionInvocationContext) OC_Expression(i int) IOC_ExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_ExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOC_ExpressionContext)
}

func (s *OC_FunctionInvocationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_FunctionInvocationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_FunctionInvocationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_FunctionInvocation(s)
	}
}

func (s *OC_FunctionInvocationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_FunctionInvocation(s)
	}
}

func (p *CypherParser) OC_FunctionInvocation() (localctx IOC_FunctionInvocationContext) {
	localctx = NewOC_FunctionInvocationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 146, CypherParserRULE_oC_FunctionInvocation)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1264)
		p.OC_FunctionName()
	}
	p.SetState(1266)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserSP {
		{
			p.SetState(1265)
			p.Match(CypherParserSP)
		}

	}
	{
		p.SetState(1268)
		p.Match(CypherParserT__5)
	}
	p.SetState(1270)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserSP {
		{
			p.SetState(1269)
			p.Match(CypherParserSP)
		}

	}
	p.SetState(1276)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserDISTINCT {
		{
			p.SetState(1272)
			p.Match(CypherParserDISTINCT)
		}
		p.SetState(1274)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(1273)
				p.Match(CypherParserSP)
			}

		}

	}
	p.SetState(1295)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<CypherParserT__5)|(1<<CypherParserT__7)|(1<<CypherParserT__12)|(1<<CypherParserT__13)|(1<<CypherParserT__23)|(1<<CypherParserT__25))) != 0) || _la == CypherParserALL || _la == CypherParserNOT || (((_la-82)&-(0x1f+1)) == 0 && ((1<<uint((_la-82)))&((1<<(CypherParserNULL-82))|(1<<(CypherParserCOUNT-82))|(1<<(CypherParserANY-82))|(1<<(CypherParserNONE-82))|(1<<(CypherParserSINGLE-82))|(1<<(CypherParserTRUE-82))|(1<<(CypherParserFALSE-82))|(1<<(CypherParserEXISTS-82))|(1<<(CypherParserCASE-82))|(1<<(CypherParserStringLiteral-82))|(1<<(CypherParserHexInteger-82))|(1<<(CypherParserDecimalInteger-82))|(1<<(CypherParserOctalInteger-82))|(1<<(CypherParserHexLetter-82))|(1<<(CypherParserExponentDecimalReal-82))|(1<<(CypherParserRegularDecimalReal-82)))) != 0) || (((_la-119)&-(0x1f+1)) == 0 && ((1<<uint((_la-119)))&((1<<(CypherParserFILTER-119))|(1<<(CypherParserEXTRACT-119))|(1<<(CypherParserUnescapedSymbolicName-119))|(1<<(CypherParserEscapedSymbolicName-119)))) != 0) {
		{
			p.SetState(1278)
			p.OC_Expression()
		}
		p.SetState(1280)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(1279)
				p.Match(CypherParserSP)
			}

		}
		p.SetState(1292)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == CypherParserT__1 {
			{
				p.SetState(1282)
				p.Match(CypherParserT__1)
			}
			p.SetState(1284)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == CypherParserSP {
				{
					p.SetState(1283)
					p.Match(CypherParserSP)
				}

			}
			{
				p.SetState(1286)
				p.OC_Expression()
			}
			p.SetState(1288)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == CypherParserSP {
				{
					p.SetState(1287)
					p.Match(CypherParserSP)
				}

			}

			p.SetState(1294)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(1297)
		p.Match(CypherParserT__6)
	}

	return localctx
}

// IOC_FunctionNameContext is an interface to support dynamic dispatch.
type IOC_FunctionNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_FunctionNameContext differentiates from other interfaces.
	IsOC_FunctionNameContext()
}

type OC_FunctionNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_FunctionNameContext() *OC_FunctionNameContext {
	var p = new(OC_FunctionNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_FunctionName
	return p
}

func (*OC_FunctionNameContext) IsOC_FunctionNameContext() {}

func NewOC_FunctionNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_FunctionNameContext {
	var p = new(OC_FunctionNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_FunctionName

	return p
}

func (s *OC_FunctionNameContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_FunctionNameContext) OC_Namespace() IOC_NamespaceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_NamespaceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_NamespaceContext)
}

func (s *OC_FunctionNameContext) OC_SymbolicName() IOC_SymbolicNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_SymbolicNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_SymbolicNameContext)
}

func (s *OC_FunctionNameContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(CypherParserEXISTS, 0)
}

func (s *OC_FunctionNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_FunctionNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_FunctionNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_FunctionName(s)
	}
}

func (s *OC_FunctionNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_FunctionName(s)
	}
}

func (p *CypherParser) OC_FunctionName() (localctx IOC_FunctionNameContext) {
	localctx = NewOC_FunctionNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 148, CypherParserRULE_oC_FunctionName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1303)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CypherParserCOUNT, CypherParserANY, CypherParserNONE, CypherParserSINGLE, CypherParserHexLetter, CypherParserFILTER, CypherParserEXTRACT, CypherParserUnescapedSymbolicName, CypherParserEscapedSymbolicName:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1299)
			p.OC_Namespace()
		}
		{
			p.SetState(1300)
			p.OC_SymbolicName()
		}

	case CypherParserEXISTS:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1302)
			p.Match(CypherParserEXISTS)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IOC_ExplicitProcedureInvocationContext is an interface to support dynamic dispatch.
type IOC_ExplicitProcedureInvocationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_ExplicitProcedureInvocationContext differentiates from other interfaces.
	IsOC_ExplicitProcedureInvocationContext()
}

type OC_ExplicitProcedureInvocationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_ExplicitProcedureInvocationContext() *OC_ExplicitProcedureInvocationContext {
	var p = new(OC_ExplicitProcedureInvocationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_ExplicitProcedureInvocation
	return p
}

func (*OC_ExplicitProcedureInvocationContext) IsOC_ExplicitProcedureInvocationContext() {}

func NewOC_ExplicitProcedureInvocationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_ExplicitProcedureInvocationContext {
	var p = new(OC_ExplicitProcedureInvocationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_ExplicitProcedureInvocation

	return p
}

func (s *OC_ExplicitProcedureInvocationContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_ExplicitProcedureInvocationContext) OC_ProcedureName() IOC_ProcedureNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_ProcedureNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_ProcedureNameContext)
}

func (s *OC_ExplicitProcedureInvocationContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_ExplicitProcedureInvocationContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_ExplicitProcedureInvocationContext) AllOC_Expression() []IOC_ExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOC_ExpressionContext)(nil)).Elem())
	var tst = make([]IOC_ExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOC_ExpressionContext)
		}
	}

	return tst
}

func (s *OC_ExplicitProcedureInvocationContext) OC_Expression(i int) IOC_ExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_ExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOC_ExpressionContext)
}

func (s *OC_ExplicitProcedureInvocationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_ExplicitProcedureInvocationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_ExplicitProcedureInvocationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_ExplicitProcedureInvocation(s)
	}
}

func (s *OC_ExplicitProcedureInvocationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_ExplicitProcedureInvocation(s)
	}
}

func (p *CypherParser) OC_ExplicitProcedureInvocation() (localctx IOC_ExplicitProcedureInvocationContext) {
	localctx = NewOC_ExplicitProcedureInvocationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 150, CypherParserRULE_oC_ExplicitProcedureInvocation)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1305)
		p.OC_ProcedureName()
	}
	p.SetState(1307)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserSP {
		{
			p.SetState(1306)
			p.Match(CypherParserSP)
		}

	}
	{
		p.SetState(1309)
		p.Match(CypherParserT__5)
	}
	p.SetState(1311)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserSP {
		{
			p.SetState(1310)
			p.Match(CypherParserSP)
		}

	}
	p.SetState(1330)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<CypherParserT__5)|(1<<CypherParserT__7)|(1<<CypherParserT__12)|(1<<CypherParserT__13)|(1<<CypherParserT__23)|(1<<CypherParserT__25))) != 0) || _la == CypherParserALL || _la == CypherParserNOT || (((_la-82)&-(0x1f+1)) == 0 && ((1<<uint((_la-82)))&((1<<(CypherParserNULL-82))|(1<<(CypherParserCOUNT-82))|(1<<(CypherParserANY-82))|(1<<(CypherParserNONE-82))|(1<<(CypherParserSINGLE-82))|(1<<(CypherParserTRUE-82))|(1<<(CypherParserFALSE-82))|(1<<(CypherParserEXISTS-82))|(1<<(CypherParserCASE-82))|(1<<(CypherParserStringLiteral-82))|(1<<(CypherParserHexInteger-82))|(1<<(CypherParserDecimalInteger-82))|(1<<(CypherParserOctalInteger-82))|(1<<(CypherParserHexLetter-82))|(1<<(CypherParserExponentDecimalReal-82))|(1<<(CypherParserRegularDecimalReal-82)))) != 0) || (((_la-119)&-(0x1f+1)) == 0 && ((1<<uint((_la-119)))&((1<<(CypherParserFILTER-119))|(1<<(CypherParserEXTRACT-119))|(1<<(CypherParserUnescapedSymbolicName-119))|(1<<(CypherParserEscapedSymbolicName-119)))) != 0) {
		{
			p.SetState(1313)
			p.OC_Expression()
		}
		p.SetState(1315)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(1314)
				p.Match(CypherParserSP)
			}

		}
		p.SetState(1327)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == CypherParserT__1 {
			{
				p.SetState(1317)
				p.Match(CypherParserT__1)
			}
			p.SetState(1319)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == CypherParserSP {
				{
					p.SetState(1318)
					p.Match(CypherParserSP)
				}

			}
			{
				p.SetState(1321)
				p.OC_Expression()
			}
			p.SetState(1323)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == CypherParserSP {
				{
					p.SetState(1322)
					p.Match(CypherParserSP)
				}

			}

			p.SetState(1329)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(1332)
		p.Match(CypherParserT__6)
	}

	return localctx
}

// IOC_ImplicitProcedureInvocationContext is an interface to support dynamic dispatch.
type IOC_ImplicitProcedureInvocationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_ImplicitProcedureInvocationContext differentiates from other interfaces.
	IsOC_ImplicitProcedureInvocationContext()
}

type OC_ImplicitProcedureInvocationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_ImplicitProcedureInvocationContext() *OC_ImplicitProcedureInvocationContext {
	var p = new(OC_ImplicitProcedureInvocationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_ImplicitProcedureInvocation
	return p
}

func (*OC_ImplicitProcedureInvocationContext) IsOC_ImplicitProcedureInvocationContext() {}

func NewOC_ImplicitProcedureInvocationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_ImplicitProcedureInvocationContext {
	var p = new(OC_ImplicitProcedureInvocationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_ImplicitProcedureInvocation

	return p
}

func (s *OC_ImplicitProcedureInvocationContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_ImplicitProcedureInvocationContext) OC_ProcedureName() IOC_ProcedureNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_ProcedureNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_ProcedureNameContext)
}

func (s *OC_ImplicitProcedureInvocationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_ImplicitProcedureInvocationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_ImplicitProcedureInvocationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_ImplicitProcedureInvocation(s)
	}
}

func (s *OC_ImplicitProcedureInvocationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_ImplicitProcedureInvocation(s)
	}
}

func (p *CypherParser) OC_ImplicitProcedureInvocation() (localctx IOC_ImplicitProcedureInvocationContext) {
	localctx = NewOC_ImplicitProcedureInvocationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 152, CypherParserRULE_oC_ImplicitProcedureInvocation)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1334)
		p.OC_ProcedureName()
	}

	return localctx
}

// IOC_ProcedureResultFieldContext is an interface to support dynamic dispatch.
type IOC_ProcedureResultFieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_ProcedureResultFieldContext differentiates from other interfaces.
	IsOC_ProcedureResultFieldContext()
}

type OC_ProcedureResultFieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_ProcedureResultFieldContext() *OC_ProcedureResultFieldContext {
	var p = new(OC_ProcedureResultFieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_ProcedureResultField
	return p
}

func (*OC_ProcedureResultFieldContext) IsOC_ProcedureResultFieldContext() {}

func NewOC_ProcedureResultFieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_ProcedureResultFieldContext {
	var p = new(OC_ProcedureResultFieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_ProcedureResultField

	return p
}

func (s *OC_ProcedureResultFieldContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_ProcedureResultFieldContext) OC_SymbolicName() IOC_SymbolicNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_SymbolicNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_SymbolicNameContext)
}

func (s *OC_ProcedureResultFieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_ProcedureResultFieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_ProcedureResultFieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_ProcedureResultField(s)
	}
}

func (s *OC_ProcedureResultFieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_ProcedureResultField(s)
	}
}

func (p *CypherParser) OC_ProcedureResultField() (localctx IOC_ProcedureResultFieldContext) {
	localctx = NewOC_ProcedureResultFieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 154, CypherParserRULE_oC_ProcedureResultField)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1336)
		p.OC_SymbolicName()
	}

	return localctx
}

// IOC_ProcedureNameContext is an interface to support dynamic dispatch.
type IOC_ProcedureNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_ProcedureNameContext differentiates from other interfaces.
	IsOC_ProcedureNameContext()
}

type OC_ProcedureNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_ProcedureNameContext() *OC_ProcedureNameContext {
	var p = new(OC_ProcedureNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_ProcedureName
	return p
}

func (*OC_ProcedureNameContext) IsOC_ProcedureNameContext() {}

func NewOC_ProcedureNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_ProcedureNameContext {
	var p = new(OC_ProcedureNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_ProcedureName

	return p
}

func (s *OC_ProcedureNameContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_ProcedureNameContext) OC_Namespace() IOC_NamespaceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_NamespaceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_NamespaceContext)
}

func (s *OC_ProcedureNameContext) OC_SymbolicName() IOC_SymbolicNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_SymbolicNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_SymbolicNameContext)
}

func (s *OC_ProcedureNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_ProcedureNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_ProcedureNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_ProcedureName(s)
	}
}

func (s *OC_ProcedureNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_ProcedureName(s)
	}
}

func (p *CypherParser) OC_ProcedureName() (localctx IOC_ProcedureNameContext) {
	localctx = NewOC_ProcedureNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 156, CypherParserRULE_oC_ProcedureName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1338)
		p.OC_Namespace()
	}
	{
		p.SetState(1339)
		p.OC_SymbolicName()
	}

	return localctx
}

// IOC_NamespaceContext is an interface to support dynamic dispatch.
type IOC_NamespaceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_NamespaceContext differentiates from other interfaces.
	IsOC_NamespaceContext()
}

type OC_NamespaceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_NamespaceContext() *OC_NamespaceContext {
	var p = new(OC_NamespaceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_Namespace
	return p
}

func (*OC_NamespaceContext) IsOC_NamespaceContext() {}

func NewOC_NamespaceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_NamespaceContext {
	var p = new(OC_NamespaceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_Namespace

	return p
}

func (s *OC_NamespaceContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_NamespaceContext) AllOC_SymbolicName() []IOC_SymbolicNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOC_SymbolicNameContext)(nil)).Elem())
	var tst = make([]IOC_SymbolicNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOC_SymbolicNameContext)
		}
	}

	return tst
}

func (s *OC_NamespaceContext) OC_SymbolicName(i int) IOC_SymbolicNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_SymbolicNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOC_SymbolicNameContext)
}

func (s *OC_NamespaceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_NamespaceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_NamespaceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_Namespace(s)
	}
}

func (s *OC_NamespaceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_Namespace(s)
	}
}

func (p *CypherParser) OC_Namespace() (localctx IOC_NamespaceContext) {
	localctx = NewOC_NamespaceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 158, CypherParserRULE_oC_Namespace)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1346)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 240, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1341)
				p.OC_SymbolicName()
			}
			{
				p.SetState(1342)
				p.Match(CypherParserT__22)
			}

		}
		p.SetState(1348)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 240, p.GetParserRuleContext())
	}

	return localctx
}

// IOC_ListComprehensionContext is an interface to support dynamic dispatch.
type IOC_ListComprehensionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_ListComprehensionContext differentiates from other interfaces.
	IsOC_ListComprehensionContext()
}

type OC_ListComprehensionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_ListComprehensionContext() *OC_ListComprehensionContext {
	var p = new(OC_ListComprehensionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_ListComprehension
	return p
}

func (*OC_ListComprehensionContext) IsOC_ListComprehensionContext() {}

func NewOC_ListComprehensionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_ListComprehensionContext {
	var p = new(OC_ListComprehensionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_ListComprehension

	return p
}

func (s *OC_ListComprehensionContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_ListComprehensionContext) OC_FilterExpression() IOC_FilterExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_FilterExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_FilterExpressionContext)
}

func (s *OC_ListComprehensionContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_ListComprehensionContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_ListComprehensionContext) OC_Expression() IOC_ExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_ExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_ExpressionContext)
}

func (s *OC_ListComprehensionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_ListComprehensionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_ListComprehensionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_ListComprehension(s)
	}
}

func (s *OC_ListComprehensionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_ListComprehension(s)
	}
}

func (p *CypherParser) OC_ListComprehension() (localctx IOC_ListComprehensionContext) {
	localctx = NewOC_ListComprehensionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 160, CypherParserRULE_oC_ListComprehension)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1349)
		p.Match(CypherParserT__7)
	}
	p.SetState(1351)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserSP {
		{
			p.SetState(1350)
			p.Match(CypherParserSP)
		}

	}
	{
		p.SetState(1353)
		p.OC_FilterExpression()
	}
	p.SetState(1362)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 244, p.GetParserRuleContext()) == 1 {
		p.SetState(1355)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(1354)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(1357)
			p.Match(CypherParserT__10)
		}
		p.SetState(1359)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(1358)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(1361)
			p.OC_Expression()
		}

	}
	p.SetState(1365)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserSP {
		{
			p.SetState(1364)
			p.Match(CypherParserSP)
		}

	}
	{
		p.SetState(1367)
		p.Match(CypherParserT__8)
	}

	return localctx
}

// IOC_PatternComprehensionContext is an interface to support dynamic dispatch.
type IOC_PatternComprehensionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_PatternComprehensionContext differentiates from other interfaces.
	IsOC_PatternComprehensionContext()
}

type OC_PatternComprehensionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_PatternComprehensionContext() *OC_PatternComprehensionContext {
	var p = new(OC_PatternComprehensionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_PatternComprehension
	return p
}

func (*OC_PatternComprehensionContext) IsOC_PatternComprehensionContext() {}

func NewOC_PatternComprehensionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_PatternComprehensionContext {
	var p = new(OC_PatternComprehensionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_PatternComprehension

	return p
}

func (s *OC_PatternComprehensionContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_PatternComprehensionContext) OC_RelationshipsPattern() IOC_RelationshipsPatternContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_RelationshipsPatternContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_RelationshipsPatternContext)
}

func (s *OC_PatternComprehensionContext) AllOC_Expression() []IOC_ExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOC_ExpressionContext)(nil)).Elem())
	var tst = make([]IOC_ExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOC_ExpressionContext)
		}
	}

	return tst
}

func (s *OC_PatternComprehensionContext) OC_Expression(i int) IOC_ExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_ExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOC_ExpressionContext)
}

func (s *OC_PatternComprehensionContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_PatternComprehensionContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_PatternComprehensionContext) OC_Variable() IOC_VariableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_VariableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_VariableContext)
}

func (s *OC_PatternComprehensionContext) WHERE() antlr.TerminalNode {
	return s.GetToken(CypherParserWHERE, 0)
}

func (s *OC_PatternComprehensionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_PatternComprehensionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_PatternComprehensionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_PatternComprehension(s)
	}
}

func (s *OC_PatternComprehensionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_PatternComprehension(s)
	}
}

func (p *CypherParser) OC_PatternComprehension() (localctx IOC_PatternComprehensionContext) {
	localctx = NewOC_PatternComprehensionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 162, CypherParserRULE_oC_PatternComprehension)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1369)
		p.Match(CypherParserT__7)
	}
	p.SetState(1371)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserSP {
		{
			p.SetState(1370)
			p.Match(CypherParserSP)
		}

	}
	p.SetState(1381)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la-83)&-(0x1f+1)) == 0 && ((1<<uint((_la-83)))&((1<<(CypherParserCOUNT-83))|(1<<(CypherParserANY-83))|(1<<(CypherParserNONE-83))|(1<<(CypherParserSINGLE-83))|(1<<(CypherParserHexLetter-83)))) != 0) || (((_la-119)&-(0x1f+1)) == 0 && ((1<<uint((_la-119)))&((1<<(CypherParserFILTER-119))|(1<<(CypherParserEXTRACT-119))|(1<<(CypherParserUnescapedSymbolicName-119))|(1<<(CypherParserEscapedSymbolicName-119)))) != 0) {
		{
			p.SetState(1373)
			p.OC_Variable()
		}
		p.SetState(1375)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(1374)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(1377)
			p.Match(CypherParserT__2)
		}
		p.SetState(1379)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(1378)
				p.Match(CypherParserSP)
			}

		}

	}
	{
		p.SetState(1383)
		p.OC_RelationshipsPattern()
	}
	p.SetState(1385)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserSP {
		{
			p.SetState(1384)
			p.Match(CypherParserSP)
		}

	}
	p.SetState(1395)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserWHERE {
		{
			p.SetState(1387)
			p.Match(CypherParserWHERE)
		}
		p.SetState(1389)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(1388)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(1391)
			p.OC_Expression()
		}
		p.SetState(1393)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(1392)
				p.Match(CypherParserSP)
			}

		}

	}
	{
		p.SetState(1397)
		p.Match(CypherParserT__10)
	}
	p.SetState(1399)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserSP {
		{
			p.SetState(1398)
			p.Match(CypherParserSP)
		}

	}
	{
		p.SetState(1401)
		p.OC_Expression()
	}
	p.SetState(1403)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserSP {
		{
			p.SetState(1402)
			p.Match(CypherParserSP)
		}

	}
	{
		p.SetState(1405)
		p.Match(CypherParserT__8)
	}

	return localctx
}

// IOC_PropertyLookupContext is an interface to support dynamic dispatch.
type IOC_PropertyLookupContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_PropertyLookupContext differentiates from other interfaces.
	IsOC_PropertyLookupContext()
}

type OC_PropertyLookupContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_PropertyLookupContext() *OC_PropertyLookupContext {
	var p = new(OC_PropertyLookupContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_PropertyLookup
	return p
}

func (*OC_PropertyLookupContext) IsOC_PropertyLookupContext() {}

func NewOC_PropertyLookupContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_PropertyLookupContext {
	var p = new(OC_PropertyLookupContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_PropertyLookup

	return p
}

func (s *OC_PropertyLookupContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_PropertyLookupContext) OC_PropertyKeyName() IOC_PropertyKeyNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_PropertyKeyNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_PropertyKeyNameContext)
}

func (s *OC_PropertyLookupContext) SP() antlr.TerminalNode {
	return s.GetToken(CypherParserSP, 0)
}

func (s *OC_PropertyLookupContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_PropertyLookupContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_PropertyLookupContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_PropertyLookup(s)
	}
}

func (s *OC_PropertyLookupContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_PropertyLookup(s)
	}
}

func (p *CypherParser) OC_PropertyLookup() (localctx IOC_PropertyLookupContext) {
	localctx = NewOC_PropertyLookupContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 164, CypherParserRULE_oC_PropertyLookup)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1407)
		p.Match(CypherParserT__22)
	}
	p.SetState(1409)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserSP {
		{
			p.SetState(1408)
			p.Match(CypherParserSP)
		}

	}

	{
		p.SetState(1411)
		p.OC_PropertyKeyName()
	}

	return localctx
}

// IOC_CaseExpressionContext is an interface to support dynamic dispatch.
type IOC_CaseExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_CaseExpressionContext differentiates from other interfaces.
	IsOC_CaseExpressionContext()
}

type OC_CaseExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_CaseExpressionContext() *OC_CaseExpressionContext {
	var p = new(OC_CaseExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_CaseExpression
	return p
}

func (*OC_CaseExpressionContext) IsOC_CaseExpressionContext() {}

func NewOC_CaseExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_CaseExpressionContext {
	var p = new(OC_CaseExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_CaseExpression

	return p
}

func (s *OC_CaseExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_CaseExpressionContext) END() antlr.TerminalNode {
	return s.GetToken(CypherParserEND, 0)
}

func (s *OC_CaseExpressionContext) ELSE() antlr.TerminalNode {
	return s.GetToken(CypherParserELSE, 0)
}

func (s *OC_CaseExpressionContext) AllOC_Expression() []IOC_ExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOC_ExpressionContext)(nil)).Elem())
	var tst = make([]IOC_ExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOC_ExpressionContext)
		}
	}

	return tst
}

func (s *OC_CaseExpressionContext) OC_Expression(i int) IOC_ExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_ExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOC_ExpressionContext)
}

func (s *OC_CaseExpressionContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_CaseExpressionContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_CaseExpressionContext) CASE() antlr.TerminalNode {
	return s.GetToken(CypherParserCASE, 0)
}

func (s *OC_CaseExpressionContext) AllOC_CaseAlternatives() []IOC_CaseAlternativesContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOC_CaseAlternativesContext)(nil)).Elem())
	var tst = make([]IOC_CaseAlternativesContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOC_CaseAlternativesContext)
		}
	}

	return tst
}

func (s *OC_CaseExpressionContext) OC_CaseAlternatives(i int) IOC_CaseAlternativesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_CaseAlternativesContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOC_CaseAlternativesContext)
}

func (s *OC_CaseExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_CaseExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_CaseExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_CaseExpression(s)
	}
}

func (s *OC_CaseExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_CaseExpression(s)
	}
}

func (p *CypherParser) OC_CaseExpression() (localctx IOC_CaseExpressionContext) {
	localctx = NewOC_CaseExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 166, CypherParserRULE_oC_CaseExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1435)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 262, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1413)
			p.Match(CypherParserCASE)
		}
		p.SetState(1418)
		p.GetErrorHandler().Sync(p)
		_alt = 1
		for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			switch _alt {
			case 1:
				p.SetState(1415)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == CypherParserSP {
					{
						p.SetState(1414)
						p.Match(CypherParserSP)
					}

				}
				{
					p.SetState(1417)
					p.OC_CaseAlternatives()
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(1420)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 258, p.GetParserRuleContext())
		}

	case 2:
		{
			p.SetState(1422)
			p.Match(CypherParserCASE)
		}
		p.SetState(1424)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(1423)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(1426)
			p.OC_Expression()
		}
		p.SetState(1431)
		p.GetErrorHandler().Sync(p)
		_alt = 1
		for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			switch _alt {
			case 1:
				p.SetState(1428)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == CypherParserSP {
					{
						p.SetState(1427)
						p.Match(CypherParserSP)
					}

				}
				{
					p.SetState(1430)
					p.OC_CaseAlternatives()
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(1433)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 261, p.GetParserRuleContext())
		}

	}
	p.SetState(1445)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 265, p.GetParserRuleContext()) == 1 {
		p.SetState(1438)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(1437)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(1440)
			p.Match(CypherParserELSE)
		}
		p.SetState(1442)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(1441)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(1444)
			p.OC_Expression()
		}

	}
	p.SetState(1448)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserSP {
		{
			p.SetState(1447)
			p.Match(CypherParserSP)
		}

	}
	{
		p.SetState(1450)
		p.Match(CypherParserEND)
	}

	return localctx
}

// IOC_CaseAlternativesContext is an interface to support dynamic dispatch.
type IOC_CaseAlternativesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_CaseAlternativesContext differentiates from other interfaces.
	IsOC_CaseAlternativesContext()
}

type OC_CaseAlternativesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_CaseAlternativesContext() *OC_CaseAlternativesContext {
	var p = new(OC_CaseAlternativesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_CaseAlternatives
	return p
}

func (*OC_CaseAlternativesContext) IsOC_CaseAlternativesContext() {}

func NewOC_CaseAlternativesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_CaseAlternativesContext {
	var p = new(OC_CaseAlternativesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_CaseAlternatives

	return p
}

func (s *OC_CaseAlternativesContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_CaseAlternativesContext) WHEN() antlr.TerminalNode {
	return s.GetToken(CypherParserWHEN, 0)
}

func (s *OC_CaseAlternativesContext) AllOC_Expression() []IOC_ExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOC_ExpressionContext)(nil)).Elem())
	var tst = make([]IOC_ExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOC_ExpressionContext)
		}
	}

	return tst
}

func (s *OC_CaseAlternativesContext) OC_Expression(i int) IOC_ExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_ExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOC_ExpressionContext)
}

func (s *OC_CaseAlternativesContext) THEN() antlr.TerminalNode {
	return s.GetToken(CypherParserTHEN, 0)
}

func (s *OC_CaseAlternativesContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_CaseAlternativesContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_CaseAlternativesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_CaseAlternativesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_CaseAlternativesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_CaseAlternatives(s)
	}
}

func (s *OC_CaseAlternativesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_CaseAlternatives(s)
	}
}

func (p *CypherParser) OC_CaseAlternatives() (localctx IOC_CaseAlternativesContext) {
	localctx = NewOC_CaseAlternativesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 168, CypherParserRULE_oC_CaseAlternatives)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1452)
		p.Match(CypherParserWHEN)
	}
	p.SetState(1454)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserSP {
		{
			p.SetState(1453)
			p.Match(CypherParserSP)
		}

	}
	{
		p.SetState(1456)
		p.OC_Expression()
	}
	p.SetState(1458)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserSP {
		{
			p.SetState(1457)
			p.Match(CypherParserSP)
		}

	}
	{
		p.SetState(1460)
		p.Match(CypherParserTHEN)
	}
	p.SetState(1462)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserSP {
		{
			p.SetState(1461)
			p.Match(CypherParserSP)
		}

	}
	{
		p.SetState(1464)
		p.OC_Expression()
	}

	return localctx
}

// IOC_VariableContext is an interface to support dynamic dispatch.
type IOC_VariableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_VariableContext differentiates from other interfaces.
	IsOC_VariableContext()
}

type OC_VariableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_VariableContext() *OC_VariableContext {
	var p = new(OC_VariableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_Variable
	return p
}

func (*OC_VariableContext) IsOC_VariableContext() {}

func NewOC_VariableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_VariableContext {
	var p = new(OC_VariableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_Variable

	return p
}

func (s *OC_VariableContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_VariableContext) OC_SymbolicName() IOC_SymbolicNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_SymbolicNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_SymbolicNameContext)
}

func (s *OC_VariableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_VariableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_VariableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_Variable(s)
	}
}

func (s *OC_VariableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_Variable(s)
	}
}

func (p *CypherParser) OC_Variable() (localctx IOC_VariableContext) {
	localctx = NewOC_VariableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 170, CypherParserRULE_oC_Variable)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1466)
		p.OC_SymbolicName()
	}

	return localctx
}

// IOC_NumberLiteralContext is an interface to support dynamic dispatch.
type IOC_NumberLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_NumberLiteralContext differentiates from other interfaces.
	IsOC_NumberLiteralContext()
}

type OC_NumberLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_NumberLiteralContext() *OC_NumberLiteralContext {
	var p = new(OC_NumberLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_NumberLiteral
	return p
}

func (*OC_NumberLiteralContext) IsOC_NumberLiteralContext() {}

func NewOC_NumberLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_NumberLiteralContext {
	var p = new(OC_NumberLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_NumberLiteral

	return p
}

func (s *OC_NumberLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_NumberLiteralContext) OC_DoubleLiteral() IOC_DoubleLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_DoubleLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_DoubleLiteralContext)
}

func (s *OC_NumberLiteralContext) OC_IntegerLiteral() IOC_IntegerLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_IntegerLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_IntegerLiteralContext)
}

func (s *OC_NumberLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_NumberLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_NumberLiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_NumberLiteral(s)
	}
}

func (s *OC_NumberLiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_NumberLiteral(s)
	}
}

func (p *CypherParser) OC_NumberLiteral() (localctx IOC_NumberLiteralContext) {
	localctx = NewOC_NumberLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 172, CypherParserRULE_oC_NumberLiteral)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1470)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CypherParserExponentDecimalReal, CypherParserRegularDecimalReal:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1468)
			p.OC_DoubleLiteral()
		}

	case CypherParserHexInteger, CypherParserDecimalInteger, CypherParserOctalInteger:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1469)
			p.OC_IntegerLiteral()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IOC_MapLiteralContext is an interface to support dynamic dispatch.
type IOC_MapLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_MapLiteralContext differentiates from other interfaces.
	IsOC_MapLiteralContext()
}

type OC_MapLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_MapLiteralContext() *OC_MapLiteralContext {
	var p = new(OC_MapLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_MapLiteral
	return p
}

func (*OC_MapLiteralContext) IsOC_MapLiteralContext() {}

func NewOC_MapLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_MapLiteralContext {
	var p = new(OC_MapLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_MapLiteral

	return p
}

func (s *OC_MapLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_MapLiteralContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_MapLiteralContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_MapLiteralContext) AllOC_PropertyKeyName() []IOC_PropertyKeyNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOC_PropertyKeyNameContext)(nil)).Elem())
	var tst = make([]IOC_PropertyKeyNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOC_PropertyKeyNameContext)
		}
	}

	return tst
}

func (s *OC_MapLiteralContext) OC_PropertyKeyName(i int) IOC_PropertyKeyNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_PropertyKeyNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOC_PropertyKeyNameContext)
}

func (s *OC_MapLiteralContext) AllOC_Expression() []IOC_ExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOC_ExpressionContext)(nil)).Elem())
	var tst = make([]IOC_ExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOC_ExpressionContext)
		}
	}

	return tst
}

func (s *OC_MapLiteralContext) OC_Expression(i int) IOC_ExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_ExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOC_ExpressionContext)
}

func (s *OC_MapLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_MapLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_MapLiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_MapLiteral(s)
	}
}

func (s *OC_MapLiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_MapLiteral(s)
	}
}

func (p *CypherParser) OC_MapLiteral() (localctx IOC_MapLiteralContext) {
	localctx = NewOC_MapLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 174, CypherParserRULE_oC_MapLiteral)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1472)
		p.Match(CypherParserT__23)
	}
	p.SetState(1474)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserSP {
		{
			p.SetState(1473)
			p.Match(CypherParserSP)
		}

	}
	p.SetState(1509)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la-46)&-(0x1f+1)) == 0 && ((1<<uint((_la-46)))&((1<<(CypherParserUNION-46))|(1<<(CypherParserALL-46))|(1<<(CypherParserOPTIONAL-46))|(1<<(CypherParserMATCH-46))|(1<<(CypherParserUNWIND-46))|(1<<(CypherParserAS-46))|(1<<(CypherParserMERGE-46))|(1<<(CypherParserON-46))|(1<<(CypherParserCREATE-46))|(1<<(CypherParserSET-46))|(1<<(CypherParserDETACH-46))|(1<<(CypherParserDELETE-46))|(1<<(CypherParserREMOVE-46))|(1<<(CypherParserWITH-46))|(1<<(CypherParserDISTINCT-46))|(1<<(CypherParserRETURN-46))|(1<<(CypherParserORDER-46))|(1<<(CypherParserBY-46))|(1<<(CypherParserL_SKIP-46))|(1<<(CypherParserLIMIT-46))|(1<<(CypherParserASCENDING-46))|(1<<(CypherParserASC-46))|(1<<(CypherParserDESCENDING-46))|(1<<(CypherParserDESC-46))|(1<<(CypherParserWHERE-46))|(1<<(CypherParserOR-46))|(1<<(CypherParserXOR-46))|(1<<(CypherParserAND-46))|(1<<(CypherParserNOT-46))|(1<<(CypherParserIN-46)))) != 0) || (((_la-78)&-(0x1f+1)) == 0 && ((1<<uint((_la-78)))&((1<<(CypherParserSTARTS-78))|(1<<(CypherParserENDS-78))|(1<<(CypherParserCONTAINS-78))|(1<<(CypherParserIS-78))|(1<<(CypherParserNULL-78))|(1<<(CypherParserCOUNT-78))|(1<<(CypherParserANY-78))|(1<<(CypherParserNONE-78))|(1<<(CypherParserSINGLE-78))|(1<<(CypherParserTRUE-78))|(1<<(CypherParserFALSE-78))|(1<<(CypherParserEXISTS-78))|(1<<(CypherParserCASE-78))|(1<<(CypherParserELSE-78))|(1<<(CypherParserEND-78))|(1<<(CypherParserWHEN-78))|(1<<(CypherParserTHEN-78))|(1<<(CypherParserHexLetter-78))|(1<<(CypherParserCONSTRAINT-78)))) != 0) || (((_la-110)&-(0x1f+1)) == 0 && ((1<<uint((_la-110)))&((1<<(CypherParserDO-110))|(1<<(CypherParserFOR-110))|(1<<(CypherParserREQUIRE-110))|(1<<(CypherParserUNIQUE-110))|(1<<(CypherParserMANDATORY-110))|(1<<(CypherParserSCALAR-110))|(1<<(CypherParserOF-110))|(1<<(CypherParserADD-110))|(1<<(CypherParserDROP-110))|(1<<(CypherParserFILTER-110))|(1<<(CypherParserEXTRACT-110))|(1<<(CypherParserUnescapedSymbolicName-110))|(1<<(CypherParserEscapedSymbolicName-110)))) != 0) {
		{
			p.SetState(1476)
			p.OC_PropertyKeyName()
		}
		p.SetState(1478)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(1477)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(1480)
			p.Match(CypherParserT__9)
		}
		p.SetState(1482)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(1481)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(1484)
			p.OC_Expression()
		}
		p.SetState(1486)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(1485)
				p.Match(CypherParserSP)
			}

		}
		p.SetState(1506)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == CypherParserT__1 {
			{
				p.SetState(1488)
				p.Match(CypherParserT__1)
			}
			p.SetState(1490)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == CypherParserSP {
				{
					p.SetState(1489)
					p.Match(CypherParserSP)
				}

			}
			{
				p.SetState(1492)
				p.OC_PropertyKeyName()
			}
			p.SetState(1494)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == CypherParserSP {
				{
					p.SetState(1493)
					p.Match(CypherParserSP)
				}

			}
			{
				p.SetState(1496)
				p.Match(CypherParserT__9)
			}
			p.SetState(1498)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == CypherParserSP {
				{
					p.SetState(1497)
					p.Match(CypherParserSP)
				}

			}
			{
				p.SetState(1500)
				p.OC_Expression()
			}
			p.SetState(1502)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == CypherParserSP {
				{
					p.SetState(1501)
					p.Match(CypherParserSP)
				}

			}

			p.SetState(1508)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(1511)
		p.Match(CypherParserT__24)
	}

	return localctx
}

// IOC_ParameterContext is an interface to support dynamic dispatch.
type IOC_ParameterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_ParameterContext differentiates from other interfaces.
	IsOC_ParameterContext()
}

type OC_ParameterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_ParameterContext() *OC_ParameterContext {
	var p = new(OC_ParameterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_Parameter
	return p
}

func (*OC_ParameterContext) IsOC_ParameterContext() {}

func NewOC_ParameterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_ParameterContext {
	var p = new(OC_ParameterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_Parameter

	return p
}

func (s *OC_ParameterContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_ParameterContext) OC_SymbolicName() IOC_SymbolicNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_SymbolicNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_SymbolicNameContext)
}

func (s *OC_ParameterContext) DecimalInteger() antlr.TerminalNode {
	return s.GetToken(CypherParserDecimalInteger, 0)
}

func (s *OC_ParameterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_ParameterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_ParameterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_Parameter(s)
	}
}

func (s *OC_ParameterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_Parameter(s)
	}
}

func (p *CypherParser) OC_Parameter() (localctx IOC_ParameterContext) {
	localctx = NewOC_ParameterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 176, CypherParserRULE_oC_Parameter)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1513)
		p.Match(CypherParserT__25)
	}
	p.SetState(1516)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CypherParserCOUNT, CypherParserANY, CypherParserNONE, CypherParserSINGLE, CypherParserHexLetter, CypherParserFILTER, CypherParserEXTRACT, CypherParserUnescapedSymbolicName, CypherParserEscapedSymbolicName:
		{
			p.SetState(1514)
			p.OC_SymbolicName()
		}

	case CypherParserDecimalInteger:
		{
			p.SetState(1515)
			p.Match(CypherParserDecimalInteger)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IOC_PropertyExpressionContext is an interface to support dynamic dispatch.
type IOC_PropertyExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_PropertyExpressionContext differentiates from other interfaces.
	IsOC_PropertyExpressionContext()
}

type OC_PropertyExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_PropertyExpressionContext() *OC_PropertyExpressionContext {
	var p = new(OC_PropertyExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_PropertyExpression
	return p
}

func (*OC_PropertyExpressionContext) IsOC_PropertyExpressionContext() {}

func NewOC_PropertyExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_PropertyExpressionContext {
	var p = new(OC_PropertyExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_PropertyExpression

	return p
}

func (s *OC_PropertyExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_PropertyExpressionContext) OC_Atom() IOC_AtomContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_AtomContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_AtomContext)
}

func (s *OC_PropertyExpressionContext) AllOC_PropertyLookup() []IOC_PropertyLookupContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOC_PropertyLookupContext)(nil)).Elem())
	var tst = make([]IOC_PropertyLookupContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOC_PropertyLookupContext)
		}
	}

	return tst
}

func (s *OC_PropertyExpressionContext) OC_PropertyLookup(i int) IOC_PropertyLookupContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_PropertyLookupContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOC_PropertyLookupContext)
}

func (s *OC_PropertyExpressionContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_PropertyExpressionContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_PropertyExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_PropertyExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_PropertyExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_PropertyExpression(s)
	}
}

func (s *OC_PropertyExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_PropertyExpression(s)
	}
}

func (p *CypherParser) OC_PropertyExpression() (localctx IOC_PropertyExpressionContext) {
	localctx = NewOC_PropertyExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 178, CypherParserRULE_oC_PropertyExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1518)
		p.OC_Atom()
	}
	p.SetState(1523)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			p.SetState(1520)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == CypherParserSP {
				{
					p.SetState(1519)
					p.Match(CypherParserSP)
				}

			}
			{
				p.SetState(1522)
				p.OC_PropertyLookup()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(1525)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 283, p.GetParserRuleContext())
	}

	return localctx
}

// IOC_PropertyKeyNameContext is an interface to support dynamic dispatch.
type IOC_PropertyKeyNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_PropertyKeyNameContext differentiates from other interfaces.
	IsOC_PropertyKeyNameContext()
}

type OC_PropertyKeyNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_PropertyKeyNameContext() *OC_PropertyKeyNameContext {
	var p = new(OC_PropertyKeyNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_PropertyKeyName
	return p
}

func (*OC_PropertyKeyNameContext) IsOC_PropertyKeyNameContext() {}

func NewOC_PropertyKeyNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_PropertyKeyNameContext {
	var p = new(OC_PropertyKeyNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_PropertyKeyName

	return p
}

func (s *OC_PropertyKeyNameContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_PropertyKeyNameContext) OC_SchemaName() IOC_SchemaNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_SchemaNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_SchemaNameContext)
}

func (s *OC_PropertyKeyNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_PropertyKeyNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_PropertyKeyNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_PropertyKeyName(s)
	}
}

func (s *OC_PropertyKeyNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_PropertyKeyName(s)
	}
}

func (p *CypherParser) OC_PropertyKeyName() (localctx IOC_PropertyKeyNameContext) {
	localctx = NewOC_PropertyKeyNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 180, CypherParserRULE_oC_PropertyKeyName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1527)
		p.OC_SchemaName()
	}

	return localctx
}

// IOC_IntegerLiteralContext is an interface to support dynamic dispatch.
type IOC_IntegerLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_IntegerLiteralContext differentiates from other interfaces.
	IsOC_IntegerLiteralContext()
}

type OC_IntegerLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_IntegerLiteralContext() *OC_IntegerLiteralContext {
	var p = new(OC_IntegerLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_IntegerLiteral
	return p
}

func (*OC_IntegerLiteralContext) IsOC_IntegerLiteralContext() {}

func NewOC_IntegerLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_IntegerLiteralContext {
	var p = new(OC_IntegerLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_IntegerLiteral

	return p
}

func (s *OC_IntegerLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_IntegerLiteralContext) HexInteger() antlr.TerminalNode {
	return s.GetToken(CypherParserHexInteger, 0)
}

func (s *OC_IntegerLiteralContext) OctalInteger() antlr.TerminalNode {
	return s.GetToken(CypherParserOctalInteger, 0)
}

func (s *OC_IntegerLiteralContext) DecimalInteger() antlr.TerminalNode {
	return s.GetToken(CypherParserDecimalInteger, 0)
}

func (s *OC_IntegerLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_IntegerLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_IntegerLiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_IntegerLiteral(s)
	}
}

func (s *OC_IntegerLiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_IntegerLiteral(s)
	}
}

func (p *CypherParser) OC_IntegerLiteral() (localctx IOC_IntegerLiteralContext) {
	localctx = NewOC_IntegerLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 182, CypherParserRULE_oC_IntegerLiteral)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1529)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-97)&-(0x1f+1)) == 0 && ((1<<uint((_la-97)))&((1<<(CypherParserHexInteger-97))|(1<<(CypherParserDecimalInteger-97))|(1<<(CypherParserOctalInteger-97)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IOC_DoubleLiteralContext is an interface to support dynamic dispatch.
type IOC_DoubleLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_DoubleLiteralContext differentiates from other interfaces.
	IsOC_DoubleLiteralContext()
}

type OC_DoubleLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_DoubleLiteralContext() *OC_DoubleLiteralContext {
	var p = new(OC_DoubleLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_DoubleLiteral
	return p
}

func (*OC_DoubleLiteralContext) IsOC_DoubleLiteralContext() {}

func NewOC_DoubleLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_DoubleLiteralContext {
	var p = new(OC_DoubleLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_DoubleLiteral

	return p
}

func (s *OC_DoubleLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_DoubleLiteralContext) ExponentDecimalReal() antlr.TerminalNode {
	return s.GetToken(CypherParserExponentDecimalReal, 0)
}

func (s *OC_DoubleLiteralContext) RegularDecimalReal() antlr.TerminalNode {
	return s.GetToken(CypherParserRegularDecimalReal, 0)
}

func (s *OC_DoubleLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_DoubleLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_DoubleLiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_DoubleLiteral(s)
	}
}

func (s *OC_DoubleLiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_DoubleLiteral(s)
	}
}

func (p *CypherParser) OC_DoubleLiteral() (localctx IOC_DoubleLiteralContext) {
	localctx = NewOC_DoubleLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 184, CypherParserRULE_oC_DoubleLiteral)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1531)
		_la = p.GetTokenStream().LA(1)

		if !(_la == CypherParserExponentDecimalReal || _la == CypherParserRegularDecimalReal) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IOC_SchemaNameContext is an interface to support dynamic dispatch.
type IOC_SchemaNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_SchemaNameContext differentiates from other interfaces.
	IsOC_SchemaNameContext()
}

type OC_SchemaNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_SchemaNameContext() *OC_SchemaNameContext {
	var p = new(OC_SchemaNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_SchemaName
	return p
}

func (*OC_SchemaNameContext) IsOC_SchemaNameContext() {}

func NewOC_SchemaNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_SchemaNameContext {
	var p = new(OC_SchemaNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_SchemaName

	return p
}

func (s *OC_SchemaNameContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_SchemaNameContext) OC_SymbolicName() IOC_SymbolicNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_SymbolicNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_SymbolicNameContext)
}

func (s *OC_SchemaNameContext) OC_ReservedWord() IOC_ReservedWordContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_ReservedWordContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_ReservedWordContext)
}

func (s *OC_SchemaNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_SchemaNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_SchemaNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_SchemaName(s)
	}
}

func (s *OC_SchemaNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_SchemaName(s)
	}
}

func (p *CypherParser) OC_SchemaName() (localctx IOC_SchemaNameContext) {
	localctx = NewOC_SchemaNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 186, CypherParserRULE_oC_SchemaName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1535)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CypherParserCOUNT, CypherParserANY, CypherParserNONE, CypherParserSINGLE, CypherParserHexLetter, CypherParserFILTER, CypherParserEXTRACT, CypherParserUnescapedSymbolicName, CypherParserEscapedSymbolicName:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1533)
			p.OC_SymbolicName()
		}

	case CypherParserUNION, CypherParserALL, CypherParserOPTIONAL, CypherParserMATCH, CypherParserUNWIND, CypherParserAS, CypherParserMERGE, CypherParserON, CypherParserCREATE, CypherParserSET, CypherParserDETACH, CypherParserDELETE, CypherParserREMOVE, CypherParserWITH, CypherParserDISTINCT, CypherParserRETURN, CypherParserORDER, CypherParserBY, CypherParserL_SKIP, CypherParserLIMIT, CypherParserASCENDING, CypherParserASC, CypherParserDESCENDING, CypherParserDESC, CypherParserWHERE, CypherParserOR, CypherParserXOR, CypherParserAND, CypherParserNOT, CypherParserIN, CypherParserSTARTS, CypherParserENDS, CypherParserCONTAINS, CypherParserIS, CypherParserNULL, CypherParserTRUE, CypherParserFALSE, CypherParserEXISTS, CypherParserCASE, CypherParserELSE, CypherParserEND, CypherParserWHEN, CypherParserTHEN, CypherParserCONSTRAINT, CypherParserDO, CypherParserFOR, CypherParserREQUIRE, CypherParserUNIQUE, CypherParserMANDATORY, CypherParserSCALAR, CypherParserOF, CypherParserADD, CypherParserDROP:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1534)
			p.OC_ReservedWord()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IOC_ReservedWordContext is an interface to support dynamic dispatch.
type IOC_ReservedWordContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_ReservedWordContext differentiates from other interfaces.
	IsOC_ReservedWordContext()
}

type OC_ReservedWordContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_ReservedWordContext() *OC_ReservedWordContext {
	var p = new(OC_ReservedWordContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_ReservedWord
	return p
}

func (*OC_ReservedWordContext) IsOC_ReservedWordContext() {}

func NewOC_ReservedWordContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_ReservedWordContext {
	var p = new(OC_ReservedWordContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_ReservedWord

	return p
}

func (s *OC_ReservedWordContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_ReservedWordContext) ALL() antlr.TerminalNode {
	return s.GetToken(CypherParserALL, 0)
}

func (s *OC_ReservedWordContext) ASC() antlr.TerminalNode {
	return s.GetToken(CypherParserASC, 0)
}

func (s *OC_ReservedWordContext) ASCENDING() antlr.TerminalNode {
	return s.GetToken(CypherParserASCENDING, 0)
}

func (s *OC_ReservedWordContext) BY() antlr.TerminalNode {
	return s.GetToken(CypherParserBY, 0)
}

func (s *OC_ReservedWordContext) CREATE() antlr.TerminalNode {
	return s.GetToken(CypherParserCREATE, 0)
}

func (s *OC_ReservedWordContext) DELETE() antlr.TerminalNode {
	return s.GetToken(CypherParserDELETE, 0)
}

func (s *OC_ReservedWordContext) DESC() antlr.TerminalNode {
	return s.GetToken(CypherParserDESC, 0)
}

func (s *OC_ReservedWordContext) DESCENDING() antlr.TerminalNode {
	return s.GetToken(CypherParserDESCENDING, 0)
}

func (s *OC_ReservedWordContext) DETACH() antlr.TerminalNode {
	return s.GetToken(CypherParserDETACH, 0)
}

func (s *OC_ReservedWordContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(CypherParserEXISTS, 0)
}

func (s *OC_ReservedWordContext) LIMIT() antlr.TerminalNode {
	return s.GetToken(CypherParserLIMIT, 0)
}

func (s *OC_ReservedWordContext) MATCH() antlr.TerminalNode {
	return s.GetToken(CypherParserMATCH, 0)
}

func (s *OC_ReservedWordContext) MERGE() antlr.TerminalNode {
	return s.GetToken(CypherParserMERGE, 0)
}

func (s *OC_ReservedWordContext) ON() antlr.TerminalNode {
	return s.GetToken(CypherParserON, 0)
}

func (s *OC_ReservedWordContext) OPTIONAL() antlr.TerminalNode {
	return s.GetToken(CypherParserOPTIONAL, 0)
}

func (s *OC_ReservedWordContext) ORDER() antlr.TerminalNode {
	return s.GetToken(CypherParserORDER, 0)
}

func (s *OC_ReservedWordContext) REMOVE() antlr.TerminalNode {
	return s.GetToken(CypherParserREMOVE, 0)
}

func (s *OC_ReservedWordContext) RETURN() antlr.TerminalNode {
	return s.GetToken(CypherParserRETURN, 0)
}

func (s *OC_ReservedWordContext) SET() antlr.TerminalNode {
	return s.GetToken(CypherParserSET, 0)
}

func (s *OC_ReservedWordContext) L_SKIP() antlr.TerminalNode {
	return s.GetToken(CypherParserL_SKIP, 0)
}

func (s *OC_ReservedWordContext) WHERE() antlr.TerminalNode {
	return s.GetToken(CypherParserWHERE, 0)
}

func (s *OC_ReservedWordContext) WITH() antlr.TerminalNode {
	return s.GetToken(CypherParserWITH, 0)
}

func (s *OC_ReservedWordContext) UNION() antlr.TerminalNode {
	return s.GetToken(CypherParserUNION, 0)
}

func (s *OC_ReservedWordContext) UNWIND() antlr.TerminalNode {
	return s.GetToken(CypherParserUNWIND, 0)
}

func (s *OC_ReservedWordContext) AND() antlr.TerminalNode {
	return s.GetToken(CypherParserAND, 0)
}

func (s *OC_ReservedWordContext) AS() antlr.TerminalNode {
	return s.GetToken(CypherParserAS, 0)
}

func (s *OC_ReservedWordContext) CONTAINS() antlr.TerminalNode {
	return s.GetToken(CypherParserCONTAINS, 0)
}

func (s *OC_ReservedWordContext) DISTINCT() antlr.TerminalNode {
	return s.GetToken(CypherParserDISTINCT, 0)
}

func (s *OC_ReservedWordContext) ENDS() antlr.TerminalNode {
	return s.GetToken(CypherParserENDS, 0)
}

func (s *OC_ReservedWordContext) IN() antlr.TerminalNode {
	return s.GetToken(CypherParserIN, 0)
}

func (s *OC_ReservedWordContext) IS() antlr.TerminalNode {
	return s.GetToken(CypherParserIS, 0)
}

func (s *OC_ReservedWordContext) NOT() antlr.TerminalNode {
	return s.GetToken(CypherParserNOT, 0)
}

func (s *OC_ReservedWordContext) OR() antlr.TerminalNode {
	return s.GetToken(CypherParserOR, 0)
}

func (s *OC_ReservedWordContext) STARTS() antlr.TerminalNode {
	return s.GetToken(CypherParserSTARTS, 0)
}

func (s *OC_ReservedWordContext) XOR() antlr.TerminalNode {
	return s.GetToken(CypherParserXOR, 0)
}

func (s *OC_ReservedWordContext) FALSE() antlr.TerminalNode {
	return s.GetToken(CypherParserFALSE, 0)
}

func (s *OC_ReservedWordContext) TRUE() antlr.TerminalNode {
	return s.GetToken(CypherParserTRUE, 0)
}

func (s *OC_ReservedWordContext) NULL() antlr.TerminalNode {
	return s.GetToken(CypherParserNULL, 0)
}

func (s *OC_ReservedWordContext) CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(CypherParserCONSTRAINT, 0)
}

func (s *OC_ReservedWordContext) DO() antlr.TerminalNode {
	return s.GetToken(CypherParserDO, 0)
}

func (s *OC_ReservedWordContext) FOR() antlr.TerminalNode {
	return s.GetToken(CypherParserFOR, 0)
}

func (s *OC_ReservedWordContext) REQUIRE() antlr.TerminalNode {
	return s.GetToken(CypherParserREQUIRE, 0)
}

func (s *OC_ReservedWordContext) UNIQUE() antlr.TerminalNode {
	return s.GetToken(CypherParserUNIQUE, 0)
}

func (s *OC_ReservedWordContext) CASE() antlr.TerminalNode {
	return s.GetToken(CypherParserCASE, 0)
}

func (s *OC_ReservedWordContext) WHEN() antlr.TerminalNode {
	return s.GetToken(CypherParserWHEN, 0)
}

func (s *OC_ReservedWordContext) THEN() antlr.TerminalNode {
	return s.GetToken(CypherParserTHEN, 0)
}

func (s *OC_ReservedWordContext) ELSE() antlr.TerminalNode {
	return s.GetToken(CypherParserELSE, 0)
}

func (s *OC_ReservedWordContext) END() antlr.TerminalNode {
	return s.GetToken(CypherParserEND, 0)
}

func (s *OC_ReservedWordContext) MANDATORY() antlr.TerminalNode {
	return s.GetToken(CypherParserMANDATORY, 0)
}

func (s *OC_ReservedWordContext) SCALAR() antlr.TerminalNode {
	return s.GetToken(CypherParserSCALAR, 0)
}

func (s *OC_ReservedWordContext) OF() antlr.TerminalNode {
	return s.GetToken(CypherParserOF, 0)
}

func (s *OC_ReservedWordContext) ADD() antlr.TerminalNode {
	return s.GetToken(CypherParserADD, 0)
}

func (s *OC_ReservedWordContext) DROP() antlr.TerminalNode {
	return s.GetToken(CypherParserDROP, 0)
}

func (s *OC_ReservedWordContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_ReservedWordContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_ReservedWordContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_ReservedWord(s)
	}
}

func (s *OC_ReservedWordContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_ReservedWord(s)
	}
}

func (p *CypherParser) OC_ReservedWord() (localctx IOC_ReservedWordContext) {
	localctx = NewOC_ReservedWordContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 188, CypherParserRULE_oC_ReservedWord)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1537)
		_la = p.GetTokenStream().LA(1)

		if !((((_la-46)&-(0x1f+1)) == 0 && ((1<<uint((_la-46)))&((1<<(CypherParserUNION-46))|(1<<(CypherParserALL-46))|(1<<(CypherParserOPTIONAL-46))|(1<<(CypherParserMATCH-46))|(1<<(CypherParserUNWIND-46))|(1<<(CypherParserAS-46))|(1<<(CypherParserMERGE-46))|(1<<(CypherParserON-46))|(1<<(CypherParserCREATE-46))|(1<<(CypherParserSET-46))|(1<<(CypherParserDETACH-46))|(1<<(CypherParserDELETE-46))|(1<<(CypherParserREMOVE-46))|(1<<(CypherParserWITH-46))|(1<<(CypherParserDISTINCT-46))|(1<<(CypherParserRETURN-46))|(1<<(CypherParserORDER-46))|(1<<(CypherParserBY-46))|(1<<(CypherParserL_SKIP-46))|(1<<(CypherParserLIMIT-46))|(1<<(CypherParserASCENDING-46))|(1<<(CypherParserASC-46))|(1<<(CypherParserDESCENDING-46))|(1<<(CypherParserDESC-46))|(1<<(CypherParserWHERE-46))|(1<<(CypherParserOR-46))|(1<<(CypherParserXOR-46))|(1<<(CypherParserAND-46))|(1<<(CypherParserNOT-46))|(1<<(CypherParserIN-46)))) != 0) || (((_la-78)&-(0x1f+1)) == 0 && ((1<<uint((_la-78)))&((1<<(CypherParserSTARTS-78))|(1<<(CypherParserENDS-78))|(1<<(CypherParserCONTAINS-78))|(1<<(CypherParserIS-78))|(1<<(CypherParserNULL-78))|(1<<(CypherParserTRUE-78))|(1<<(CypherParserFALSE-78))|(1<<(CypherParserEXISTS-78))|(1<<(CypherParserCASE-78))|(1<<(CypherParserELSE-78))|(1<<(CypherParserEND-78))|(1<<(CypherParserWHEN-78))|(1<<(CypherParserTHEN-78))|(1<<(CypherParserCONSTRAINT-78)))) != 0) || (((_la-110)&-(0x1f+1)) == 0 && ((1<<uint((_la-110)))&((1<<(CypherParserDO-110))|(1<<(CypherParserFOR-110))|(1<<(CypherParserREQUIRE-110))|(1<<(CypherParserUNIQUE-110))|(1<<(CypherParserMANDATORY-110))|(1<<(CypherParserSCALAR-110))|(1<<(CypherParserOF-110))|(1<<(CypherParserADD-110))|(1<<(CypherParserDROP-110)))) != 0)) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IOC_SymbolicNameContext is an interface to support dynamic dispatch.
type IOC_SymbolicNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_SymbolicNameContext differentiates from other interfaces.
	IsOC_SymbolicNameContext()
}

type OC_SymbolicNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_SymbolicNameContext() *OC_SymbolicNameContext {
	var p = new(OC_SymbolicNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_SymbolicName
	return p
}

func (*OC_SymbolicNameContext) IsOC_SymbolicNameContext() {}

func NewOC_SymbolicNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_SymbolicNameContext {
	var p = new(OC_SymbolicNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_SymbolicName

	return p
}

func (s *OC_SymbolicNameContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_SymbolicNameContext) UnescapedSymbolicName() antlr.TerminalNode {
	return s.GetToken(CypherParserUnescapedSymbolicName, 0)
}

func (s *OC_SymbolicNameContext) EscapedSymbolicName() antlr.TerminalNode {
	return s.GetToken(CypherParserEscapedSymbolicName, 0)
}

func (s *OC_SymbolicNameContext) HexLetter() antlr.TerminalNode {
	return s.GetToken(CypherParserHexLetter, 0)
}

func (s *OC_SymbolicNameContext) COUNT() antlr.TerminalNode {
	return s.GetToken(CypherParserCOUNT, 0)
}

func (s *OC_SymbolicNameContext) FILTER() antlr.TerminalNode {
	return s.GetToken(CypherParserFILTER, 0)
}

func (s *OC_SymbolicNameContext) EXTRACT() antlr.TerminalNode {
	return s.GetToken(CypherParserEXTRACT, 0)
}

func (s *OC_SymbolicNameContext) ANY() antlr.TerminalNode {
	return s.GetToken(CypherParserANY, 0)
}

func (s *OC_SymbolicNameContext) NONE() antlr.TerminalNode {
	return s.GetToken(CypherParserNONE, 0)
}

func (s *OC_SymbolicNameContext) SINGLE() antlr.TerminalNode {
	return s.GetToken(CypherParserSINGLE, 0)
}

func (s *OC_SymbolicNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_SymbolicNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_SymbolicNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_SymbolicName(s)
	}
}

func (s *OC_SymbolicNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_SymbolicName(s)
	}
}

func (p *CypherParser) OC_SymbolicName() (localctx IOC_SymbolicNameContext) {
	localctx = NewOC_SymbolicNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 190, CypherParserRULE_oC_SymbolicName)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1539)
		_la = p.GetTokenStream().LA(1)

		if !((((_la-83)&-(0x1f+1)) == 0 && ((1<<uint((_la-83)))&((1<<(CypherParserCOUNT-83))|(1<<(CypherParserANY-83))|(1<<(CypherParserNONE-83))|(1<<(CypherParserSINGLE-83))|(1<<(CypherParserHexLetter-83)))) != 0) || (((_la-119)&-(0x1f+1)) == 0 && ((1<<uint((_la-119)))&((1<<(CypherParserFILTER-119))|(1<<(CypherParserEXTRACT-119))|(1<<(CypherParserUnescapedSymbolicName-119))|(1<<(CypherParserEscapedSymbolicName-119)))) != 0)) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IOC_LeftArrowHeadContext is an interface to support dynamic dispatch.
type IOC_LeftArrowHeadContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_LeftArrowHeadContext differentiates from other interfaces.
	IsOC_LeftArrowHeadContext()
}

type OC_LeftArrowHeadContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_LeftArrowHeadContext() *OC_LeftArrowHeadContext {
	var p = new(OC_LeftArrowHeadContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_LeftArrowHead
	return p
}

func (*OC_LeftArrowHeadContext) IsOC_LeftArrowHeadContext() {}

func NewOC_LeftArrowHeadContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_LeftArrowHeadContext {
	var p = new(OC_LeftArrowHeadContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_LeftArrowHead

	return p
}

func (s *OC_LeftArrowHeadContext) GetParser() antlr.Parser { return s.parser }
func (s *OC_LeftArrowHeadContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_LeftArrowHeadContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_LeftArrowHeadContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_LeftArrowHead(s)
	}
}

func (s *OC_LeftArrowHeadContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_LeftArrowHead(s)
	}
}

func (p *CypherParser) OC_LeftArrowHead() (localctx IOC_LeftArrowHeadContext) {
	localctx = NewOC_LeftArrowHeadContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 192, CypherParserRULE_oC_LeftArrowHead)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1541)
		_la = p.GetTokenStream().LA(1)

		if !(((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<CypherParserT__18)|(1<<CypherParserT__26)|(1<<CypherParserT__27)|(1<<CypherParserT__28)|(1<<CypherParserT__29))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IOC_RightArrowHeadContext is an interface to support dynamic dispatch.
type IOC_RightArrowHeadContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_RightArrowHeadContext differentiates from other interfaces.
	IsOC_RightArrowHeadContext()
}

type OC_RightArrowHeadContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_RightArrowHeadContext() *OC_RightArrowHeadContext {
	var p = new(OC_RightArrowHeadContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_RightArrowHead
	return p
}

func (*OC_RightArrowHeadContext) IsOC_RightArrowHeadContext() {}

func NewOC_RightArrowHeadContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_RightArrowHeadContext {
	var p = new(OC_RightArrowHeadContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_RightArrowHead

	return p
}

func (s *OC_RightArrowHeadContext) GetParser() antlr.Parser { return s.parser }
func (s *OC_RightArrowHeadContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_RightArrowHeadContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_RightArrowHeadContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_RightArrowHead(s)
	}
}

func (s *OC_RightArrowHeadContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_RightArrowHead(s)
	}
}

func (p *CypherParser) OC_RightArrowHead() (localctx IOC_RightArrowHeadContext) {
	localctx = NewOC_RightArrowHeadContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 194, CypherParserRULE_oC_RightArrowHead)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1543)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-20)&-(0x1f+1)) == 0 && ((1<<uint((_la-20)))&((1<<(CypherParserT__19-20))|(1<<(CypherParserT__30-20))|(1<<(CypherParserT__31-20))|(1<<(CypherParserT__32-20))|(1<<(CypherParserT__33-20)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IOC_DashContext is an interface to support dynamic dispatch.
type IOC_DashContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_DashContext differentiates from other interfaces.
	IsOC_DashContext()
}

type OC_DashContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_DashContext() *OC_DashContext {
	var p = new(OC_DashContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_Dash
	return p
}

func (*OC_DashContext) IsOC_DashContext() {}

func NewOC_DashContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_DashContext {
	var p = new(OC_DashContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_Dash

	return p
}

func (s *OC_DashContext) GetParser() antlr.Parser { return s.parser }
func (s *OC_DashContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_DashContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_DashContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_Dash(s)
	}
}

func (s *OC_DashContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_Dash(s)
	}
}

func (p *CypherParser) OC_Dash() (localctx IOC_DashContext) {
	localctx = NewOC_DashContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 196, CypherParserRULE_oC_Dash)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1545)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-14)&-(0x1f+1)) == 0 && ((1<<uint((_la-14)))&((1<<(CypherParserT__13-14))|(1<<(CypherParserT__34-14))|(1<<(CypherParserT__35-14))|(1<<(CypherParserT__36-14))|(1<<(CypherParserT__37-14))|(1<<(CypherParserT__38-14))|(1<<(CypherParserT__39-14))|(1<<(CypherParserT__40-14))|(1<<(CypherParserT__41-14))|(1<<(CypherParserT__42-14))|(1<<(CypherParserT__43-14))|(1<<(CypherParserT__44-14)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}
